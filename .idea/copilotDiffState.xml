<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/README.md" />
              <option name="originalContent" value="# Hidden Sri Lanka Mobile App&#10;&#10;### Change Log &#10;- Date : 2025/6/18 11.21&#10;- Changes Made : github Repostitory Initialized &#10;- Auther : Asitha Kanchana&#10;" />
              <option name="updatedContent" value="# Hidden Sri Lanka Mobile App&#10;&#10;##  Android Application Module&#10;&#10;This directory contains the main Android application code for the Hidden Sri Lanka project, developed as part of my Mobile Application Development course at OUSL.&#10;&#10;## ️ Project Structure&#10;&#10;```&#10;app/&#10;├── src/main/java/com/s23010526/hiddensrilanka/&#10;│   ├── Activities/&#10;│   │   ├── MainActivity.java&#10;│   │   ├── HomeActivity.java&#10;│   │   ├── LocationDetailActivity.java&#10;│   │   ├── AddLocationActivity.java&#10;│   │   └── LoginActivity.java&#10;│   ├── Adapters/&#10;│   │   └── AttractionAdapter.java&#10;│   ├── Models/&#10;│   │   └── Attraction.java&#10;│   ├── Helpers/&#10;│   │   └── GooglePhotosUrlHelper.java&#10;│   └── Utils/&#10;└── src/main/res/&#10;    ├── layout/&#10;    ├── values/&#10;    └── drawable/&#10;```&#10;&#10;##  Technical Implementation&#10;&#10;### Core Components&#10;&#10;#### Activities&#10;- **HomeActivity**: Location detection, attraction display, and filtering&#10;- **LocationDetailActivity**: Detailed attraction view with intelligent directions&#10;- **AddLocationActivity**: Community contribution form with Google Photos integration&#10;- **LoginActivity**: Authentication and session management&#10;&#10;#### Key Classes&#10;- **AttractionAdapter**: RecyclerView adapter with proper intent data passing&#10;- **GooglePhotosUrlHelper**: URL processing for seamless image integration&#10;- **Attraction**: Data model with comprehensive field mapping&#10;&#10;### Recent Development Work&#10;&#10;#### Bug Fixes Implemented&#10;1. **Intent Data Passing Issue** (Fixed: August 2025)&#10;   - Problem: Location details page showing empty data&#10;   - Solution: Corrected intent extra keys between activities&#10;   - Files modified: `AttractionAdapter.java`, `LocationDetailActivity.java`&#10;&#10;2. **Google Photos Image Loading** (Fixed: August 2025)&#10;   - Problem: Images not displaying in details page&#10;   - Solution: Added URL processing to LocationDetailActivity&#10;   - Files modified: `LocationDetailActivity.java`&#10;&#10;3. **Directions Button Functionality** (Enhanced: August 2025)&#10;   - Problem: Button not working when coordinates missing&#10;   - Solution: Implemented three-level fallback system&#10;   - Files modified: `LocationDetailActivity.java`&#10;&#10;#### Technical Improvements&#10;- **Smart Geocoding**: Automatic coordinate resolution for missing location data&#10;- **Error Handling**: Comprehensive exception management across all activities&#10;- **Background Processing**: Proper threading for network operations&#10;- **Lambda Expression Fixes**: Resolved compilation issues with final variables&#10;&#10;##  Learning Outcomes Demonstrated&#10;&#10;### Android Development Skills&#10;- **Activity Communication**: Proper intent usage and data passing&#10;- **Lifecycle Management**: Handling activity states and background operations&#10;- **UI/UX Design**: Material Design implementation with responsive layouts&#10;- **Database Integration**: Firestore real-time data synchronization&#10;- **Location Services**: GPS integration and geocoding API usage&#10;- **Image Processing**: Efficient loading with Glide and URL conversion&#10;&#10;### Problem-Solving Approach&#10;- **Systematic Debugging**: Using logs and systematic testing to identify issues&#10;- **Fallback Systems**: Implementing robust error recovery mechanisms&#10;- **User Experience**: Ensuring functionality works under various conditions&#10;- **Code Quality**: Proper variable scoping and lambda expression handling&#10;&#10;##  Firebase Configuration&#10;&#10;The app integrates with Firebase for:&#10;- **Firestore Database**: Real-time attraction data storage&#10;- **Authentication**: User login and session management&#10;- **Security Rules**: Proper data access control&#10;&#10;Configuration file: `google-services.json` (not included in repository for security)&#10;&#10;##  Testing Approach&#10;&#10;### Manual Testing Scenarios&#10;- Location detection across different cities&#10;- Image loading with various URL formats&#10;- Directions functionality with and without coordinates&#10;- Error handling under poor network conditions&#10;- Cross-activity data flow validation&#10;&#10;### Debug Implementation&#10;- Comprehensive logging throughout the application&#10;- Error state handling with user-friendly messages&#10;- Performance monitoring for image loading and geocoding&#10;&#10;##  Performance Considerations&#10;&#10;### Optimizations Implemented&#10;- **Image Caching**: Glide library for efficient memory usage&#10;- **Background Processing**: Non-blocking UI for network operations&#10;- **Database Queries**: Efficient Firestore query structure&#10;- **Memory Management**: Proper activity lifecycle handling&#10;&#10;##  Build Configuration&#10;&#10;- **Target SDK**: API 34 (Android 14)&#10;- **Minimum SDK**: API 21 (Android 5.0)&#10;- **Build Tools**: Gradle with modern Android build system&#10;- **Dependencies**: Material Design, Firebase, Glide, Location Services&#10;&#10;##  Change Log&#10;&#10;### August 2025&#10;- **Intent Data Passing Fix**: Resolved empty details page issue&#10;- **Google Photos Integration**: Enhanced image loading across all screens&#10;- **Intelligent Directions**: Implemented geocoding fallback system&#10;- **Error Handling**: Added comprehensive exception management&#10;- **Code Quality**: Fixed lambda expression compilation issues&#10;&#10;### June 2025&#10;- **Initial Development**: GitHub repository initialization&#10;- **Core Features**: Basic app structure and Firebase integration&#10;- **Author**: Asitha Kanchana (Student ID: S23010526)&#10;&#10;##  Academic Context&#10;&#10;This mobile application demonstrates practical implementation of concepts learned in the Mobile Application Development course at OUSL, including:&#10;&#10;- Modern Android development practices&#10;- Real-time database integration&#10;- Location-based services&#10;- Image processing and optimization&#10;- Error handling and user experience design&#10;- Systematic debugging and problem-solving&#10;&#10;---&#10;&#10;**Developer**: Asitha Kanchana  &#10;**Student ID**: S23010526  &#10;**Institution**: Open University of Sri Lanka  &#10;**Course**: Mobile Application Development  &#10;**Degree**: Bachelor of Software Engineering" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.google.gms.google.services)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.s23010526.hiddensrilanka&quot;&#10;    compileSdk = 34  // Change from 35 to 34 for better compatibility&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.s23010526.hiddensrilanka&quot;&#10;        minSdk = 24&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11  // Update from VERSION_1_8&#10;        targetCompatibility = JavaVersion.VERSION_11  // Update from VERSION_1_8&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.activity)&#10;    implementation(libs.constraintlayout)&#10;&#10;    // --- Firebase Setup ---&#10;    // Firebase BoM -- Bill of Materials--&#10;    // This line manages all Firebase library versions.&#10;    implementation(platform(libs.firebase.bom))&#10;&#10;    // Versions are handled by the BoM so dont need to specify them here.&#10;    implementation(libs.firebase.auth)       // For login system&#10;    implementation(libs.firebase.database)   // For login system&#10;    implementation(libs.firebase.firestore)  // For storing location data&#10;    implementation(libs.firebase.storage)    // For storing images&#10;&#10;    // --- Google Play Services ---&#10;    implementation(&quot;com.google.android.gms:play-services-location:21.0.1&quot;) // For location services&#10;    implementation(&quot;com.google.android.gms:play-services-auth:20.7.0&quot;) // For Google Sign-In&#10;&#10;    // --- CardView for unified design system ---&#10;    implementation(&quot;androidx.cardview:cardview:1.0.0&quot;)&#10;&#10;    // --- Image Loading ---&#10;    implementation(libs.glide)               // For loading images&#10;    annotationProcessor(libs.glide.compiler) // For Glide annotation processing&#10;&#10;    // --- Testing ---&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.google.gms.google.services)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.s23010526.hiddensrilanka&quot;&#10;    compileSdk = 34  // Change from 35 to 34 for better compatibility&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.s23010526.hiddensrilanka&quot;&#10;        minSdk = 24&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11  // Update from VERSION_1_8&#10;        targetCompatibility = JavaVersion.VERSION_11  // Update from VERSION_1_8&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.activity)&#10;    implementation(libs.constraintlayout)&#10;&#10;    // --- Firebase Setup ---&#10;    // Firebase BoM -- Bill of Materials--&#10;    // This line manages all Firebase library versions.&#10;    implementation(platform(libs.firebase.bom))&#10;&#10;    // Versions are handled by the BoM so dont need to specify them here.&#10;    implementation(libs.firebase.auth)       // For login system&#10;    implementation(libs.firebase.database)   // For login system&#10;    implementation(libs.firebase.firestore)  // For storing location data&#10;    implementation(libs.firebase.storage)    // For storing images&#10;&#10;    // --- Google Play Services ---&#10;    implementation(&quot;com.google.android.gms:play-services-location:21.0.1&quot;) // For location services&#10;    implementation(&quot;com.google.android.gms:play-services-auth:20.7.0&quot;) // For Google Sign-In&#10;    implementation(&quot;com.google.android.gms:play-services-maps:18.2.0&quot;) // For Google Maps&#10;&#10;    // --- CardView for unified design system ---&#10;    implementation(&quot;androidx.cardview:cardview:1.0.0&quot;)&#10;&#10;    // --- Image Loading ---&#10;    implementation(libs.glide)               // For loading images&#10;    annotationProcessor(libs.glide.compiler) // For Glide annotation processing&#10;&#10;    // --- Testing ---&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.HiddenSriLanka&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.BaseActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LocationDetailActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.AddLocationActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.FetureCommingSoonActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.AboutUsActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SettingsActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.FullMapViewActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LocationDetailScreenActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.HomeActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SignUpActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.OnboardingScreen2Activity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.WelcomeActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.HiddenSriLanka&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;!-- Google Maps API Key --&gt;&#10;        &lt;meta-data&#10;            android:name=&quot;com.google.android.geo.API_KEY&quot;&#10;            android:value=&quot;@string/google_maps_key&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.BaseActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LocationDetailActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.AddLocationActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.FetureCommingSoonActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.AboutUsActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SettingsActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.FullMapViewActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LocationDetailScreenActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.HomeActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SignUpActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.OnboardingScreen2Activity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.WelcomeActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/AddLocationActivityNew.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/AddLocationActivityNew.java" />
              <option name="updatedContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.util.Log;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.AutoCompleteTextView;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import android.widget.LinearLayout;&#10;import android.widget.Toast;&#10;import android.widget.ProgressBar;&#10;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.google.android.material.button.MaterialButton;&#10;import com.google.android.material.textfield.TextInputLayout;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;public class AddLocationActivity extends BaseActivity implements ImageGalleryAdapter.OnImageClickListener {&#10;&#10;    private static final String TAG = &quot;AddLocationActivity&quot;;&#10;&#10;    // UI Components&#10;    private EditText etLocationName, etDescription, etYoutubeUrl, etContributorName, etImageUrl;&#10;    private AutoCompleteTextView etCategory, etCity, etProvince;&#10;    private LinearLayout layoutGalleryPlaceholder;&#10;    private MaterialButton btnSubmitLocation, btnLoadUrl, btnGooglePhotos, btnClearImages;&#10;    private ProgressBar progressBar;&#10;    private RecyclerView rvImageGallery;&#10;&#10;    // Firebase&#10;    private FirebaseFirestore firestore;&#10;&#10;    // Image gallery data&#10;    private ArrayList&lt;String&gt; imageUrls;&#10;    private ImageGalleryAdapter imageGalleryAdapter;&#10;&#10;    // Data structures for province-city mapping&#10;    private Map&lt;String, String[]&gt; provinceCityMap;&#10;&#10;    @Override&#10;    protected int getLayoutResourceId() {&#10;        return R.layout.activity_add_location;&#10;    }&#10;&#10;    @Override&#10;    protected String getActivityTitle() {&#10;        return &quot;Add New Location&quot;;&#10;    }&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        initializeViews();&#10;        initializeFirebase();&#10;        initializeProvinceCityMapping();&#10;        setupDropdowns();&#10;        setupImageGallery();&#10;        setupClickListeners();&#10;    }&#10;&#10;    private void initializeViews() {&#10;        etLocationName = findViewById(R.id.et_location_name);&#10;        etDescription = findViewById(R.id.et_description);&#10;        etYoutubeUrl = findViewById(R.id.et_youtube_url);&#10;        etContributorName = findViewById(R.id.et_contributor_name);&#10;        etImageUrl = findViewById(R.id.et_image_url);&#10;        etCategory = findViewById(R.id.et_category);&#10;        etCity = findViewById(R.id.et_city);&#10;        etProvince = findViewById(R.id.et_province);&#10;        layoutGalleryPlaceholder = findViewById(R.id.layout_gallery_placeholder);&#10;        btnSubmitLocation = findViewById(R.id.btn_submit_location);&#10;        btnLoadUrl = findViewById(R.id.btn_load_url);&#10;        btnGooglePhotos = findViewById(R.id.btn_google_photos);&#10;        btnClearImages = findViewById(R.id.btn_clear_images);&#10;        progressBar = findViewById(R.id.progress_bar_submit);&#10;        rvImageGallery = findViewById(R.id.rv_image_gallery);&#10;    }&#10;&#10;    private void initializeFirebase() {&#10;        firestore = FirebaseFirestore.getInstance();&#10;        Log.d(TAG, &quot;Firestore initialized&quot;);&#10;    }&#10;&#10;    private void setupImageGallery() {&#10;        // Initialize image gallery&#10;        imageUrls = new ArrayList&lt;&gt;();&#10;        imageGalleryAdapter = new ImageGalleryAdapter(this, imageUrls, true); // true = show remove buttons&#10;        imageGalleryAdapter.setOnImageClickListener(this);&#10;        &#10;        rvImageGallery.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));&#10;        rvImageGallery.setAdapter(imageGalleryAdapter);&#10;        &#10;        updateGalleryVisibility();&#10;    }&#10;&#10;    private void updateGalleryVisibility() {&#10;        if (imageUrls.isEmpty()) {&#10;            layoutGalleryPlaceholder.setVisibility(View.VISIBLE);&#10;            btnClearImages.setVisibility(View.GONE);&#10;        } else {&#10;            layoutGalleryPlaceholder.setVisibility(View.GONE);&#10;            btnClearImages.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    private void setupClickListeners() {&#10;        btnSubmitLocation.setOnClickListener(v -&gt; validateAndSubmitLocation());&#10;        btnLoadUrl.setOnClickListener(v -&gt; loadImageFromUrl());&#10;        btnGooglePhotos.setOnClickListener(v -&gt; showGooglePhotosDialog());&#10;        btnClearImages.setOnClickListener(v -&gt; clearImageGallery());&#10;    }&#10;&#10;    private void loadImageFromUrl() {&#10;        String url = etImageUrl.getText().toString().trim();&#10;        &#10;        if (TextUtils.isEmpty(url)) {&#10;            etImageUrl.setError(&quot;Please enter an image URL&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!isValidUrl(url)) {&#10;            etImageUrl.setError(&quot;Please enter a valid URL&quot;);&#10;            return;&#10;        }&#10;&#10;        // Add image to gallery&#10;        imageUrls.add(url);&#10;        imageGalleryAdapter.notifyItemInserted(imageUrls.size() - 1);&#10;        updateGalleryVisibility();&#10;        &#10;        // Clear the input field&#10;        etImageUrl.setText(&quot;&quot;);&#10;        &#10;        Toast.makeText(this, &quot;Image added to gallery!&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    private boolean isValidUrl(String url) {&#10;        return url.startsWith(&quot;http://&quot;) || url.startsWith(&quot;https://&quot;);&#10;    }&#10;&#10;    private void showGooglePhotosDialog() {&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#10;            .setTitle(&quot;Import from Google Photos&quot;)&#10;            .setMessage(&quot;To add images from Google Photos:\n\n&quot; +&#10;                       &quot;1. Open Google Photos app\n&quot; +&#10;                       &quot;2. Select your photo\n&quot; +&#10;                       &quot;3. Tap Share → Copy link\n&quot; +&#10;                       &quot;4. Return here and paste the link\n&quot; +&#10;                       &quot;5. Tap 'Add Image from URL'&quot;)&#10;            .setPositiveButton(&quot;Got it!&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    private void clearImageGallery() {&#10;        imageUrls.clear();&#10;        imageGalleryAdapter.notifyDataSetChanged();&#10;        updateGalleryVisibility();&#10;        Toast.makeText(this, &quot;Gallery cleared&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    // Implementation of ImageGalleryAdapter.OnImageClickListener&#10;    @Override&#10;    public void onImageClick(int position, String imageUrl) {&#10;        // Show full screen image or preview&#10;        showImagePreview(imageUrl);&#10;    }&#10;&#10;    @Override&#10;    public void onImageRemove(int position) {&#10;        imageUrls.remove(position);&#10;        imageGalleryAdapter.notifyItemRemoved(position);&#10;        imageGalleryAdapter.notifyItemRangeChanged(position, imageUrls.size());&#10;        updateGalleryVisibility();&#10;        Toast.makeText(this, &quot;Image removed&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    private void showImagePreview(String imageUrl) {&#10;        // Create a simple dialog to show full image&#10;        View dialogView = getLayoutInflater().inflate(android.R.layout.select_dialog_item, null);&#10;        ImageView imageView = new ImageView(this);&#10;        imageView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);&#10;        imageView.setPadding(20, 20, 20, 20);&#10;        &#10;        Glide.with(this)&#10;            .load(imageUrl)&#10;            .into(imageView);&#10;&#10;        new androidx.appcompat.app.AlertDialog.Builder(this)&#10;            .setTitle(&quot;Image Preview&quot;)&#10;            .setView(imageView)&#10;            .setPositiveButton(&quot;Close&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    private void initializeProvinceCityMapping() {&#10;        provinceCityMap = new HashMap&lt;&gt;();&#10;        provinceCityMap.put(&quot;Western Province&quot;, new String[]{&#10;            &quot;Colombo&quot;, &quot;Gampaha&quot;, &quot;Kalutara&quot;, &quot;Negombo&quot;, &quot;Panadura&quot;, &quot;Moratuwa&quot;&#10;        });&#10;        provinceCityMap.put(&quot;Central Province&quot;, new String[]{&#10;            &quot;Kandy&quot;, &quot;Matale&quot;, &quot;Nuwara Eliya&quot;, &quot;Gampola&quot;, &quot;Nawalapitiya&quot;&#10;        });&#10;        provinceCityMap.put(&quot;Southern Province&quot;, new String[]{&#10;            &quot;Galle&quot;, &quot;Matara&quot;, &quot;Hambantota&quot;, &quot;Tangalle&quot;, &quot;Mirissa&quot;&#10;        });&#10;        // Add other provinces as needed&#10;    }&#10;&#10;    private void setupDropdowns() {&#10;        // Categories dropdown&#10;        String[] categories = {&#10;            &quot;Historical Site&quot;, &quot;WaterFall&quot;, &quot;Beach&quot;, &quot;Mountain&quot;, &quot;Temple&quot;,&#10;            &quot;National Park&quot;, &quot;Cave&quot;, &quot;Lake&quot;, &quot;Village&quot;, &quot;Cultural Site&quot;&#10;        };&#10;        ArrayAdapter&lt;String&gt; categoryAdapter = new ArrayAdapter&lt;&gt;(this,&#10;            android.R.layout.simple_dropdown_item_1line, categories);&#10;        etCategory.setAdapter(categoryAdapter);&#10;&#10;        // Provinces dropdown&#10;        String[] provinces = provinceCityMap.keySet().toArray(new String[0]);&#10;        ArrayAdapter&lt;String&gt; provinceAdapter = new ArrayAdapter&lt;&gt;(this,&#10;            android.R.layout.simple_dropdown_item_1line, provinces);&#10;        etProvince.setAdapter(provinceAdapter);&#10;&#10;        // Setup province selection listener&#10;        etProvince.setOnItemClickListener((parent, view, position, id) -&gt; {&#10;            String selectedProvince = parent.getItemAtPosition(position).toString();&#10;            updateCityDropdown(selectedProvince);&#10;        });&#10;    }&#10;&#10;    private void updateCityDropdown(String selectedProvince) {&#10;        String[] cities = provinceCityMap.get(selectedProvince);&#10;        if (cities != null) {&#10;            ArrayAdapter&lt;String&gt; cityAdapter = new ArrayAdapter&lt;&gt;(this,&#10;                android.R.layout.simple_dropdown_item_1line, cities);&#10;            etCity.setAdapter(cityAdapter);&#10;            etCity.setText(&quot;&quot;);&#10;        }&#10;    }&#10;&#10;    private void validateAndSubmitLocation() {&#10;        String locationName = etLocationName.getText().toString().trim();&#10;        String description = etDescription.getText().toString().trim();&#10;        String category = etCategory.getText().toString().trim();&#10;        String city = etCity.getText().toString().trim();&#10;        String contributorName = etContributorName.getText().toString().trim();&#10;        String youtubeUrl = etYoutubeUrl.getText().toString().trim();&#10;        String province = etProvince.getText().toString().trim();&#10;&#10;        // Validation&#10;        if (TextUtils.isEmpty(locationName)) {&#10;            etLocationName.setError(&quot;Location name is required&quot;);&#10;            etLocationName.requestFocus();&#10;            return;&#10;        }&#10;&#10;        if (TextUtils.isEmpty(description)) {&#10;            etDescription.setError(&quot;Description is required&quot;);&#10;            etDescription.requestFocus();&#10;            return;&#10;        }&#10;&#10;        if (TextUtils.isEmpty(category)) {&#10;            etCategory.setError(&quot;Category is required&quot;);&#10;            etCategory.requestFocus();&#10;            return;&#10;        }&#10;&#10;        if (TextUtils.isEmpty(city)) {&#10;            etCity.setError(&quot;City is required&quot;);&#10;            etCity.requestFocus();&#10;            return;&#10;        }&#10;&#10;        if (TextUtils.isEmpty(contributorName)) {&#10;            etContributorName.setError(&quot;Your name is required&quot;);&#10;            etContributorName.requestFocus();&#10;            return;&#10;        }&#10;&#10;        if (TextUtils.isEmpty(province)) {&#10;            etProvince.setError(&quot;Province is required&quot;);&#10;            etProvince.requestFocus();&#10;            return;&#10;        }&#10;&#10;        // Check if at least one image URL is provided&#10;        if (imageUrls.isEmpty()) {&#10;            Toast.makeText(this, &quot;Please add at least one image&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        // Submit the location&#10;        submitLocation(locationName, description, category, city, contributorName, youtubeUrl, province);&#10;    }&#10;&#10;    private void submitLocation(String locationName, String description, String category,&#10;                              String city, String contributorName, String youtubeUrl, String province) {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;&#10;        // Create location data map&#10;        Map&lt;String, Object&gt; locationData = new HashMap&lt;&gt;();&#10;        locationData.put(&quot;name&quot;, locationName);&#10;        locationData.put(&quot;description&quot;, description);&#10;        locationData.put(&quot;category&quot;, category);&#10;        locationData.put(&quot;city&quot;, city);&#10;        locationData.put(&quot;province&quot;, province);&#10;        locationData.put(&quot;contributorName&quot;, contributorName);&#10;        locationData.put(&quot;contributedAt&quot;, System.currentTimeMillis());&#10;        locationData.put(&quot;youtubeUrl&quot;, youtubeUrl.isEmpty() ? &quot;&quot; : youtubeUrl);&#10;        locationData.put(&quot;images&quot;, imageUrls); // Multiple images&#10;&#10;        // Save to Firestore&#10;        firestore.collection(&quot;cities&quot;)&#10;                .document(city)&#10;                .collection(&quot;attractions&quot;)&#10;                .add(locationData)&#10;                .addOnSuccessListener(documentReference -&gt; {&#10;                    progressBar.setVisibility(View.GONE);&#10;                    Toast.makeText(this, &quot;Location added successfully!&quot;, Toast.LENGTH_LONG).show();&#10;                    clearForm();&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    progressBar.setVisibility(View.GONE);&#10;                    Toast.makeText(this, &quot;Error: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                });&#10;    }&#10;&#10;    private void clearForm() {&#10;        etLocationName.setText(&quot;&quot;);&#10;        etDescription.setText(&quot;&quot;);&#10;        etCategory.setText(&quot;&quot;);&#10;        etCity.setText(&quot;&quot;);&#10;        etProvince.setText(&quot;&quot;);&#10;        etContributorName.setText(&quot;&quot;);&#10;        etYoutubeUrl.setText(&quot;&quot;);&#10;        etImageUrl.setText(&quot;&quot;);&#10;        &#10;        clearImageGallery();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/AttractionAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/AttractionAdapter.java" />
              <option name="originalContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.content.Intent;&#10;import android.graphics.drawable.Drawable;&#10;import android.util.Log;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.bumptech.glide.load.DataSource;&#10;import com.bumptech.glide.load.engine.GlideException;&#10;import com.bumptech.glide.request.RequestListener;&#10;import com.bumptech.glide.request.target.Target;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * AttractionAdapter - RecyclerView adapter for displaying attraction cards&#10; *&#10; * This adapter demonstrates key Android development concepts:&#10; * 1. RecyclerView implementation for efficient list scrolling&#10; * 2. ViewHolder pattern for memory optimization&#10; * 3. Intent data passing between activities&#10; * 4. Image loading with Google Photos URL processing&#10; * 5. Dynamic UI updates based on data state&#10; *&#10; * Key Bug Fix: Resolved intent data passing issue that caused&#10; * empty location details pages due to mismatched intent keys.&#10; */&#10;public class AttractionAdapter extends RecyclerView.Adapter&lt;AttractionAdapter.AttractionViewHolder&gt; {&#10;&#10;    // List of attractions to display - could include real data or placeholders&#10;    private List&lt;Attraction&gt; attractionList;&#10;&#10;    /**&#10;     * Constructor - Initialize adapter with attraction data&#10;     * @param attractionList List of attractions to display in RecyclerView&#10;     */&#10;    public AttractionAdapter(List&lt;Attraction&gt; attractionList) {&#10;        this.attractionList = attractionList;&#10;    }&#10;&#10;    /**&#10;     * Create new ViewHolder instances for RecyclerView items&#10;     * Called when RecyclerView needs a new item view&#10;     */&#10;    @NonNull&#10;    @Override&#10;    public AttractionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        // Inflate the item layout for each attraction card&#10;        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item_attraction, parent, false);&#10;        return new AttractionViewHolder(view);&#10;    }&#10;&#10;    /**&#10;     * Bind data to ViewHolder for each item in the list&#10;     * This method is called for each visible item and handles:&#10;     * 1. Text data binding&#10;     * 2. Image loading with Google Photos processing&#10;     * 3. Placeholder vs real attraction handling&#10;     * 4. Click listener setup for navigation&#10;     */&#10;    @Override&#10;    public void onBindViewHolder(@NonNull AttractionViewHolder holder, int position) {&#10;        Attraction currentAttraction = attractionList.get(position);&#10;&#10;        // Set basic text data for the attraction card&#10;        holder.nameTextView.setText(currentAttraction.getName());&#10;        holder.categoryTextView.setText(currentAttraction.getCategory());&#10;&#10;        // Handle placeholder entries vs real attractions differently&#10;        if (currentAttraction.isPlaceholder()) {&#10;            // PLACEHOLDER HANDLING: Show &quot;grow our database&quot; image for empty states&#10;            holder.imageViewAttraction.setImageResource(R.drawable.grow_our_database);&#10;            holder.imageViewAttraction.setScaleType(ImageView.ScaleType.CENTER_CROP);&#10;&#10;            // Visual styling to indicate this is a call-to-action placeholder&#10;            holder.itemView.setAlpha(0.9f);&#10;            holder.nameTextView.setTextColor(ContextCompat.getColor(holder.itemView.getContext(), R.color.DeepForestGreen));&#10;            holder.categoryTextView.setTextColor(ContextCompat.getColor(holder.itemView.getContext(), R.color.GoldYellow));&#10;        } else {&#10;            // REAL ATTRACTION HANDLING: Load actual attraction data and images&#10;            holder.itemView.setAlpha(1.0f);&#10;            holder.nameTextView.setTextColor(ContextCompat.getColor(holder.itemView.getContext(), R.color.NavyBlue));&#10;            holder.categoryTextView.setTextColor(ContextCompat.getColor(holder.itemView.getContext(), R.color.light_gray));&#10;            holder.imageViewAttraction.setScaleType(ImageView.ScaleType.CENTER_CROP);&#10;&#10;            // SMART IMAGE LOADING: Handle different types of image URLs&#10;            if (currentAttraction.getImages() != null &amp;&amp; !currentAttraction.getImages().isEmpty()) {&#10;                String imageUrl = currentAttraction.getImages().get(0);&#10;&#10;                // Process Google Photos URLs before loading with Glide&#10;                if (isGooglePhotosUrl(imageUrl)) {&#10;                    Log.d(&quot;GlideDebug&quot;, &quot;Processing Google Photos URL: &quot; + imageUrl);&#10;                    // Convert Google Photos share link to direct image URL&#10;                    GooglePhotosUrlHelper.processImageUrl(holder.itemView.getContext(), imageUrl, processedUrl -&gt; {&#10;                        loadImageWithGlide(holder, processedUrl);&#10;                    });&#10;                } else {&#10;                    // Direct image URL - load immediately&#10;                    loadImageWithGlide(holder, imageUrl);&#10;                }&#10;            } else {&#10;                // No image available - show placeholder&#10;                Log.w(&quot;GlideDebug&quot;, &quot;Image URL list is null or empty for: &quot; + currentAttraction.getName());&#10;                holder.imageViewAttraction.setImageResource(R.drawable.ic_image_placeholder);&#10;            }&#10;        }&#10;&#10;        // CRITICAL FIX: Click listener with proper intent data passing&#10;        // This was the source of the major bug where details page showed empty data&#10;        setupClickListener(holder, currentAttraction);&#10;    }&#10;&#10;    /**&#10;     * Set up click listeners for attraction cards&#10;     *&#10;     * MAJOR BUG FIX: This method contains the solution to the intent data passing&#10;     * issue that prevented location details from displaying properly.&#10;     */&#10;    private void setupClickListener(AttractionViewHolder holder, Attraction currentAttraction) {&#10;        holder.itemView.setOnClickListener(v -&gt; {&#10;            if (currentAttraction.isPlaceholder()) {&#10;                // PLACEHOLDER CLICK: Redirect to add location form&#10;                Intent intent = new Intent(holder.itemView.getContext(), AddLocationActivity.class);&#10;                holder.itemView.getContext().startActivity(intent);&#10;&#10;                Toast.makeText(holder.itemView.getContext(),&#10;                        &quot;Let's add some attractions! &quot;,&#10;                        Toast.LENGTH_SHORT).show();&#10;            } else {&#10;                // REAL ATTRACTION CLICK: Navigate to location details&#10;&#10;                // CRITICAL FIX: Corrected intent extra keys to match LocationDetailActivity&#10;                // Previously used mismatched keys that caused empty details page&#10;                Intent intent = new Intent(holder.itemView.getContext(), LocationDetailActivity.class);&#10;&#10;                // BEFORE (BROKEN): Used inconsistent key names&#10;                // intent.putExtra(&quot;location_name&quot;, name);&#10;                // intent.putExtra(&quot;category&quot;, category);&#10;&#10;                // AFTER (FIXED): Standardized key names that match receiving activity&#10;                intent.putExtra(&quot;attraction_name&quot;, currentAttraction.getName());&#10;                intent.putExtra(&quot;attraction_city&quot;, currentAttraction.getCity());&#10;                intent.putExtra(&quot;attraction_category&quot;, currentAttraction.getCategory());&#10;                intent.putExtra(&quot;attraction_description&quot;, currentAttraction.getDescription());&#10;                intent.putExtra(&quot;contributor_name&quot;, currentAttraction.getContributorName());&#10;                intent.putExtra(&quot;youtube_url&quot;, currentAttraction.getYoutubeUrl());&#10;&#10;                // IMPORTANT: Pass coordinate data for directions functionality&#10;                intent.putExtra(&quot;attraction_latitude&quot;, currentAttraction.getLatitude());&#10;                intent.putExtra(&quot;attraction_longitude&quot;, currentAttraction.getLongitude());&#10;&#10;                // Pass image data - both single image URL (for backward compatibility) and full image list (for gallery)&#10;                if (currentAttraction.getImages() != null &amp;&amp; !currentAttraction.getImages().isEmpty()) {&#10;                    // Pass first image as primary image URL for backward compatibility&#10;                    intent.putExtra(&quot;attraction_image_url&quot;, currentAttraction.getImages().get(0));&#10;&#10;                    // Pass full list of images for horizontal gallery functionality&#10;                    // Convert List&lt;String&gt; to ArrayList&lt;String&gt; for putStringArrayListExtra&#10;                    ArrayList&lt;String&gt; imagesList = new ArrayList&lt;&gt;(currentAttraction.getImages());&#10;                    intent.putStringArrayListExtra(&quot;attraction_images&quot;, imagesList);&#10;&#10;                    android.util.Log.d(&quot;AttractionAdapter&quot;, &quot;Passing &quot; + currentAttraction.getImages().size() + &quot; images to detail view&quot;);&#10;                }&#10;&#10;                // Start the location details activity with all required data&#10;                holder.itemView.getContext().startActivity(intent);&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Return the total number of items in the dataset&#10;     * Required method for RecyclerView.Adapter&#10;     */&#10;    @Override&#10;    public int getItemCount() {&#10;        return attractionList.size();&#10;    }&#10;&#10;    /**&#10;     * ViewHolder class - Implements the ViewHolder pattern for RecyclerView&#10;     *&#10;     * This pattern improves performance by caching view references&#10;     * instead of calling findViewById repeatedly for each item.&#10;     *&#10;     * Academic Learning: Demonstrates memory optimization techniques&#10;     * and efficient list rendering in Android applications.&#10;     */&#10;    public static class AttractionViewHolder extends RecyclerView.ViewHolder {&#10;        // Cached view references for efficient access&#10;        public ImageView imageViewAttraction;   // Main attraction image&#10;        public TextView nameTextView;          // Attraction name&#10;        public TextView categoryTextView;      // Attraction category&#10;&#10;        /**&#10;         * Constructor - Cache view references to avoid repeated findViewById calls&#10;         * @param itemView The inflated layout for each list item&#10;         */&#10;        public AttractionViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            // Cache all view references during initialization&#10;            imageViewAttraction = itemView.findViewById(R.id.imageView_attraction);&#10;            nameTextView = itemView.findViewById(R.id.textView_attraction_name);&#10;            categoryTextView = itemView.findViewById(R.id.textView_attraction_category);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Utility method to detect Google Photos URLs that require special processing&#10;     *&#10;     * Google Photos share links need to be converted to direct image URLs&#10;     * before they can be loaded by image loading libraries like Glide.&#10;     *&#10;     * @param url The image URL to check&#10;     * @return true if URL is a Google Photos link, false otherwise&#10;     */&#10;    private boolean isGooglePhotosUrl(String url) {&#10;        return url != null &amp;&amp; (&#10;                url.contains(&quot;photos.app.goo.gl&quot;) ||       // Shortened share links&#10;                url.contains(&quot;photos.google.com/share&quot;) ||  // Direct share links&#10;                url.contains(&quot;photos.google.com/u/&quot;) ||     // User photo links&#10;                url.contains(&quot;photos.google.com/album&quot;)     // Album links&#10;        );&#10;    }&#10;&#10;    /**&#10;     * Load image using Glide library with comprehensive error handling&#10;     *&#10;     * This method demonstrates professional image loading practices:&#10;     * 1. Placeholder images while loading&#10;     * 2. Error handling with fallback images&#10;     * 3. Debug logging for troubleshooting&#10;     * 4. Performance monitoring&#10;     *&#10;     * Academic Learning: Shows integration of third-party libraries&#10;     * and proper error handling in production applications.&#10;     *&#10;     * @param holder The ViewHolder containing the ImageView&#10;     * @param imageUrl The processed image URL to load&#10;     */&#10;    private void loadImageWithGlide(AttractionViewHolder holder, String imageUrl) {&#10;        Glide.with(holder.itemView.getContext())&#10;                .load(imageUrl)&#10;                .placeholder(R.drawable.ic_image_placeholder)  // Show while loading&#10;                .error(R.drawable.ic_image_placeholder)        // Show if loading fails&#10;                .listener(new RequestListener&lt;Drawable&gt;() {    // Monitor loading process&#10;                    @Override&#10;                    public boolean onLoadFailed(@Nullable GlideException e, Object model,&#10;                                               Target&lt;Drawable&gt; target, boolean isFirstResource) {&#10;                        // Log failure for debugging purposes&#10;                        Log.w(&quot;GlideDebug&quot;, &quot;Failed to load image: &quot; + imageUrl);&#10;                        if (e != null) {&#10;                            Log.w(&quot;GlideDebug&quot;, &quot;Error: &quot; + e.getMessage());&#10;                        }&#10;                        return false; // Let Glide handle the error image&#10;                    }&#10;&#10;                    @Override&#10;                    public boolean onResourceReady(Drawable resource, Object model,&#10;                                                 Target&lt;Drawable&gt; target, DataSource dataSource,&#10;                                                 boolean isFirstResource) {&#10;                        // Log success for debugging and performance monitoring&#10;                        Log.d(&quot;GlideDebug&quot;, &quot;Successfully loaded image: &quot; + imageUrl);&#10;                        return false; // Let Glide display the image&#10;                    }&#10;                })&#10;                .into(holder.imageViewAttraction); // Load into the ImageView&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.content.Intent;&#10;import android.graphics.drawable.Drawable;&#10;import android.util.Log;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.bumptech.glide.load.DataSource;&#10;import com.bumptech.glide.load.engine.GlideException;&#10;import com.bumptech.glide.request.RequestListener;&#10;import com.bumptech.glide.request.target.Target;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * AttractionAdapter - RecyclerView adapter for displaying attraction cards in Hidden Sri Lanka app&#10; *&#10; * This adapter demonstrates key Android development concepts:&#10; * 1. RecyclerView implementation for efficient list scrolling&#10; * 2. ViewHolder pattern for memory optimization and smooth scrolling&#10; * 3. Intent data passing between activities with proper key management&#10; * 4. Image loading with Google Photos URL processing and Glide integration&#10; * 5. Dynamic UI updates based on data state (placeholder vs real data)&#10; * 6. Click handling for different card types (placeholder vs attraction)&#10; *&#10; * Key Features:&#10; * - Handles both real attraction data and placeholder cards&#10; * - Processes Google Photos share URLs for direct image loading&#10; * - Provides smooth navigation to LocationDetailActivity with complete data&#10; * - Implements proper error handling for image loading failures&#10; * - Uses consistent color theming based on app design system&#10; *&#10; * Recent Bug Fix: Resolved intent data passing issue that caused&#10; * empty location details pages due to mismatched intent keys between&#10; * this adapter and LocationDetailActivity.&#10; *&#10; * @author Hidden Sri Lanka Development Team&#10; * @version 2.0.0&#10; * @since 1.0.0&#10; */&#10;public class AttractionAdapter extends RecyclerView.Adapter&lt;AttractionAdapter.AttractionViewHolder&gt; {&#10;&#10;    private static final String TAG = &quot;AttractionAdapter&quot;;&#10;    &#10;    /**&#10;     * List of attractions to display - immutable after initialization&#10;     * Contains both real attraction data and placeholder entries for user engagement&#10;     */&#10;    private final List&lt;Attraction&gt; attractionList;&#10;&#10;    /**&#10;     * Constructor - Initialize adapter with attraction data&#10;     * &#10;     * @param attractionList List of attractions to display in RecyclerView&#10;     *                      Must not be null, can contain placeholder entries&#10;     * @throws IllegalArgumentException if attractionList is null&#10;     */&#10;    public AttractionAdapter(List&lt;Attraction&gt; attractionList) {&#10;        if (attractionList == null) {&#10;            throw new IllegalArgumentException(&quot;Attraction list cannot be null&quot;);&#10;        }&#10;        this.attractionList = attractionList;&#10;    }&#10;&#10;    /**&#10;     * Create new ViewHolder instances for RecyclerView items&#10;     * Called when RecyclerView needs a new item view that doesn't exist in the cache&#10;     * &#10;     * @param parent The ViewGroup into which the new View will be added&#10;     * @param viewType The view type of the new View (unused in this implementation)&#10;     * @return A new AttractionViewHolder that holds a View of the given view type&#10;     */&#10;    @NonNull&#10;    @Override&#10;    public AttractionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        // Inflate the item layout for each attraction card&#10;        View view = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.list_item_attraction, parent, false);&#10;        return new AttractionViewHolder(view);&#10;    }&#10;&#10;    /**&#10;     * Bind data to ViewHolder for each item in the list&#10;     * This method is called for each visible item and handles:&#10;     * 1. Text data binding (name, category)&#10;     * 2. Image loading with Google Photos URL processing&#10;     * 3. Visual styling differences between placeholder and real attractions&#10;     * 4. Click listener setup for proper navigation&#10;     * &#10;     * @param holder The ViewHolder which should be updated to represent the contents of the item&#10;     * @param position The position of the item within the adapter's data set&#10;     */&#10;    @Override&#10;    public void onBindViewHolder(@NonNull AttractionViewHolder holder, int position) {&#10;        Attraction currentAttraction = attractionList.get(position);&#10;&#10;        // Set basic text data for the attraction card&#10;        holder.nameTextView.setText(currentAttraction.getName());&#10;        holder.categoryTextView.setText(currentAttraction.getCategory());&#10;&#10;        // Handle placeholder entries vs real attractions with different visual treatments&#10;        if (currentAttraction.isPlaceholder()) {&#10;            setupPlaceholderView(holder);&#10;        } else {&#10;            setupAttractionView(holder, currentAttraction);&#10;        }&#10;&#10;        // Setup click listener with proper intent data passing&#10;        setupClickListener(holder, currentAttraction);&#10;    }&#10;&#10;    /**&#10;     * Configure visual appearance for placeholder cards&#10;     * Placeholder cards encourage users to contribute new locations to the database&#10;     * &#10;     * @param holder The ViewHolder to configure for placeholder display&#10;     */&#10;    private void setupPlaceholderView(AttractionViewHolder holder) {&#10;        // Show &quot;grow our database&quot; promotional image&#10;        holder.imageViewAttraction.setImageResource(R.drawable.grow_our_database);&#10;        holder.imageViewAttraction.setScaleType(ImageView.ScaleType.CENTER_CROP);&#10;&#10;        // Apply distinctive visual styling to indicate call-to-action nature&#10;        holder.itemView.setAlpha(0.9f);&#10;        holder.nameTextView.setTextColor(ContextCompat.getColor(&#10;                holder.itemView.getContext(), R.color.DeepForestGreen));&#10;        holder.categoryTextView.setTextColor(ContextCompat.getColor(&#10;                holder.itemView.getContext(), R.color.GoldYellow));&#10;    }&#10;&#10;    /**&#10;     * Configure visual appearance and load images for real attraction cards&#10;     * Handles image loading with fallback mechanisms and proper error handling&#10;     * &#10;     * @param holder The ViewHolder to configure for attraction display&#10;     * @param attraction The attraction data to display&#10;     */&#10;    private void setupAttractionView(AttractionViewHolder holder, Attraction attraction) {&#10;        // Apply standard visual styling for real attractions&#10;        holder.itemView.setAlpha(1.0f);&#10;        holder.nameTextView.setTextColor(ContextCompat.getColor(&#10;                holder.itemView.getContext(), R.color.NavyBlue));&#10;        holder.categoryTextView.setTextColor(ContextCompat.getColor(&#10;                holder.itemView.getContext(), R.color.light_gray));&#10;        holder.imageViewAttraction.setScaleType(ImageView.ScaleType.CENTER_CROP);&#10;&#10;        // Handle image loading with smart URL processing&#10;        if (attraction.getImages() != null &amp;&amp; !attraction.getImages().isEmpty()) {&#10;            String imageUrl = attraction.getImages().get(0);&#10;&#10;            // Process Google Photos URLs for direct image access&#10;            if (isGooglePhotosUrl(imageUrl)) {&#10;                Log.d(TAG, &quot;Processing Google Photos URL for: &quot; + attraction.getName());&#10;                GooglePhotosUrlHelper.processImageUrl(holder.itemView.getContext(), &#10;                        imageUrl, processedUrl -&gt; loadImageWithGlide(holder, processedUrl));&#10;            } else {&#10;                // Load direct image URLs immediately&#10;                loadImageWithGlide(holder, imageUrl);&#10;            }&#10;        } else {&#10;            // No image available - show placeholder&#10;            Log.w(TAG, &quot;No images available for attraction: &quot; + attraction.getName());&#10;            holder.imageViewAttraction.setImageResource(R.drawable.ic_image_placeholder);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Set up click listeners for attraction cards with proper navigation handling&#10;     *&#10;     * CRITICAL BUG FIX: This method contains the solution to the intent data passing&#10;     * issue that prevented location details from displaying properly.&#10;     * Intent extra keys now match exactly with those expected by LocationDetailActivity.&#10;     * &#10;     * @param holder The ViewHolder containing the clickable item&#10;     * @param currentAttraction The attraction data to pass to the detail activity&#10;     */&#10;    private void setupClickListener(AttractionViewHolder holder, Attraction currentAttraction) {&#10;        holder.itemView.setOnClickListener(v -&gt; {&#10;            if (currentAttraction.isPlaceholder()) {&#10;                // Handle placeholder clicks - redirect to add location form&#10;                navigateToAddLocation(holder);&#10;            } else {&#10;                // Handle real attraction clicks - navigate to location details&#10;                navigateToLocationDetails(holder, currentAttraction);&#10;            }&#10;        });&#10;    }&#10;&#10;    /**&#10;     * Navigate to AddLocationActivity when placeholder card is clicked&#10;     * Encourages user contribution to expand the database&#10;     * &#10;     * @param holder The ViewHolder containing context for navigation&#10;     */&#10;    private void navigateToAddLocation(AttractionViewHolder holder) {&#10;        Intent intent = new Intent(holder.itemView.getContext(), AddLocationActivity.class);&#10;        holder.itemView.getContext().startActivity(intent);&#10;&#10;        // Show encouraging message to motivate user contribution&#10;        Toast.makeText(holder.itemView.getContext(),&#10;                &quot;Let's add some attractions! &quot;,&#10;                Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    /**&#10;     * Navigate to LocationDetailActivity with complete attraction data&#10;     * &#10;     * MAJOR BUG FIX: Intent extra keys now match exactly with LocationDetailActivity&#10;     * Previously mismatched keys caused empty detail pages&#10;     * &#10;     * @param holder The ViewHolder containing context for navigation&#10;     * @param attraction The attraction data to pass to detail activity&#10;     */&#10;    private void navigateToLocationDetails(AttractionViewHolder holder, Attraction attraction) {&#10;        Intent intent = new Intent(holder.itemView.getContext(), LocationDetailActivity.class);&#10;&#10;        // Pass all attraction data with standardized key names&#10;        intent.putExtra(&quot;attraction_name&quot;, attraction.getName());&#10;        intent.putExtra(&quot;attraction_city&quot;, attraction.getCity());&#10;        intent.putExtra(&quot;attraction_category&quot;, attraction.getCategory());&#10;        intent.putExtra(&quot;attraction_description&quot;, attraction.getDescription());&#10;        intent.putExtra(&quot;contributor_name&quot;, attraction.getContributorName());&#10;        intent.putExtra(&quot;youtube_url&quot;, attraction.getYoutubeUrl());&#10;&#10;        // Pass coordinate data for directions functionality&#10;        intent.putExtra(&quot;attraction_latitude&quot;, attraction.getLatitude());&#10;        intent.putExtra(&quot;attraction_longitude&quot;, attraction.getLongitude());&#10;&#10;        // Pass image data for gallery functionality&#10;        if (attraction.getImages() != null &amp;&amp; !attraction.getImages().isEmpty()) {&#10;            // Primary image for backward compatibility&#10;            intent.putExtra(&quot;attraction_image_url&quot;, attraction.getImages().get(0));&#10;&#10;            // Full image list for horizontal gallery&#10;            ArrayList&lt;String&gt; imagesList = new ArrayList&lt;&gt;(attraction.getImages());&#10;            intent.putStringArrayListExtra(&quot;attraction_images&quot;, imagesList);&#10;&#10;            Log.d(TAG, &quot;Passing &quot; + attraction.getImages().size() + &#10;                    &quot; images to detail view for: &quot; + attraction.getName());&#10;        }&#10;&#10;        // Start the location details activity&#10;        holder.itemView.getContext().startActivity(intent);&#10;    }&#10;&#10;    /**&#10;     * Return the total number of items in the dataset&#10;     * Required method for RecyclerView.Adapter&#10;     * &#10;     * @return Total number of items (attractions + placeholders) to display&#10;     */&#10;    @Override&#10;    public int getItemCount() {&#10;        return attractionList.size();&#10;    }&#10;&#10;    /**&#10;     * ViewHolder class - Implements the ViewHolder pattern for RecyclerView&#10;     *&#10;     * This pattern improves performance by caching view references instead of&#10;     * calling findViewById repeatedly for each item during scrolling.&#10;     *&#10;     * Academic Learning: Demonstrates memory optimization techniques and&#10;     * efficient list rendering in Android applications. Essential pattern&#10;     * for creating performant list interfaces.&#10;     */&#10;    public static class AttractionViewHolder extends RecyclerView.ViewHolder {&#10;&#10;        // Cached view references for efficient access during binding&#10;        public final ImageView imageViewAttraction;   // Main attraction image&#10;        public final TextView nameTextView;          // Attraction name display&#10;        public final TextView categoryTextView;      // Attraction category display&#10;&#10;        /**&#10;         * Constructor - Cache view references to avoid repeated findViewById calls&#10;         * Called once when ViewHolder is created, improving scrolling performance&#10;         * &#10;         * @param itemView The inflated layout for each list item&#10;         */&#10;        public AttractionViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            // Cache all view references during initialization for performance&#10;            imageViewAttraction = itemView.findViewById(R.id.imageView_attraction);&#10;            nameTextView = itemView.findViewById(R.id.textView_attraction_name);&#10;            categoryTextView = itemView.findViewById(R.id.textView_attraction_category);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Utility method to detect Google Photos URLs that require special processing&#10;     *&#10;     * Google Photos share links cannot be loaded directly by image libraries.&#10;     * They must be processed through GooglePhotosUrlHelper to extract direct image URLs.&#10;     * &#10;     * Supported Google Photos URL patterns:&#10;     * - photos.app.goo.gl/* (shortened share links)&#10;     * - photos.google.com/share/* (direct share links)&#10;     * - photos.google.com/u/* (user photo links)&#10;     * - photos.google.com/album/* (album links)&#10;     *&#10;     * @param url The image URL to analyze&#10;     * @return true if URL requires Google Photos processing, false for direct loading&#10;     */&#10;    private boolean isGooglePhotosUrl(String url) {&#10;        return url != null &amp;&amp; (&#10;                url.contains(&quot;photos.app.goo.gl&quot;) ||       // Shortened share links&#10;                url.contains(&quot;photos.google.com/share&quot;) ||  // Direct share links&#10;                url.contains(&quot;photos.google.com/u/&quot;) ||     // User photo links&#10;                url.contains(&quot;photos.google.com/album&quot;)     // Album links&#10;        );&#10;    }&#10;&#10;    /**&#10;     * Load image using Glide library with comprehensive error handling&#10;     *&#10;     * This method demonstrates professional image loading practices:&#10;     * 1. Placeholder images while loading for better UX&#10;     * 2. Error handling with fallback images&#10;     * 3. Debug logging for development troubleshooting&#10;     * 4. Performance monitoring through load callbacks&#10;     * 5. Memory efficient loading with Glide's caching&#10;     *&#10;     * Academic Learning: Shows integration of third-party libraries&#10;     * and proper error handling in production applications.&#10;     *&#10;     * @param holder The ViewHolder containing the target ImageView&#10;     * @param imageUrl The processed, direct image URL to load&#10;     */&#10;    private void loadImageWithGlide(AttractionViewHolder holder, String imageUrl) {&#10;        Glide.with(holder.itemView.getContext())&#10;                .load(imageUrl)&#10;                .placeholder(R.drawable.ic_image_placeholder)  // Show while loading&#10;                .error(R.drawable.ic_image_placeholder)        // Show if loading fails&#10;                .listener(new RequestListener&lt;&gt;() {            // Monitor loading process&#10;                    @Override&#10;                    public boolean onLoadFailed(@Nullable GlideException e, Object model,&#10;                                               Target&lt;Drawable&gt; target, boolean isFirstResource) {&#10;                        // Log failure details for debugging&#10;                        Log.w(TAG, &quot;Failed to load image: &quot; + imageUrl);&#10;                        if (e != null) {&#10;                            Log.w(TAG, &quot;Glide error details: &quot; + e.getMessage());&#10;                        }&#10;                        return false; // Let Glide handle the error image display&#10;                    }&#10;&#10;                    @Override&#10;                    public boolean onResourceReady(Drawable resource, Object model,&#10;                                                 Target&lt;Drawable&gt; target, DataSource dataSource,&#10;                                                 boolean isFirstResource) {&#10;                        // Log success for debugging and performance monitoring&#10;                        Log.d(TAG, &quot;Successfully loaded image from &quot; + dataSource + &quot;: &quot; + imageUrl);&#10;                        return false; // Let Glide display the loaded image&#10;                    }&#10;                })&#10;                .into(holder.imageViewAttraction); // Load into the target ImageView&#10;    }&#10;&#10;    /**&#10;     * Update the adapter's data set and refresh the RecyclerView efficiently&#10;     * Useful for dynamic content updates without recreating the adapter&#10;     * &#10;     * @param newAttractions The new list of attractions to display&#10;     */&#10;    public void updateAttractions(List&lt;Attraction&gt; newAttractions) {&#10;        if (newAttractions != null) {&#10;            int oldSize = attractionList.size();&#10;            attractionList.clear();&#10;            attractionList.addAll(newAttractions);&#10;            &#10;            // Use more efficient notification methods&#10;            if (oldSize == newAttractions.size()) {&#10;                notifyItemRangeChanged(0, newAttractions.size());&#10;            } else {&#10;                notifyDataSetChanged(); // Only when size changes&#10;            }&#10;            &#10;            Log.d(TAG, &quot;Attraction list updated with &quot; + newAttractions.size() + &quot; items&quot;);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Add a single attraction to the list efficiently&#10;     * &#10;     * @param attraction The attraction to add&#10;     */&#10;    public void addAttraction(Attraction attraction) {&#10;        if (attraction != null) {&#10;            attractionList.add(attraction);&#10;            notifyItemInserted(attractionList.size() - 1);&#10;            Log.d(TAG, &quot;Added attraction: &quot; + attraction.getName());&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Remove an attraction at the specified position&#10;     * &#10;     * @param position The position of the attraction to remove&#10;     */&#10;    public void removeAttraction(int position) {&#10;        if (position &gt;= 0 &amp;&amp; position &lt; attractionList.size()) {&#10;            Attraction removed = attractionList.remove(position);&#10;            notifyItemRemoved(position);&#10;            Log.d(TAG, &quot;Removed attraction: &quot; + removed.getName());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/FullMapViewActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/FullMapViewActivity.java" />
              <option name="originalContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.Manifest;&#10;import android.content.Intent;&#10;import android.content.pm.PackageManager;&#10;import android.location.Location;&#10;import android.net.Uri;&#10;import android.os.Bundle;&#10;import android.text.Editable;&#10;import android.text.TextWatcher;&#10;import android.util.Log;&#10;import android.view.View;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.core.app.ActivityCompat;&#10;import androidx.core.content.ContextCompat;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.maps.CameraUpdateFactory;&#10;import com.google.android.gms.maps.GoogleMap;&#10;import com.google.android.gms.maps.OnMapReadyCallback;&#10;import com.google.android.gms.maps.SupportMapFragment;&#10;import com.google.android.gms.maps.model.BitmapDescriptorFactory;&#10;import com.google.android.gms.maps.model.LatLng;&#10;import com.google.android.gms.maps.model.Marker;&#10;import com.google.android.gms.maps.model.MarkerOptions;&#10;import com.google.android.material.bottomsheet.BottomSheetBehavior;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.google.android.material.progressindicator.CircularProgressIndicator;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Locale;&#10;import java.util.Map;&#10;&#10;/**&#10; * FullMapViewActivity - Google Maps implementation for exploring Sri Lankan attractions&#10; *&#10; * This activity provides a comprehensive map view of all attractions with features:&#10; * - Interactive Google Maps with custom markers&#10; * - Real-time location tracking&#10; * - Search and filter functionality&#10; * - Bottom sheet with attraction details&#10; * - Navigation integration&#10; * - Different map types (Normal, Satellite, Terrain)&#10; * - Clustering for better performance with many markers&#10; *&#10; * @author Hidden Sri Lanka Development Team&#10; * @version 2.0.0&#10; */&#10;public class FullMapViewActivity extends BaseActivity implements OnMapReadyCallback, GoogleMap.OnMarkerClickListener {&#10;&#10;    private static final String TAG = &quot;FullMapViewActivity&quot;;&#10;    private static final int LOCATION_PERMISSION_REQUEST_CODE = 1;&#10;&#10;    // Sri Lanka default coordinates (Colombo)&#10;    private static final LatLng DEFAULT_LOCATION = new LatLng(6.9271, 79.8612);&#10;    private static final float DEFAULT_ZOOM = 8f;&#10;    private static final float DETAILED_ZOOM = 15f;&#10;&#10;    // UI Components&#10;    private GoogleMap mMap;&#10;    private CircularProgressIndicator loadingIndicator;&#10;    private EditText searchEditText;&#10;    private ImageView filterIcon;&#10;    private FloatingActionButton myLocationFab, mapTypeFab, clusterToggleFab;&#10;    private LinearLayout bottomSheet;&#10;    private BottomSheetBehavior&lt;LinearLayout&gt; bottomSheetBehavior;&#10;&#10;    // Bottom sheet components&#10;    private ImageView attractionImage, navigateButton;&#10;    private TextView attractionName, attractionCategory, attractionDistance;&#10;&#10;    // Data and functionality&#10;    private FusedLocationProviderClient fusedLocationClient;&#10;    private FirebaseFirestore firestore;&#10;    private List&lt;Attraction&gt; allAttractions;&#10;    private List&lt;Attraction&gt; filteredAttractions;&#10;    private Map&lt;Marker, Attraction&gt; markerAttractionMap;&#10;    private Location currentLocation;&#10;    private int currentMapType = GoogleMap.MAP_TYPE_NORMAL;&#10;    private boolean clusteringEnabled = true;&#10;    private String currentSearchQuery = &quot;&quot;;&#10;    private Attraction selectedAttraction;&#10;&#10;    @Override&#10;    protected int getLayoutResourceId() {&#10;        return R.layout.activity_full_map_view;&#10;    }&#10;&#10;    @Override&#10;    protected String getActivityTitle() {&#10;        return getString(R.string.nav_explore_on_map_title);&#10;    }&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        initializeComponents();&#10;        setupMapFragment();&#10;        setupUIListeners();&#10;        requestLocationPermission();&#10;        loadAttractionsFromFirestore();&#10;    }&#10;&#10;    /**&#10;     * Initialize all UI components and services&#10;     */&#10;    private void initializeComponents() {&#10;        // Initialize Firebase and location services&#10;        firestore = FirebaseFirestore.getInstance();&#10;        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this);&#10;&#10;        // Initialize data structures&#10;        allAttractions = new ArrayList&lt;&gt;();&#10;        filteredAttractions = new ArrayList&lt;&gt;();&#10;        markerAttractionMap = new HashMap&lt;&gt;();&#10;&#10;        // Initialize UI components&#10;        loadingIndicator = findViewById(R.id.loadingIndicator);&#10;        searchEditText = findViewById(R.id.searchEditText);&#10;        filterIcon = findViewById(R.id.filterIcon);&#10;        myLocationFab = findViewById(R.id.myLocationFab);&#10;        mapTypeFab = findViewById(R.id.mapTypeFab);&#10;        clusterToggleFab = findViewById(R.id.clusterToggleFab);&#10;        bottomSheet = findViewById(R.id.bottomSheet);&#10;&#10;        // Bottom sheet components&#10;        attractionImage = findViewById(R.id.attractionImage);&#10;        attractionName = findViewById(R.id.attractionName);&#10;        attractionCategory = findViewById(R.id.attractionCategory);&#10;        attractionDistance = findViewById(R.id.attractionDistance);&#10;        navigateButton = findViewById(R.id.navigateButton);&#10;&#10;        // Setup bottom sheet behavior&#10;        bottomSheetBehavior = BottomSheetBehavior.from(bottomSheet);&#10;        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);&#10;    }&#10;&#10;    /**&#10;     * Setup the Google Maps fragment&#10;     */&#10;    private void setupMapFragment() {&#10;        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()&#10;                .findFragmentById(R.id.map);&#10;        if (mapFragment != null) {&#10;            mapFragment.getMapAsync(this);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Setup all UI event listeners&#10;     */&#10;    private void setupUIListeners() {&#10;        // Search functionality&#10;        searchEditText.addTextChangedListener(new TextWatcher() {&#10;            @Override&#10;            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}&#10;&#10;            @Override&#10;            public void onTextChanged(CharSequence s, int start, int before, int count) {&#10;                currentSearchQuery = s.toString().trim();&#10;                filterAndDisplayAttractions();&#10;            }&#10;&#10;            @Override&#10;            public void afterTextChanged(Editable s) {}&#10;        });&#10;&#10;        // Filter button&#10;        filterIcon.setOnClickListener(v -&gt; showFilterDialog());&#10;&#10;        // My location button&#10;        myLocationFab.setOnClickListener(v -&gt; moveToCurrentLocation());&#10;&#10;        // Map type toggle&#10;        mapTypeFab.setOnClickListener(v -&gt; toggleMapType());&#10;&#10;        // Clustering toggle&#10;        clusterToggleFab.setOnClickListener(v -&gt; toggleClustering());&#10;&#10;        // Navigation button in bottom sheet&#10;        navigateButton.setOnClickListener(v -&gt; openNavigation());&#10;    }&#10;&#10;    @Override&#10;    public void onMapReady(@NonNull GoogleMap googleMap) {&#10;        mMap = googleMap;&#10;&#10;        // Configure map settings&#10;        setupMapSettings();&#10;&#10;        // Set map listeners&#10;        mMap.setOnMarkerClickListener(this);&#10;        mMap.setOnMapClickListener(latLng -&gt; hideBottomSheet());&#10;&#10;        // Move camera to Sri Lanka&#10;        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(DEFAULT_LOCATION, DEFAULT_ZOOM));&#10;&#10;        // Get current location and display attractions&#10;        getCurrentLocation();&#10;        displayAttractionsOnMap();&#10;&#10;        hideLoadingIndicator();&#10;    }&#10;&#10;    /**&#10;     * Configure Google Maps settings and UI&#10;     */&#10;    private void setupMapSettings() {&#10;        // Enable map controls&#10;        mMap.getUiSettings().setZoomControlsEnabled(false); // We have custom FABs&#10;        mMap.getUiSettings().setMapToolbarEnabled(true);&#10;        mMap.getUiSettings().setCompassEnabled(true);&#10;&#10;        // Enable location if permission granted&#10;        enableMyLocationIfPermitted();&#10;    }&#10;&#10;    /**&#10;     * Load attractions from Firestore database&#10;     */&#10;    private void loadAttractionsFromFirestore() {&#10;        showLoadingIndicator();&#10;&#10;        firestore.collection(&quot;attractions&quot;)&#10;                .get()&#10;                .addOnCompleteListener(task -&gt; {&#10;                    if (task.isSuccessful() &amp;&amp; task.getResult() != null) {&#10;                        allAttractions.clear();&#10;&#10;                        for (QueryDocumentSnapshot document : task.getResult()) {&#10;                            try {&#10;                                Attraction attraction = document.toObject(Attraction.class);&#10;                                if (attraction != null &amp;&amp; isValidAttraction(attraction)) {&#10;                                    allAttractions.add(attraction);&#10;                                }&#10;                            } catch (Exception e) {&#10;                                Log.w(TAG, &quot;Error parsing attraction: &quot; + e.getMessage());&#10;                            }&#10;                        }&#10;&#10;                        Log.d(TAG, &quot;Loaded &quot; + allAttractions.size() + &quot; attractions from Firestore&quot;);&#10;                        filterAndDisplayAttractions();&#10;&#10;                    } else {&#10;                        Log.w(TAG, &quot;Error getting attractions&quot;, task.getException());&#10;                        Toast.makeText(this, &quot;Failed to load attractions&quot;, Toast.LENGTH_SHORT).show();&#10;                    }&#10;                    hideLoadingIndicator();&#10;                });&#10;    }&#10;&#10;    /**&#10;     * Validate attraction data before displaying&#10;     */&#10;    private boolean isValidAttraction(Attraction attraction) {&#10;        return attraction.getName() != null &amp;&amp; !attraction.getName().trim().isEmpty() &amp;&amp;&#10;               attraction.getLatitude() != 0.0 &amp;&amp; attraction.getLongitude() != 0.0 &amp;&amp;&#10;               !attraction.isPlaceholder();&#10;    }&#10;&#10;    /**&#10;     * Filter attractions based on search query and display on map&#10;     */&#10;    private void filterAndDisplayAttractions() {&#10;        filteredAttractions.clear();&#10;&#10;        if (currentSearchQuery.isEmpty()) {&#10;            filteredAttractions.addAll(allAttractions);&#10;        } else {&#10;            String query = currentSearchQuery.toLowerCase();&#10;            for (Attraction attraction : allAttractions) {&#10;                if (matchesSearchQuery(attraction, query)) {&#10;                    filteredAttractions.add(attraction);&#10;                }&#10;            }&#10;        }&#10;&#10;        displayAttractionsOnMap();&#10;        Log.d(TAG, &quot;Filtered to &quot; + filteredAttractions.size() + &quot; attractions&quot;);&#10;    }&#10;&#10;    /**&#10;     * Check if attraction matches search query&#10;     */&#10;    private boolean matchesSearchQuery(Attraction attraction, String query) {&#10;        return attraction.getName().toLowerCase().contains(query) ||&#10;               (attraction.getCategory() != null &amp;&amp; attraction.getCategory().toLowerCase().contains(query)) ||&#10;               (attraction.getCity() != null &amp;&amp; attraction.getCity().toLowerCase().contains(query)) ||&#10;               (attraction.getDescription() != null &amp;&amp; attraction.getDescription().toLowerCase().contains(query));&#10;    }&#10;&#10;    /**&#10;     * Display filtered attractions as markers on the map&#10;     */&#10;    private void displayAttractionsOnMap() {&#10;        if (mMap == null) return;&#10;&#10;        // Clear existing markers&#10;        mMap.clear();&#10;        markerAttractionMap.clear();&#10;&#10;        // Add markers for filtered attractions&#10;        for (Attraction attraction : filteredAttractions) {&#10;            addAttractionMarker(attraction);&#10;        }&#10;&#10;        Log.d(TAG, &quot;Displayed &quot; + filteredAttractions.size() + &quot; markers on map&quot;);&#10;    }&#10;&#10;    /**&#10;     * Add a marker for an attraction on the map&#10;     */&#10;    private void addAttractionMarker(Attraction attraction) {&#10;        LatLng position = new LatLng(attraction.getLatitude(), attraction.getLongitude());&#10;&#10;        MarkerOptions markerOptions = new MarkerOptions()&#10;                .position(position)&#10;                .title(attraction.getName())&#10;                .snippet(attraction.getCategory())&#10;                .icon(BitmapDescriptorFactory.defaultMarker(getMarkerColor(attraction.getCategory())));&#10;&#10;        Marker marker = mMap.addMarker(markerOptions);&#10;        if (marker != null) {&#10;            markerAttractionMap.put(marker, attraction);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get marker color based on attraction category&#10;     */&#10;    private float getMarkerColor(String category) {&#10;        if (category == null) return BitmapDescriptorFactory.HUE_RED;&#10;&#10;        switch (category.toLowerCase()) {&#10;            case &quot;temple&quot;: case &quot;religious&quot;: return BitmapDescriptorFactory.HUE_ORANGE;&#10;            case &quot;beach&quot;: case &quot;coastal&quot;: return BitmapDescriptorFactory.HUE_AZURE;&#10;            case &quot;mountain&quot;: case &quot;hiking&quot;: return BitmapDescriptorFactory.HUE_GREEN;&#10;            case &quot;waterfall&quot;: return BitmapDescriptorFactory.HUE_CYAN;&#10;            case &quot;historical&quot;: case &quot;archaeological&quot;: return BitmapDescriptorFactory.HUE_VIOLET;&#10;            case &quot;wildlife&quot;: case &quot;national park&quot;: return BitmapDescriptorFactory.HUE_YELLOW;&#10;            default: return BitmapDescriptorFactory.HUE_RED;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onMarkerClick(@NonNull Marker marker) {&#10;        Attraction attraction = markerAttractionMap.get(marker);&#10;        if (attraction != null) {&#10;            selectedAttraction = attraction;&#10;            showAttractionDetails(attraction);&#10;&#10;            // Move camera to marker&#10;            mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(marker.getPosition(), DETAILED_ZOOM));&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Show attraction details in bottom sheet&#10;     */&#10;    private void showAttractionDetails(Attraction attraction) {&#10;        // Set attraction data&#10;        attractionName.setText(attraction.getName());&#10;        attractionCategory.setText(attraction.getCategory());&#10;&#10;        // Load attraction image&#10;        if (attraction.getImages() != null &amp;&amp; !attraction.getImages().isEmpty()) {&#10;            String imageUrl = attraction.getImages().get(0);&#10;            Glide.with(this)&#10;                    .load(imageUrl)&#10;                    .placeholder(R.drawable.ic_image_placeholder)&#10;                    .error(R.drawable.ic_image_placeholder)&#10;                    .into(attractionImage);&#10;        } else {&#10;            attractionImage.setImageResource(R.drawable.ic_image_placeholder);&#10;        }&#10;&#10;        // Calculate and display distance&#10;        if (currentLocation != null) {&#10;            float distance = calculateDistance(&#10;                    currentLocation.getLatitude(), currentLocation.getLongitude(),&#10;                    attraction.getLatitude(), attraction.getLongitude()&#10;            );&#10;            attractionDistance.setText(String.format(Locale.getDefault(), &quot;%.1f km away&quot;, distance));&#10;        } else {&#10;            attractionDistance.setText(&quot;Distance unknown&quot;);&#10;        }&#10;&#10;        // Show bottom sheet&#10;        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);&#10;&#10;        // Set click listener for full details&#10;        bottomSheet.setOnClickListener(v -&gt; openAttractionDetails(attraction));&#10;    }&#10;&#10;    /**&#10;     * Calculate distance between two points in kilometers&#10;     */&#10;    private float calculateDistance(double lat1, double lon1, double lat2, double lon2) {&#10;        float[] results = new float[1];&#10;        Location.distanceBetween(lat1, lon1, lat2, lon2, results);&#10;        return results[0] / 1000; // Convert to kilometers&#10;    }&#10;&#10;    /**&#10;     * Hide the bottom sheet&#10;     */&#10;    private void hideBottomSheet() {&#10;        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);&#10;        selectedAttraction = null;&#10;    }&#10;&#10;    /**&#10;     * Open full attraction details activity&#10;     */&#10;    private void openAttractionDetails(Attraction attraction) {&#10;        Intent intent = new Intent(this, LocationDetailActivity.class);&#10;&#10;        // Pass all attraction data using standardized keys&#10;        intent.putExtra(&quot;attraction_name&quot;, attraction.getName());&#10;        intent.putExtra(&quot;attraction_city&quot;, attraction.getCity());&#10;        intent.putExtra(&quot;attraction_category&quot;, attraction.getCategory());&#10;        intent.putExtra(&quot;attraction_description&quot;, attraction.getDescription());&#10;        intent.putExtra(&quot;contributor_name&quot;, attraction.getContributorName());&#10;        intent.putExtra(&quot;youtube_url&quot;, attraction.getYoutubeUrl());&#10;        intent.putExtra(&quot;attraction_latitude&quot;, attraction.getLatitude());&#10;        intent.putExtra(&quot;attraction_longitude&quot;, attraction.getLongitude());&#10;&#10;        if (attraction.getImages() != null &amp;&amp; !attraction.getImages().isEmpty()) {&#10;            intent.putExtra(&quot;attraction_image_url&quot;, attraction.getImages().get(0));&#10;            ArrayList&lt;String&gt; imagesList = new ArrayList&lt;&gt;(attraction.getImages());&#10;            intent.putStringArrayListExtra(&quot;attraction_images&quot;, imagesList);&#10;        }&#10;&#10;        startActivity(intent);&#10;    }&#10;&#10;    /**&#10;     * Open navigation to selected attraction&#10;     */&#10;    private void openNavigation() {&#10;        if (selectedAttraction == null) return;&#10;&#10;        // Create Google Maps navigation intent&#10;        Uri gmmIntentUri = Uri.parse(String.format(Locale.getDefault(),&#10;                &quot;google.navigation:q=%.6f,%.6f&quot;,&#10;                selectedAttraction.getLatitude(),&#10;                selectedAttraction.getLongitude()));&#10;&#10;        Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);&#10;        mapIntent.setPackage(&quot;com.google.android.apps.maps&quot;);&#10;&#10;        if (mapIntent.resolveActivity(getPackageManager()) != null) {&#10;            startActivity(mapIntent);&#10;        } else {&#10;            // Fallback to browser-based maps&#10;            Uri browserUri = Uri.parse(String.format(Locale.getDefault(),&#10;                    &quot;https://www.google.com/maps/dir/?api=1&amp;destination=%.6f,%.6f&quot;,&#10;                    selectedAttraction.getLatitude(),&#10;                    selectedAttraction.getLongitude()));&#10;&#10;            Intent browserIntent = new Intent(Intent.ACTION_VIEW, browserUri);&#10;            startActivity(browserIntent);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Request location permission from user&#10;     */&#10;    private void requestLocationPermission() {&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)&#10;                != PackageManager.PERMISSION_GRANTED) {&#10;            ActivityCompat.requestPermissions(this,&#10;                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION},&#10;                    LOCATION_PERMISSION_REQUEST_CODE);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Enable my location on map if permission is granted&#10;     */&#10;    private void enableMyLocationIfPermitted() {&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)&#10;                == PackageManager.PERMISSION_GRANTED) {&#10;            if (mMap != null) {&#10;                mMap.setMyLocationEnabled(true);&#10;                mMap.getUiSettings().setMyLocationButtonEnabled(false); // We use custom FAB&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get current user location&#10;     */&#10;    private void getCurrentLocation() {&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)&#10;                == PackageManager.PERMISSION_GRANTED) {&#10;&#10;            fusedLocationClient.getLastLocation()&#10;                    .addOnSuccessListener(this, location -&gt; {&#10;                        if (location != null) {&#10;                            currentLocation = location;&#10;                            Log.d(TAG, &quot;Current location: &quot; + location.getLatitude() + &quot;, &quot; + location.getLongitude());&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; Log.w(TAG, &quot;Failed to get location&quot;, e));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Move camera to current location&#10;     */&#10;    private void moveToCurrentLocation() {&#10;        if (currentLocation != null &amp;&amp; mMap != null) {&#10;            LatLng currentLatLng = new LatLng(currentLocation.getLatitude(), currentLocation.getLongitude());&#10;            mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(currentLatLng, DETAILED_ZOOM));&#10;        } else {&#10;            Toast.makeText(this, &quot;Location not available&quot;, Toast.LENGTH_SHORT).show();&#10;            getCurrentLocation(); // Try to get location again&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Toggle between different map types&#10;     */&#10;    private void toggleMapType() {&#10;        if (mMap == null) return;&#10;&#10;        switch (currentMapType) {&#10;            case GoogleMap.MAP_TYPE_NORMAL:&#10;                currentMapType = GoogleMap.MAP_TYPE_SATELLITE;&#10;                Toast.makeText(this, &quot;Satellite View&quot;, Toast.LENGTH_SHORT).show();&#10;                break;&#10;            case GoogleMap.MAP_TYPE_SATELLITE:&#10;                currentMapType = GoogleMap.MAP_TYPE_TERRAIN;&#10;                Toast.makeText(this, &quot;Terrain View&quot;, Toast.LENGTH_SHORT).show();&#10;                break;&#10;            case GoogleMap.MAP_TYPE_TERRAIN:&#10;                currentMapType = GoogleMap.MAP_TYPE_NORMAL;&#10;                Toast.makeText(this, &quot;Normal View&quot;, Toast.LENGTH_SHORT).show();&#10;                break;&#10;        }&#10;&#10;        mMap.setMapType(currentMapType);&#10;    }&#10;&#10;    /**&#10;     * Toggle marker clustering (placeholder for future implementation)&#10;     */&#10;    private void toggleClustering() {&#10;        clusteringEnabled = !clusteringEnabled;&#10;        String message = clusteringEnabled ? &quot;Clustering Enabled&quot; : &quot;Clustering Disabled&quot;;&#10;        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();&#10;&#10;        // TODO: Implement marker clustering with ClusterManager&#10;        // This would group nearby markers when zoomed out for better performance&#10;    }&#10;&#10;    /**&#10;     * Show filter dialog (placeholder for future implementation)&#10;     */&#10;    private void showFilterDialog() {&#10;        Toast.makeText(this, &quot;Filter options coming soon!&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;        // TODO: Implement filter dialog for categories, ratings, etc.&#10;    }&#10;&#10;    /**&#10;     * Show loading indicator&#10;     */&#10;    private void showLoadingIndicator() {&#10;        if (loadingIndicator != null) {&#10;            loadingIndicator.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Hide loading indicator&#10;     */&#10;    private void hideLoadingIndicator() {&#10;        if (loadingIndicator != null) {&#10;            loadingIndicator.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults);&#10;&#10;        if (requestCode == LOCATION_PERMISSION_REQUEST_CODE) {&#10;            if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;                enableMyLocationIfPermitted();&#10;                getCurrentLocation();&#10;            } else {&#10;                Toast.makeText(this, &quot;Location permission denied&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Refresh location when returning to activity&#10;        getCurrentLocation();&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        // Clean up resources&#10;        if (markerAttractionMap != null) {&#10;            markerAttractionMap.clear();&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.Manifest;&#10;import android.content.Intent;&#10;import android.content.pm.PackageManager;&#10;import android.location.Location;&#10;import android.net.Uri;&#10;import android.os.Bundle;&#10;import android.text.Editable;&#10;import android.text.TextWatcher;&#10;import android.util.Log;&#10;import android.view.View;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.core.app.ActivityCompat;&#10;import androidx.core.content.ContextCompat;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.maps.CameraUpdateFactory;&#10;import com.google.android.gms.maps.GoogleMap;&#10;import com.google.android.gms.maps.OnMapReadyCallback;&#10;import com.google.android.gms.maps.SupportMapFragment;&#10;import com.google.android.gms.maps.model.BitmapDescriptorFactory;&#10;import com.google.android.gms.maps.model.LatLng;&#10;import com.google.android.gms.maps.model.Marker;&#10;import com.google.android.gms.maps.model.MarkerOptions;&#10;import com.google.android.material.bottomsheet.BottomSheetBehavior;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.google.android.material.progressindicator.CircularProgressIndicator;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Locale;&#10;import java.util.Map;&#10;&#10;/**&#10; * FullMapViewActivity - Google Maps implementation for exploring Sri Lankan attractions&#10; *&#10; * This activity provides a comprehensive map view of all attractions with features:&#10; * - Interactive Google Maps with custom markers&#10; * - Real-time location tracking&#10; * - Search and filter functionality&#10; * - Bottom sheet with attraction details&#10; * - Navigation integration&#10; * - Different map types (Normal, Satellite, Terrain)&#10; * - Clustering for better performance with many markers&#10; *&#10; * @author Hidden Sri Lanka Development Team&#10; * @version 2.0.0&#10; */&#10;public class FullMapViewActivity extends BaseActivity implements OnMapReadyCallback, GoogleMap.OnMarkerClickListener {&#10;&#10;    private static final String TAG = &quot;FullMapViewActivity&quot;;&#10;    private static final int LOCATION_PERMISSION_REQUEST_CODE = 1;&#10;&#10;    // Sri Lanka default coordinates (Colombo)&#10;    private static final LatLng DEFAULT_LOCATION = new LatLng(6.9271, 79.8612);&#10;    private static final float DEFAULT_ZOOM = 8f;&#10;    private static final float DETAILED_ZOOM = 15f;&#10;&#10;    // UI Components&#10;    private GoogleMap mMap;&#10;    private CircularProgressIndicator loadingIndicator;&#10;    private EditText searchEditText;&#10;    private ImageView filterIcon;&#10;    private FloatingActionButton myLocationFab, mapTypeFab, clusterToggleFab;&#10;    private LinearLayout bottomSheet;&#10;    private BottomSheetBehavior&lt;LinearLayout&gt; bottomSheetBehavior;&#10;&#10;    // Bottom sheet components&#10;    private ImageView attractionImage, navigateButton;&#10;    private TextView attractionName, attractionCategory, attractionDistance;&#10;&#10;    // Data and functionality&#10;    private FusedLocationProviderClient fusedLocationClient;&#10;    private FirebaseFirestore firestore;&#10;    private List&lt;Attraction&gt; allAttractions;&#10;    private List&lt;Attraction&gt; filteredAttractions;&#10;    private Map&lt;Marker, Attraction&gt; markerAttractionMap;&#10;    private Location currentLocation;&#10;    private int currentMapType = GoogleMap.MAP_TYPE_NORMAL;&#10;    private boolean clusteringEnabled = true;&#10;    private String currentSearchQuery = &quot;&quot;;&#10;    private Attraction selectedAttraction;&#10;&#10;    @Override&#10;    protected int getLayoutResourceId() {&#10;        return R.layout.activity_full_map_view;&#10;    }&#10;&#10;    @Override&#10;    protected String getActivityTitle() {&#10;        return getString(R.string.nav_explore_on_map_title);&#10;    }&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        initializeComponents();&#10;        setupMapFragment();&#10;        setupUIListeners();&#10;        requestLocationPermission();&#10;        loadAttractionsFromFirestore();&#10;    }&#10;&#10;    /**&#10;     * Initialize all UI components and services&#10;     */&#10;    private void initializeComponents() {&#10;        // Initialize Firebase and location services&#10;        firestore = FirebaseFirestore.getInstance();&#10;        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this);&#10;&#10;        // Initialize data structures&#10;        allAttractions = new ArrayList&lt;&gt;();&#10;        filteredAttractions = new ArrayList&lt;&gt;();&#10;        markerAttractionMap = new HashMap&lt;&gt;();&#10;&#10;        // Initialize UI components&#10;        loadingIndicator = findViewById(R.id.loadingIndicator);&#10;        searchEditText = findViewById(R.id.searchEditText);&#10;        filterIcon = findViewById(R.id.filterIcon);&#10;        myLocationFab = findViewById(R.id.myLocationFab);&#10;        mapTypeFab = findViewById(R.id.mapTypeFab);&#10;        clusterToggleFab = findViewById(R.id.clusterToggleFab);&#10;        bottomSheet = findViewById(R.id.bottomSheet);&#10;&#10;        // Bottom sheet components&#10;        attractionImage = findViewById(R.id.attractionImage);&#10;        attractionName = findViewById(R.id.attractionName);&#10;        attractionCategory = findViewById(R.id.attractionCategory);&#10;        attractionDistance = findViewById(R.id.attractionDistance);&#10;        navigateButton = findViewById(R.id.navigateButton);&#10;&#10;        // Setup bottom sheet behavior&#10;        bottomSheetBehavior = BottomSheetBehavior.from(bottomSheet);&#10;        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);&#10;    }&#10;&#10;    /**&#10;     * Setup the Google Maps fragment&#10;     */&#10;    private void setupMapFragment() {&#10;        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()&#10;                .findFragmentById(R.id.map);&#10;        if (mapFragment != null) {&#10;            mapFragment.getMapAsync(this);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Setup all UI event listeners&#10;     */&#10;    private void setupUIListeners() {&#10;        // Search functionality&#10;        searchEditText.addTextChangedListener(new TextWatcher() {&#10;            @Override&#10;            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}&#10;&#10;            @Override&#10;            public void onTextChanged(CharSequence s, int start, int before, int count) {&#10;                currentSearchQuery = s.toString().trim();&#10;                filterAndDisplayAttractions();&#10;            }&#10;&#10;            @Override&#10;            public void afterTextChanged(Editable s) {}&#10;        });&#10;&#10;        // Filter button&#10;        filterIcon.setOnClickListener(v -&gt; showFilterDialog());&#10;&#10;        // My location button&#10;        myLocationFab.setOnClickListener(v -&gt; moveToCurrentLocation());&#10;&#10;        // Map type toggle&#10;        mapTypeFab.setOnClickListener(v -&gt; toggleMapType());&#10;&#10;        // Clustering toggle&#10;        clusterToggleFab.setOnClickListener(v -&gt; toggleClustering());&#10;&#10;        // Navigation button in bottom sheet&#10;        navigateButton.setOnClickListener(v -&gt; openNavigation());&#10;    }&#10;&#10;    @Override&#10;    public void onMapReady(@NonNull GoogleMap googleMap) {&#10;        mMap = googleMap;&#10;&#10;        // Configure map settings&#10;        setupMapSettings();&#10;&#10;        // Set map listeners&#10;        mMap.setOnMarkerClickListener(this);&#10;        mMap.setOnMapClickListener(latLng -&gt; hideBottomSheet());&#10;&#10;        // Move camera to Sri Lanka&#10;        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(DEFAULT_LOCATION, DEFAULT_ZOOM));&#10;&#10;        // Get current location and display attractions&#10;        getCurrentLocation();&#10;        displayAttractionsOnMap();&#10;&#10;        hideLoadingIndicator();&#10;    }&#10;&#10;    /**&#10;     * Configure Google Maps settings and UI&#10;     */&#10;    private void setupMapSettings() {&#10;        // Enable map controls&#10;        mMap.getUiSettings().setZoomControlsEnabled(false); // We have custom FABs&#10;        mMap.getUiSettings().setMapToolbarEnabled(true);&#10;        mMap.getUiSettings().setCompassEnabled(true);&#10;&#10;        // Enable location if permission granted&#10;        enableMyLocationIfPermitted();&#10;    }&#10;&#10;    /**&#10;     * Load attractions from Firestore database&#10;     */&#10;    private void loadAttractionsFromFirestore() {&#10;        showLoadingIndicator();&#10;&#10;        firestore.collection(&quot;attractions&quot;)&#10;                .get()&#10;                .addOnCompleteListener(task -&gt; {&#10;                    if (task.isSuccessful() &amp;&amp; task.getResult() != null) {&#10;                        allAttractions.clear();&#10;&#10;                        for (QueryDocumentSnapshot document : task.getResult()) {&#10;                            try {&#10;                                Attraction attraction = document.toObject(Attraction.class);&#10;                                if (attraction != null &amp;&amp; isValidAttraction(attraction)) {&#10;                                    allAttractions.add(attraction);&#10;                                }&#10;                            } catch (Exception e) {&#10;                                Log.w(TAG, &quot;Error parsing attraction: &quot; + e.getMessage());&#10;                            }&#10;                        }&#10;&#10;                        Log.d(TAG, &quot;Loaded &quot; + allAttractions.size() + &quot; attractions from Firestore&quot;);&#10;                        filterAndDisplayAttractions();&#10;&#10;                    } else {&#10;                        Log.w(TAG, &quot;Error getting attractions&quot;, task.getException());&#10;                        Toast.makeText(this, &quot;Failed to load attractions&quot;, Toast.LENGTH_SHORT).show();&#10;                    }&#10;                    hideLoadingIndicator();&#10;                });&#10;    }&#10;&#10;    /**&#10;     * Validate attraction data before displaying&#10;     */&#10;    private boolean isValidAttraction(Attraction attraction) {&#10;        return attraction.getName() != null &amp;&amp; !attraction.getName().trim().isEmpty() &amp;&amp;&#10;               attraction.getLatitude() != 0.0 &amp;&amp; attraction.getLongitude() != 0.0 &amp;&amp;&#10;               !attraction.isPlaceholder();&#10;    }&#10;&#10;    /**&#10;     * Filter attractions based on search query and display on map&#10;     */&#10;    private void filterAndDisplayAttractions() {&#10;        filteredAttractions.clear();&#10;&#10;        if (currentSearchQuery.isEmpty()) {&#10;            filteredAttractions.addAll(allAttractions);&#10;        } else {&#10;            String query = currentSearchQuery.toLowerCase();&#10;            for (Attraction attraction : allAttractions) {&#10;                if (matchesSearchQuery(attraction, query)) {&#10;                    filteredAttractions.add(attraction);&#10;                }&#10;            }&#10;        }&#10;&#10;        displayAttractionsOnMap();&#10;        Log.d(TAG, &quot;Filtered to &quot; + filteredAttractions.size() + &quot; attractions&quot;);&#10;    }&#10;&#10;    /**&#10;     * Check if attraction matches search query&#10;     */&#10;    private boolean matchesSearchQuery(Attraction attraction, String query) {&#10;        return attraction.getName().toLowerCase().contains(query) ||&#10;               (attraction.getCategory() != null &amp;&amp; attraction.getCategory().toLowerCase().contains(query)) ||&#10;               (attraction.getCity() != null &amp;&amp; attraction.getCity().toLowerCase().contains(query)) ||&#10;               (attraction.getDescription() != null &amp;&amp; attraction.getDescription().toLowerCase().contains(query));&#10;    }&#10;&#10;    /**&#10;     * Display filtered attractions as markers on the map&#10;     */&#10;    private void displayAttractionsOnMap() {&#10;        if (mMap == null) return;&#10;&#10;        // Clear existing markers&#10;        mMap.clear();&#10;        markerAttractionMap.clear();&#10;&#10;        // Add markers for filtered attractions&#10;        for (Attraction attraction : filteredAttractions) {&#10;            addAttractionMarker(attraction);&#10;        }&#10;&#10;        Log.d(TAG, &quot;Displayed &quot; + filteredAttractions.size() + &quot; markers on map&quot;);&#10;    }&#10;&#10;    /**&#10;     * Add a marker for an attraction on the map&#10;     */&#10;    private void addAttractionMarker(Attraction attraction) {&#10;        LatLng position = new LatLng(attraction.getLatitude(), attraction.getLongitude());&#10;&#10;        MarkerOptions markerOptions = new MarkerOptions()&#10;                .position(position)&#10;                .title(attraction.getName())&#10;                .snippet(attraction.getCategory())&#10;                .icon(BitmapDescriptorFactory.defaultMarker(getMarkerColor(attraction.getCategory())));&#10;&#10;        Marker marker = mMap.addMarker(markerOptions);&#10;        if (marker != null) {&#10;            markerAttractionMap.put(marker, attraction);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get marker color based on attraction category&#10;     */&#10;    private float getMarkerColor(String category) {&#10;        if (category == null) return BitmapDescriptorFactory.HUE_RED;&#10;&#10;        switch (category.toLowerCase()) {&#10;            case &quot;temple&quot;: case &quot;religious&quot;: return BitmapDescriptorFactory.HUE_ORANGE;&#10;            case &quot;beach&quot;: case &quot;coastal&quot;: return BitmapDescriptorFactory.HUE_AZURE;&#10;            case &quot;mountain&quot;: case &quot;hiking&quot;: return BitmapDescriptorFactory.HUE_GREEN;&#10;            case &quot;waterfall&quot;: return BitmapDescriptorFactory.HUE_CYAN;&#10;            case &quot;historical&quot;: case &quot;archaeological&quot;: return BitmapDescriptorFactory.HUE_VIOLET;&#10;            case &quot;wildlife&quot;: case &quot;national park&quot;: return BitmapDescriptorFactory.HUE_YELLOW;&#10;            default: return BitmapDescriptorFactory.HUE_RED;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onMarkerClick(@NonNull Marker marker) {&#10;        Attraction attraction = markerAttractionMap.get(marker);&#10;        if (attraction != null) {&#10;            selectedAttraction = attraction;&#10;            showAttractionDetails(attraction);&#10;&#10;            // Move camera to marker&#10;            mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(marker.getPosition(), DETAILED_ZOOM));&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    /**&#10;     * Show attraction details in bottom sheet&#10;     */&#10;    private void showAttractionDetails(Attraction attraction) {&#10;        // Set attraction data&#10;        attractionName.setText(attraction.getName());&#10;        attractionCategory.setText(attraction.getCategory());&#10;        &#10;        // Load attraction image&#10;        if (attraction.getImages() != null &amp;&amp; !attraction.getImages().isEmpty()) {&#10;            String imageUrl = attraction.getImages().get(0);&#10;            Glide.with(this)&#10;                    .load(imageUrl)&#10;                    .placeholder(R.drawable.ic_image_placeholder)&#10;                    .error(R.drawable.ic_image_placeholder)&#10;                    .into(attractionImage);&#10;        } else {&#10;            attractionImage.setImageResource(R.drawable.ic_image_placeholder);&#10;        }&#10;        &#10;        // Calculate and display distance&#10;        if (currentLocation != null) {&#10;            float distance = calculateDistance(&#10;                    currentLocation.getLatitude(), currentLocation.getLongitude(),&#10;                    attraction.getLatitude(), attraction.getLongitude()&#10;            );&#10;            attractionDistance.setText(String.format(Locale.getDefault(), &quot;%.1f km away&quot;, distance));&#10;        } else {&#10;            attractionDistance.setText(getString(R.string.distance_unknown));&#10;        }&#10;        &#10;        // Show bottom sheet&#10;        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);&#10;        &#10;        // Set click listener for full details&#10;        bottomSheet.setOnClickListener(v -&gt; openAttractionDetails(attraction));&#10;    }&#10;&#10;    /**&#10;     * Calculate distance between two points in kilometers&#10;     */&#10;    private float calculateDistance(double lat1, double lon1, double lat2, double lon2) {&#10;        float[] results = new float[1];&#10;        Location.distanceBetween(lat1, lon1, lat2, lon2, results);&#10;        return results[0] / 1000; // Convert to kilometers&#10;    }&#10;&#10;    /**&#10;     * Hide the bottom sheet&#10;     */&#10;    private void hideBottomSheet() {&#10;        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);&#10;        selectedAttraction = null;&#10;    }&#10;&#10;    /**&#10;     * Open full attraction details activity&#10;     */&#10;    private void openAttractionDetails(Attraction attraction) {&#10;        Intent intent = new Intent(this, LocationDetailActivity.class);&#10;&#10;        // Pass all attraction data using standardized keys&#10;        intent.putExtra(&quot;attraction_name&quot;, attraction.getName());&#10;        intent.putExtra(&quot;attraction_city&quot;, attraction.getCity());&#10;        intent.putExtra(&quot;attraction_category&quot;, attraction.getCategory());&#10;        intent.putExtra(&quot;attraction_description&quot;, attraction.getDescription());&#10;        intent.putExtra(&quot;contributor_name&quot;, attraction.getContributorName());&#10;        intent.putExtra(&quot;youtube_url&quot;, attraction.getYoutubeUrl());&#10;        intent.putExtra(&quot;attraction_latitude&quot;, attraction.getLatitude());&#10;        intent.putExtra(&quot;attraction_longitude&quot;, attraction.getLongitude());&#10;&#10;        if (attraction.getImages() != null &amp;&amp; !attraction.getImages().isEmpty()) {&#10;            intent.putExtra(&quot;attraction_image_url&quot;, attraction.getImages().get(0));&#10;            ArrayList&lt;String&gt; imagesList = new ArrayList&lt;&gt;(attraction.getImages());&#10;            intent.putStringArrayListExtra(&quot;attraction_images&quot;, imagesList);&#10;        }&#10;&#10;        startActivity(intent);&#10;    }&#10;&#10;    /**&#10;     * Open navigation to selected attraction&#10;     */&#10;    private void openNavigation() {&#10;        if (selectedAttraction == null) return;&#10;&#10;        // Create Google Maps navigation intent&#10;        Uri gmmIntentUri = Uri.parse(String.format(Locale.getDefault(),&#10;                &quot;google.navigation:q=%.6f,%.6f&quot;,&#10;                selectedAttraction.getLatitude(),&#10;                selectedAttraction.getLongitude()));&#10;&#10;        Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri);&#10;        mapIntent.setPackage(&quot;com.google.android.apps.maps&quot;);&#10;&#10;        if (mapIntent.resolveActivity(getPackageManager()) != null) {&#10;            startActivity(mapIntent);&#10;        } else {&#10;            // Fallback to browser-based maps&#10;            Uri browserUri = Uri.parse(String.format(Locale.getDefault(),&#10;                    &quot;https://www.google.com/maps/dir/?api=1&amp;destination=%.6f,%.6f&quot;,&#10;                    selectedAttraction.getLatitude(),&#10;                    selectedAttraction.getLongitude()));&#10;&#10;            Intent browserIntent = new Intent(Intent.ACTION_VIEW, browserUri);&#10;            startActivity(browserIntent);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Request location permission from user&#10;     */&#10;    private void requestLocationPermission() {&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)&#10;                != PackageManager.PERMISSION_GRANTED) {&#10;            ActivityCompat.requestPermissions(this,&#10;                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION},&#10;                    LOCATION_PERMISSION_REQUEST_CODE);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Enable my location on map if permission is granted&#10;     */&#10;    private void enableMyLocationIfPermitted() {&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)&#10;                == PackageManager.PERMISSION_GRANTED) {&#10;            if (mMap != null) {&#10;                mMap.setMyLocationEnabled(true);&#10;                mMap.getUiSettings().setMyLocationButtonEnabled(false); // We use custom FAB&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get current user location&#10;     */&#10;    private void getCurrentLocation() {&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)&#10;                == PackageManager.PERMISSION_GRANTED) {&#10;&#10;            fusedLocationClient.getLastLocation()&#10;                    .addOnSuccessListener(this, location -&gt; {&#10;                        if (location != null) {&#10;                            currentLocation = location;&#10;                            Log.d(TAG, &quot;Current location: &quot; + location.getLatitude() + &quot;, &quot; + location.getLongitude());&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; Log.w(TAG, &quot;Failed to get location&quot;, e));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Move camera to current location&#10;     */&#10;    private void moveToCurrentLocation() {&#10;        if (currentLocation != null &amp;&amp; mMap != null) {&#10;            LatLng currentLatLng = new LatLng(currentLocation.getLatitude(), currentLocation.getLongitude());&#10;            mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(currentLatLng, DETAILED_ZOOM));&#10;        } else {&#10;            Toast.makeText(this, &quot;Location not available&quot;, Toast.LENGTH_SHORT).show();&#10;            getCurrentLocation(); // Try to get location again&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Toggle between different map types&#10;     */&#10;    private void toggleMapType() {&#10;        if (mMap == null) return;&#10;&#10;        switch (currentMapType) {&#10;            case GoogleMap.MAP_TYPE_NORMAL:&#10;                currentMapType = GoogleMap.MAP_TYPE_SATELLITE;&#10;                Toast.makeText(this, &quot;Satellite View&quot;, Toast.LENGTH_SHORT).show();&#10;                break;&#10;            case GoogleMap.MAP_TYPE_SATELLITE:&#10;                currentMapType = GoogleMap.MAP_TYPE_TERRAIN;&#10;                Toast.makeText(this, &quot;Terrain View&quot;, Toast.LENGTH_SHORT).show();&#10;                break;&#10;            case GoogleMap.MAP_TYPE_TERRAIN:&#10;                currentMapType = GoogleMap.MAP_TYPE_NORMAL;&#10;                Toast.makeText(this, &quot;Normal View&quot;, Toast.LENGTH_SHORT).show();&#10;                break;&#10;        }&#10;&#10;        mMap.setMapType(currentMapType);&#10;    }&#10;&#10;    /**&#10;     * Toggle marker clustering (placeholder for future implementation)&#10;     */&#10;    private void toggleClustering() {&#10;        clusteringEnabled = !clusteringEnabled;&#10;        String message = clusteringEnabled ? &quot;Clustering Enabled&quot; : &quot;Clustering Disabled&quot;;&#10;        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();&#10;&#10;        // TODO: Implement marker clustering with ClusterManager&#10;        // This would group nearby markers when zoomed out for better performance&#10;    }&#10;&#10;    /**&#10;     * Show filter dialog (placeholder for future implementation)&#10;     */&#10;    private void showFilterDialog() {&#10;        Toast.makeText(this, &quot;Filter options coming soon!&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;        // TODO: Implement filter dialog for categories, ratings, etc.&#10;    }&#10;&#10;    /**&#10;     * Show loading indicator&#10;     */&#10;    private void showLoadingIndicator() {&#10;        if (loadingIndicator != null) {&#10;            loadingIndicator.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Hide loading indicator&#10;     */&#10;    private void hideLoadingIndicator() {&#10;        if (loadingIndicator != null) {&#10;            loadingIndicator.setVisibility(View.GONE);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults);&#10;&#10;        if (requestCode == LOCATION_PERMISSION_REQUEST_CODE) {&#10;            if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;                enableMyLocationIfPermitted();&#10;                getCurrentLocation();&#10;            } else {&#10;                Toast.makeText(this, &quot;Location permission denied&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Refresh location when returning to activity&#10;        getCurrentLocation();&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        // Clean up resources&#10;        if (markerAttractionMap != null) {&#10;            markerAttractionMap.clear();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/GooglePhotosHelper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/GooglePhotosHelper.java" />
              <option name="updatedContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.app.Activity;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.util.Log;&#10;&#10;import androidx.annotation.NonNull;&#10;&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInAccount;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions;&#10;import com.google.android.gms.common.api.Scope;&#10;import com.google.android.gms.tasks.Task;&#10;import com.google.api.client.extensions.android.http.AndroidHttp;&#10;import com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential;&#10;import com.google.api.client.json.gson.GsonFactory;&#10;import com.google.api.services.photoslibrary.v1.PhotosLibrary;&#10;import com.google.api.services.photoslibrary.v1.PhotosLibraryScopes;&#10;import com.google.api.services.photoslibrary.v1.model.ListSharedAlbumsResponse;&#10;import com.google.api.services.photoslibrary.v1.model.SearchMediaItemsRequest;&#10;import com.google.api.services.photoslibrary.v1.model.SearchMediaItemsResponse;&#10;import com.google.api.services.photoslibrary.v1.model.SharedAlbum;&#10;import com.google.api.services.photoslibrary.v1.model.MediaItem;&#10;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.concurrent.ExecutorService;&#10;import java.util.concurrent.Executors;&#10;&#10;/**&#10; * Helper class for Google Photos integration&#10; * Handles authentication and photo retrieval from shared albums&#10; */&#10;public class GooglePhotosHelper {&#10;    &#10;    private static final String TAG = &quot;GooglePhotosHelper&quot;;&#10;    private static final int RC_GOOGLE_PHOTOS_SIGN_IN = 9001;&#10;    &#10;    private Context context;&#10;    private GoogleSignInClient signInClient;&#10;    private PhotosLibrary photosLibraryService;&#10;    private ExecutorService executorService;&#10;    &#10;    // Interface for handling results&#10;    public interface GooglePhotosCallback {&#10;        void onAuthenticationSuccess();&#10;        void onAuthenticationFailed(String error);&#10;        void onPhotosLoaded(List&lt;PhotoItem&gt; photos);&#10;        void onError(String error);&#10;    }&#10;    &#10;    // Data class for photo items&#10;    public static class PhotoItem {&#10;        private String id;&#10;        private String baseUrl;&#10;        private String filename;&#10;        private String description;&#10;        private String mimeType;&#10;        &#10;        public PhotoItem(String id, String baseUrl, String filename, String description, String mimeType) {&#10;            this.id = id;&#10;            this.baseUrl = baseUrl;&#10;            this.filename = filename;&#10;            this.description = description;&#10;            this.mimeType = mimeType;&#10;        }&#10;        &#10;        // Getters&#10;        public String getId() { return id; }&#10;        public String getBaseUrl() { return baseUrl; }&#10;        public String getFilename() { return filename; }&#10;        public String getDescription() { return description; }&#10;        public String getMimeType() { return mimeType; }&#10;        &#10;        // Get downloadable URL with specific dimensions&#10;        public String getDownloadUrl(int width, int height) {&#10;            return baseUrl + &quot;=w&quot; + width + &quot;-h&quot; + height;&#10;        }&#10;        &#10;        // Get thumbnail URL&#10;        public String getThumbnailUrl() {&#10;            return baseUrl + &quot;=w300-h300-c&quot;;&#10;        }&#10;        &#10;        // Get full resolution URL&#10;        public String getFullResolutionUrl() {&#10;            return baseUrl + &quot;=d&quot;;&#10;        }&#10;    }&#10;    &#10;    public GooglePhotosHelper(Context context) {&#10;        this.context = context;&#10;        this.executorService = Executors.newSingleThreadExecutor();&#10;        initializeGoogleSignIn();&#10;    }&#10;    &#10;    private void initializeGoogleSignIn() {&#10;        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                .requestEmail()&#10;                .requestScopes(new Scope(PhotosLibraryScopes.PHOTOSLIBRARY_READONLY))&#10;                .build();&#10;        &#10;        signInClient = GoogleSignIn.getClient(context, gso);&#10;    }&#10;    &#10;    /**&#10;     * Check if user is already signed in to Google Photos&#10;     */&#10;    public boolean isSignedIn() {&#10;        GoogleSignInAccount account = GoogleSignIn.getLastSignedInAccount(context);&#10;        return account != null &amp;&amp; &#10;               GoogleSignIn.hasPermissions(account, new Scope(PhotosLibraryScopes.PHOTOSLIBRARY_READONLY));&#10;    }&#10;    &#10;    /**&#10;     * Sign in to Google Photos&#10;     */&#10;    public void signIn(Activity activity, GooglePhotosCallback callback) {&#10;        if (isSignedIn()) {&#10;            initializePhotosService();&#10;            callback.onAuthenticationSuccess();&#10;            return;&#10;        }&#10;        &#10;        Intent signInIntent = signInClient.getSignInIntent();&#10;        activity.startActivityForResult(signInIntent, RC_GOOGLE_PHOTOS_SIGN_IN);&#10;    }&#10;    &#10;    /**&#10;     * Handle sign-in result&#10;     */&#10;    public void handleSignInResult(Intent data, GooglePhotosCallback callback) {&#10;        Task&lt;GoogleSignInAccount&gt; task = GoogleSignIn.getSignedInAccountFromIntent(data);&#10;        &#10;        try {&#10;            GoogleSignInAccount account = task.getResult();&#10;            if (account != null) {&#10;                Log.d(TAG, &quot;Google Photos sign-in successful&quot;);&#10;                initializePhotosService();&#10;                callback.onAuthenticationSuccess();&#10;            } else {&#10;                callback.onAuthenticationFailed(&quot;Failed to sign in to Google Photos&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Google Photos sign-in failed&quot;, e);&#10;            callback.onAuthenticationFailed(&quot;Sign-in failed: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    private void initializePhotosService() {&#10;        GoogleSignInAccount account = GoogleSignIn.getLastSignedInAccount(context);&#10;        if (account == null) {&#10;            Log.e(TAG, &quot;No signed-in account found&quot;);&#10;            return;&#10;        }&#10;        &#10;        GoogleAccountCredential credential = GoogleAccountCredential.usingOAuth2(&#10;                context, Arrays.asList(PhotosLibraryScopes.PHOTOSLIBRARY_READONLY));&#10;        credential.setSelectedAccount(account.getAccount());&#10;        &#10;        photosLibraryService = new PhotosLibrary.Builder(&#10;                AndroidHttp.newCompatibleTransport(),&#10;                GsonFactory.getDefaultInstance(),&#10;                credential)&#10;                .setApplicationName(&quot;Hidden Sri Lanka&quot;)&#10;                .build();&#10;    }&#10;    &#10;    /**&#10;     * Load shared albums from Google Photos&#10;     */&#10;    public void loadSharedAlbums(GooglePhotosCallback callback) {&#10;        if (photosLibraryService == null) {&#10;            callback.onError(&quot;Google Photos service not initialized. Please sign in first.&quot;);&#10;            return;&#10;        }&#10;        &#10;        executorService.execute(() -&gt; {&#10;            try {&#10;                ListSharedAlbumsResponse response = photosLibraryService.sharedAlbums().list().execute();&#10;                List&lt;SharedAlbum&gt; albums = response.getSharedAlbums();&#10;                &#10;                if (albums != null &amp;&amp; !albums.isEmpty()) {&#10;                    // For demo, load photos from the first shared album&#10;                    loadPhotosFromAlbum(albums.get(0).getId(), callback);&#10;                } else {&#10;                    ((Activity) context).runOnUiThread(() -&gt; &#10;                        callback.onError(&quot;No shared albums found. Please make sure you have shared albums in Google Photos.&quot;));&#10;                }&#10;                &#10;            } catch (IOException e) {&#10;                Log.e(TAG, &quot;Error loading shared albums&quot;, e);&#10;                ((Activity) context).runOnUiThread(() -&gt; &#10;                    callback.onError(&quot;Failed to load shared albums: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;    &#10;    /**&#10;     * Load all recent photos from Google Photos (not album-specific)&#10;     */&#10;    public void loadRecentPhotos(GooglePhotosCallback callback) {&#10;        loadRecentPhotos(20, callback); // Load 20 recent photos&#10;    }&#10;    &#10;    /**&#10;     * Load recent photos with specified count&#10;     */&#10;    public void loadRecentPhotos(int pageSize, GooglePhotosCallback callback) {&#10;        if (photosLibraryService == null) {&#10;            callback.onError(&quot;Google Photos service not initialized. Please sign in first.&quot;);&#10;            return;&#10;        }&#10;        &#10;        executorService.execute(() -&gt; {&#10;            try {&#10;                SearchMediaItemsRequest request = new SearchMediaItemsRequest()&#10;                        .setPageSize(pageSize);&#10;                &#10;                SearchMediaItemsResponse response = photosLibraryService.mediaItems().search(request).execute();&#10;                List&lt;MediaItem&gt; mediaItems = response.getMediaItems();&#10;                &#10;                List&lt;PhotoItem&gt; photoItems = new ArrayList&lt;&gt;();&#10;                if (mediaItems != null) {&#10;                    for (MediaItem item : mediaItems) {&#10;                        // Only include images (not videos)&#10;                        if (item.getMimeType() != null &amp;&amp; item.getMimeType().startsWith(&quot;image/&quot;)) {&#10;                            PhotoItem photoItem = new PhotoItem(&#10;                                    item.getId(),&#10;                                    item.getBaseUrl(),&#10;                                    item.getFilename(),&#10;                                    item.getDescription(),&#10;                                    item.getMimeType()&#10;                            );&#10;                            photoItems.add(photoItem);&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                ((Activity) context).runOnUiThread(() -&gt; callback.onPhotosLoaded(photoItems));&#10;                &#10;            } catch (IOException e) {&#10;                Log.e(TAG, &quot;Error loading recent photos&quot;, e);&#10;                ((Activity) context).runOnUiThread(() -&gt; &#10;                    callback.onError(&quot;Failed to load photos: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;    &#10;    private void loadPhotosFromAlbum(String albumId, GooglePhotosCallback callback) {&#10;        executorService.execute(() -&gt; {&#10;            try {&#10;                SearchMediaItemsRequest request = new SearchMediaItemsRequest()&#10;                        .setAlbumId(albumId)&#10;                        .setPageSize(50);&#10;                &#10;                SearchMediaItemsResponse response = photosLibraryService.mediaItems().search(request).execute();&#10;                List&lt;MediaItem&gt; mediaItems = response.getMediaItems();&#10;                &#10;                List&lt;PhotoItem&gt; photoItems = new ArrayList&lt;&gt;();&#10;                if (mediaItems != null) {&#10;                    for (MediaItem item : mediaItems) {&#10;                        if (item.getMimeType() != null &amp;&amp; item.getMimeType().startsWith(&quot;image/&quot;)) {&#10;                            PhotoItem photoItem = new PhotoItem(&#10;                                    item.getId(),&#10;                                    item.getBaseUrl(),&#10;                                    item.getFilename(),&#10;                                    item.getDescription(),&#10;                                    item.getMimeType()&#10;                            );&#10;                            photoItems.add(photoItem);&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                ((Activity) context).runOnUiThread(() -&gt; callback.onPhotosLoaded(photoItems));&#10;                &#10;            } catch (IOException e) {&#10;                Log.e(TAG, &quot;Error loading photos from album&quot;, e);&#10;                ((Activity) context).runOnUiThread(() -&gt; &#10;                    callback.onError(&quot;Failed to load album photos: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;    &#10;    /**&#10;     * Sign out from Google Photos&#10;     */&#10;    public void signOut(GooglePhotosCallback callback) {&#10;        signInClient.signOut().addOnCompleteListener(task -&gt; {&#10;            photosLibraryService = null;&#10;            Log.d(TAG, &quot;Signed out from Google Photos&quot;);&#10;        });&#10;    }&#10;    &#10;    /**&#10;     * Clean up resources&#10;     */&#10;    public void cleanup() {&#10;        if (executorService != null &amp;&amp; !executorService.isShutdown()) {&#10;            executorService.shutdown();&#10;        }&#10;    }&#10;    &#10;    public static int getSignInRequestCode() {&#10;        return RC_GOOGLE_PHOTOS_SIGN_IN;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/utils/GooglePhotosHelper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/utils/GooglePhotosHelper.java" />
              <option name="updatedContent" value="// This file has been removed as it's not needed for Google Photos shared link functionality&#10;// The Google Photos integration is now handled directly in AddLocationActivity.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/bottom_sheet_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/bottom_sheet_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &#10;    &lt;!-- Background color --&gt;&#10;    &lt;solid android:color=&quot;@android:color/white&quot; /&gt;&#10;    &#10;    &lt;!-- Rounded top corners for bottom sheet --&gt;&#10;    &lt;corners&#10;        android:topLeftRadius=&quot;16dp&quot;&#10;        android:topRightRadius=&quot;16dp&quot;&#10;        android:bottomLeftRadius=&quot;0dp&quot;&#10;        android:bottomRightRadius=&quot;0dp&quot; /&gt;&#10;    &#10;    &lt;!-- Shadow/elevation effect --&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;#E0E0E0&quot; /&gt;&#10;        &#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/grow_our_database.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/grow_our_database.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;200dp&quot;&#10;    android:height=&quot;150dp&quot;&#10;    android:viewportWidth=&quot;200&quot;&#10;    android:viewportHeight=&quot;150&quot;&gt;&#10;    &#10;    &lt;!-- Background --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#E8F5E8&quot;&#10;        android:pathData=&quot;M0,0h200v150h-200z&quot;/&gt;&#10;    &#10;    &lt;!-- Tree/Growth Icon --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M100,120c-2,0 -4,-2 -4,-4v-20c0,-2 2,-4 4,-4s4,2 4,4v20c0,2 -2,4 -4,4z&quot;/&gt;&#10;    &#10;    &lt;!-- Leaves --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#66BB6A&quot;&#10;        android:pathData=&quot;M100,90c-8,0 -15,-7 -15,-15s7,-15 15,-15s15,7 15,15s-7,15 -15,15z&quot;/&gt;&#10;    &#10;    &lt;path&#10;        android:fillColor=&quot;#81C784&quot;&#10;        android:pathData=&quot;M90,85c-6,0 -12,-5 -12,-12s6,-12 12,-12s12,5 12,12s-6,12 -12,12z&quot;/&gt;&#10;    &#10;    &lt;path&#10;        android:fillColor=&quot;#81C784&quot;&#10;        android:pathData=&quot;M110,85c-6,0 -12,-5 -12,-12s6,-12 12,-12s12,5 12,12s-6,12 -12,12z&quot;/&gt;&#10;    &#10;    &lt;!-- Plus icon in center --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#2E7D32&quot;&#10;        android:pathData=&quot;M100,50v20m-10,-10h20&quot;&#10;        android:strokeWidth=&quot;3&quot;&#10;        android:strokeColor=&quot;#2E7D32&quot;/&gt;&#10;    &#10;    &lt;!-- Text area suggestion --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#C8E6C9&quot;&#10;        android:pathData=&quot;M30,130h140v15h-140z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_filter.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M3,17v2h6v-2L3,17zM3,5v2h10L13,5L3,5zM13,21v-2h8v-2h-8v-2h-2v6h2zM7,9v2L3,11v2h4v2h2L9,9L7,9zM21,13v-2L11,11v2h10zM15,9h2L17,7h4L21,5h-4L17,3h-2v6z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_group.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_group.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M16,4c0,-1.11 0.89,-2 2,-2s2,0.89 2,2 -0.89,2 -2,2 -2,-0.89 -2,-2zM4,18v-6h3v-2.5c0,-1.1 0.9,-2 2,-2h2L11,6h2v1.5h2c1.1,0 2,0.9 2,2L17,12h3v6L4,18zM12.5,11.5c0.83,0 1.5,-0.67 1.5,-1.5s-0.67,-1.5 -1.5,-1.5S11,9.17 11,10s0.67,1.5 1.5,1.5zM15,20c0,1.1 -0.9,2 -2,2s-2,-0.9 -2,-2 0.9,-2 2,-2 2,0.9 2,2zM8,20c0,1.1 -0.9,2 -2,2s-2,-0.9 -2,-2 0.9,-2 2,-2 2,0.9 2,2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_layers.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_layers.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M11.99,18.54l-7.37,-5.73L3,14.07l9,7 9,-7 -1.63,-1.27 -7.38,5.74zM12,16l7.36,-5.73L21,9l-9,-7 -9,7 1.63,1.27L12,16z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_my_location.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_my_location.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,8c-2.21,0 -4,1.79 -4,4s1.79,4 4,4 4,-1.79 4,-4 -1.79,-4 -4,-4zM20.94,11c-0.46,-4.17 -3.77,-7.48 -7.94,-7.94L13,1h-2v2.06C6.83,3.52 3.52,6.83 3.06,11L1,11v2h2.06c0.46,4.17 3.77,7.48 7.94,7.94L11,23h2v-2.06c4.17,-0.46 7.48,-3.77 7.94,-7.94L23,13v-2h-2.06zM12,19c-3.87,0 -7,-3.13 -7,-7s3.13,-7 7,-7 7,3.13 7,7 -3.13,7 -7,7z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/rounded_corners.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/rounded_corners.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &#10;    &lt;!-- Background color --&gt;&#10;    &lt;solid android:color=&quot;@android:color/transparent&quot; /&gt;&#10;    &#10;    &lt;!-- Rounded corners --&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &#10;    &lt;!-- Optional border --&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;#E0E0E0&quot; /&gt;&#10;        &#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_full_map_view.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_full_map_view.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.FullMapViewActivity&quot;&gt;&#10;&#10;    &lt;!-- Google Map Fragment --&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/map&quot;&#10;        android:name=&quot;com.google.android.gms.maps.SupportMapFragment&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        tools:context=&quot;.FullMapViewActivity&quot; /&gt;&#10;&#10;    &lt;!-- Search Bar Overlay --&gt;&#10;    &lt;com.google.android.material.card.MaterialCardView&#10;        android:id=&quot;@+id/searchCard&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        app:cardCornerRadius=&quot;8dp&quot;&#10;        app:cardElevation=&quot;8dp&quot;&#10;        app:layout_anchor=&quot;@id/map&quot;&#10;        app:layout_anchorGravity=&quot;top&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:padding=&quot;12dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/searchIcon&quot;&#10;                android:layout_width=&quot;24dp&quot;&#10;                android:layout_height=&quot;24dp&quot;&#10;                android:layout_gravity=&quot;center_vertical&quot;&#10;                android:layout_marginEnd=&quot;12dp&quot;&#10;                android:src=&quot;@drawable/ic_search&quot;&#10;                android:contentDescription=&quot;Search icon&quot;&#10;                app:tint=&quot;@color/light_gray&quot; /&gt;&#10;&#10;            &lt;EditText&#10;                android:id=&quot;@+id/searchEditText&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:background=&quot;@android:color/transparent&quot;&#10;                android:hint=&quot;Search for attractions...&quot;&#10;                android:textColorHint=&quot;@color/light_gray&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:inputType=&quot;text&quot;&#10;                android:imeOptions=&quot;actionSearch&quot; /&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/filterIcon&quot;&#10;                android:layout_width=&quot;24dp&quot;&#10;                android:layout_height=&quot;24dp&quot;&#10;                android:layout_gravity=&quot;center_vertical&quot;&#10;                android:layout_marginStart=&quot;12dp&quot;&#10;                android:src=&quot;@drawable/ic_filter&quot;&#10;                android:contentDescription=&quot;Filter icon&quot;&#10;                app:tint=&quot;@color/DeepForestGreen&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;    &lt;!-- Map Controls --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/mapControlsLayout&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;end|bottom&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- My Location Button --&gt;&#10;        &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;            android:id=&quot;@+id/myLocationFab&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:src=&quot;@drawable/ic_my_location&quot;&#10;            android:contentDescription=&quot;My Location&quot;&#10;            app:backgroundTint=&quot;@color/DeepForestGreen&quot;&#10;            app:tint=&quot;@android:color/white&quot; /&gt;&#10;&#10;        &lt;!-- Map Type Toggle Button --&gt;&#10;        &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;            android:id=&quot;@+id/mapTypeFab&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:src=&quot;@drawable/ic_layers&quot;&#10;            android:contentDescription=&quot;Map Type&quot;&#10;            app:backgroundTint=&quot;@color/NavyBlue&quot;&#10;            app:tint=&quot;@android:color/white&quot; /&gt;&#10;&#10;        &lt;!-- Cluster View Toggle --&gt;&#10;        &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;            android:id=&quot;@+id/clusterToggleFab&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:src=&quot;@drawable/ic_group&quot;&#10;            android:contentDescription=&quot;Toggle Clustering&quot;&#10;            app:backgroundTint=&quot;@color/GoldYellow&quot;&#10;            app:tint=&quot;@color/NavyBlue&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Bottom Sheet for Attraction Details --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/bottomSheet&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;200dp&quot;&#10;        android:background=&quot;@drawable/bottom_sheet_background&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:behavior_hideable=&quot;true&quot;&#10;        app:behavior_peekHeight=&quot;80dp&quot;&#10;        app:layout_behavior=&quot;com.google.android.material.bottomsheet.BottomSheetBehavior&quot;&gt;&#10;&#10;        &lt;!-- Handle bar for bottom sheet --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;40dp&quot;&#10;            android:layout_height=&quot;4dp&quot;&#10;            android:layout_gravity=&quot;center_horizontal&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:background=&quot;@color/light_gray&quot;&#10;            android:alpha=&quot;0.5&quot; /&gt;&#10;&#10;        &lt;!-- Attraction Info --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/attractionImage&quot;&#10;                android:layout_width=&quot;60dp&quot;&#10;                android:layout_height=&quot;60dp&quot;&#10;                android:layout_marginEnd=&quot;16dp&quot;&#10;                android:scaleType=&quot;centerCrop&quot;&#10;                android:background=&quot;@drawable/rounded_corners&quot;&#10;                android:src=&quot;@drawable/ic_image_placeholder&quot; /&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/attractionName&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Attraction Name&quot;&#10;                    android:textColor=&quot;@color/NavyBlue&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/attractionCategory&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Category&quot;&#10;                    android:textColor=&quot;@color/DeepForestGreen&quot;&#10;                    android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/attractionDistance&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;Distance&quot;&#10;                    android:textColor=&quot;@color/light_gray&quot;&#10;                    android:textSize=&quot;12sp&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/navigateButton&quot;&#10;                android:layout_width=&quot;40dp&quot;&#10;                android:layout_height=&quot;40dp&quot;&#10;                android:layout_gravity=&quot;center_vertical&quot;&#10;                android:src=&quot;@drawable/ic_directions&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:contentDescription=&quot;Navigate&quot;&#10;                app:tint=&quot;@color/DeepForestGreen&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Loading Indicator --&gt;&#10;    &lt;com.google.android.material.progressindicator.CircularProgressIndicator&#10;        android:id=&quot;@+id/loadingIndicator&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:indeterminate=&quot;true&quot;&#10;        android:visibility=&quot;visible&quot;&#10;        app:indicatorColor=&quot;@color/DeepForestGreen&quot; /&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;&#10;    &lt;!--    TODO: Reove UnNessosry Stings --&gt;&#10;    &lt;!--    TODO: add more Strings that way codes will more clear --&gt;&#10;&#10;    &lt;string name=&quot;app_name&quot;&gt;Hidden Sri Lanka&lt;/string&gt;&#10;    &lt;string name=&quot;sID&quot;&gt;S23010526&lt;/string&gt;&#10;    &lt;string name=&quot;devName&quot;&gt;Asitha Kanchana Palliyaguru&lt;/string&gt;&#10;&#10;    &lt;!-- Google Maps API Key - Replace with your actual API key --&gt;&#10;    &lt;string name=&quot;google_maps_key&quot;&gt;AIzaSyDkxygECK5OFLmyPMKKZVe362toOuDkkH0&lt;/string&gt;&#10;&#10;    &lt;!--    nav bar strings--&gt;&#10;    &lt;string name=&quot;navigation_drawer_open&quot;&gt;Open Navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_close&quot;&gt;Close Navigation drawer&lt;/string&gt;&#10;&#10;    &lt;!--Paragraphes--&gt;&#10;    &lt;string name=&quot;aboutParagraph&quot;&gt;Hidden Sri Lanka \n is your ultimate mobile companion designed to help tourists discover and navigate the countless beautiful but lesser-known destinations across Sri Lanka. Our mission is to uncover the wonders beyond the guidebook, providing accessible and reliable information about hidden beaches, scenic hikes, and unique cultural sites, ensuring an enhanced tourist experience for every explorer. &lt;/string&gt;&#10;    &lt;string name=&quot;devBy&quot;&gt;Developed by: P.G.Asitha Kanchana \n&#10;        (Student ID: S23010526) \n&#10;        As part of EEI4369 Mobile Application Development Design Project.\n&lt;/string&gt;&#10;&#10;    &lt;!--Comminng zoon--&gt;&#10;&#10;&#10;    &lt;string name=&quot;search_hint&quot;&gt;Search…&lt;/string&gt;&#10;    &lt;string name=&quot;searching_for_query&quot;&gt;Searching for: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;search_icon_clicked&quot;&gt;Search icon clicked!&lt;/string&gt;&#10;&#10;&#10;    &lt;!--    These are for Placeholders till creating button action pages--&gt;&#10;    &lt;string name=&quot;feature_privacy_policy&quot;&gt;Privacy Policy&lt;/string&gt;&#10;    &lt;string name=&quot;feature_terms_conditions&quot;&gt;Terms &amp;amp; Conditions&lt;/string&gt;&#10;    &lt;string name=&quot;feature_contact_us&quot;&gt;Contact Us&lt;/string&gt;&#10;    &lt;string name=&quot;coming_soon_suffix&quot;&gt;feature is coming soon!&lt;/string&gt;&#10;&#10;    &lt;!-- Example Nav Menu Item Titles --&gt;&#10;    &lt;string name=&quot;nav_home_title&quot;&gt;Home&lt;/string&gt;&#10;    &lt;string name=&quot;nav_settings_title&quot;&gt;Settings&lt;/string&gt;&#10;&#10;    &lt;!--    About Us Page--&gt;&#10;    &lt;string name=&quot;title_about_us&quot;&gt;About Us&lt;/string&gt;&#10;    &lt;string name=&quot;app_logo_description&quot;&gt;App Logo&lt;/string&gt;&#10;    &lt;string name=&quot;app_title&quot;&gt;Hidden Sri Lanka&lt;/string&gt;&#10;    &lt;string name=&quot;mission_title&quot;&gt;Mission &lt;/string&gt;&#10;    &lt;string name=&quot;privacy_policy&quot;&gt;Privacy Policy&lt;/string&gt;&#10;    &lt;string name=&quot;terms_of_service&quot;&gt;Terms of Service&lt;/string&gt;&#10;    &lt;string name=&quot;contact_us_email&quot;&gt;Contact Us: asitha.contact.me@gmail.com&lt;/string&gt;&#10;&#10;    &lt;!--    Map --&gt;&#10;    &lt;string name=&quot;nav_explore_on_map_title&quot;&gt;Explore on Map&lt;/string&gt;&#10;&#10;    &lt;!-- Location Detail Strings --&gt;&#10;    &lt;string name=&quot;contributed_by&quot;&gt;Contributed by: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;added_on&quot;&gt;Added on: %1$s&lt;/string&gt;&#10;&#10;    &lt;!--    Un Nessosory--&gt;&#10;&#10;&#10;    &lt;string name=&quot;Login&quot;&gt;Login&lt;/string&gt;&#10;    &lt;string name=&quot;not_yet_registered_sign_up_now&quot;&gt;Not Yet Registered? Sign Up Now&lt;/string&gt;&#10;    &lt;string name=&quot;uncover_the_wonders_beyond_the_guidebook&quot;&gt;Uncover the Wonders Beyond the Guidebook&lt;/string&gt;&#10;    &lt;string name=&quot;next&quot;&gt;Next&lt;/string&gt;&#10;    &lt;string name=&quot;lets_explore_button&quot;&gt;Let\'s Explore&lt;/string&gt;&#10;&#10;    &lt;!-- Sign Up Page --&gt;&#10;    &lt;string name=&quot;sign_up&quot;&gt;Sign Up&lt;/string&gt;&#10;    &lt;string name=&quot;user_name&quot;&gt;User Name&lt;/string&gt;&#10;    &lt;string name=&quot;email_address&quot;&gt;Email Address&lt;/string&gt;&#10;    &lt;string name=&quot;new_password&quot;&gt;New Password&lt;/string&gt;&#10;    &lt;string name=&quot;retype_password&quot;&gt;Retype Password&lt;/string&gt;&#10;    &lt;string name=&quot;already_registered_login&quot;&gt;Already Registered? Login&lt;/string&gt;&#10;&#10;    &lt;!-- Onboarding --&gt;&#10;    &lt;string name=&quot;discover_sri_lanka_s_hidden_wonders&quot;&gt;Discover Sri Lanka\'s Hidden Wonders&lt;/string&gt;&#10;    &lt;string name=&quot;simple_paragraph_1&quot;&gt;Explore breathtaking destinations that are off the beaten path. From pristine beaches to ancient temples, discover the authentic beauty of Sri Lanka through local insights and hidden gems.&lt;/string&gt;&#10;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;&#10;    &lt;!-- Application Identity --&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Hidden Sri Lanka&lt;/string&gt;&#10;    &lt;string name=&quot;sID&quot;&gt;S23010526&lt;/string&gt;&#10;    &lt;string name=&quot;devName&quot;&gt;Asitha Kanchana Palliyaguru&lt;/string&gt;&#10;&#10;    &lt;!-- Google Maps API Configuration --&gt;&#10;    &lt;string name=&quot;google_maps_key&quot;&gt;AIzaSyDkxygECK5OFLmyPMKKZVe362toOuDkkH0&lt;/string&gt;&#10;&#10;    &lt;!-- Navigation Drawer --&gt;&#10;    &lt;string name=&quot;navigation_drawer_open&quot;&gt;Open Navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_close&quot;&gt;Close Navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;nav_home_title&quot;&gt;Home&lt;/string&gt;&#10;    &lt;string name=&quot;nav_settings_title&quot;&gt;Settings&lt;/string&gt;&#10;    &lt;string name=&quot;nav_explore_on_map_title&quot;&gt;Explore on Map&lt;/string&gt;&#10;&#10;    &lt;!-- Search Functionality --&gt;&#10;    &lt;string name=&quot;search_hint&quot;&gt;Search…&lt;/string&gt;&#10;    &lt;string name=&quot;searching_for_query&quot;&gt;Searching for: %1$s&lt;/string&gt;&#10;&#10;    &lt;!-- Authentication --&gt;&#10;    &lt;string name=&quot;Login&quot;&gt;Login&lt;/string&gt;&#10;    &lt;string name=&quot;sign_up&quot;&gt;Sign Up&lt;/string&gt;&#10;    &lt;string name=&quot;user_name&quot;&gt;User Name&lt;/string&gt;&#10;    &lt;string name=&quot;email_address&quot;&gt;Email Address&lt;/string&gt;&#10;    &lt;string name=&quot;new_password&quot;&gt;New Password&lt;/string&gt;&#10;    &lt;string name=&quot;retype_password&quot;&gt;Retype Password&lt;/string&gt;&#10;    &lt;string name=&quot;not_yet_registered_sign_up_now&quot;&gt;Not Yet Registered? Sign Up Now&lt;/string&gt;&#10;    &lt;string name=&quot;already_registered_login&quot;&gt;Already Registered? Login&lt;/string&gt;&#10;&#10;    &lt;!-- Onboarding --&gt;&#10;    &lt;string name=&quot;uncover_the_wonders_beyond_the_guidebook&quot;&gt;Uncover the Wonders Beyond the Guidebook&lt;/string&gt;&#10;    &lt;string name=&quot;discover_sri_lanka_s_hidden_wonders&quot;&gt;Discover Sri Lanka\'s Hidden Wonders&lt;/string&gt;&#10;    &lt;string name=&quot;simple_paragraph_1&quot;&gt;Explore breathtaking destinations that are off the beaten path. From pristine beaches to ancient temples, discover the authentic beauty of Sri Lanka through local insights and hidden gems.&lt;/string&gt;&#10;    &lt;string name=&quot;next&quot;&gt;Next&lt;/string&gt;&#10;    &lt;string name=&quot;lets_explore_button&quot;&gt;Let\'s Explore&lt;/string&gt;&#10;&#10;    &lt;!-- About Us Page --&gt;&#10;    &lt;string name=&quot;title_about_us&quot;&gt;About Us&lt;/string&gt;&#10;    &lt;string name=&quot;app_logo_description&quot;&gt;App Logo&lt;/string&gt;&#10;    &lt;string name=&quot;app_title&quot;&gt;Hidden Sri Lanka&lt;/string&gt;&#10;    &lt;string name=&quot;mission_title&quot;&gt;Mission &lt;/string&gt;&#10;    &lt;string name=&quot;aboutParagraph&quot;&gt;Hidden Sri Lanka is your ultimate mobile companion designed to help tourists discover and navigate the countless beautiful but lesser-known destinations across Sri Lanka. Our mission is to uncover the wonders beyond the guidebook, providing accessible and reliable information about hidden beaches, scenic hikes, and unique cultural sites, ensuring an enhanced tourist experience for every explorer.&lt;/string&gt;&#10;    &lt;string name=&quot;devBy&quot;&gt;Developed by: P.G.Asitha Kanchana\n(Student ID: S23010526)\nAs part of EEI4369 Mobile Application Development Design Project.&lt;/string&gt;&#10;    &lt;string name=&quot;contact_us_email&quot;&gt;Contact Us: asitha.contact.me@gmail.com&lt;/string&gt;&#10;&#10;    &lt;!-- Location Details --&gt;&#10;    &lt;string name=&quot;contributed_by&quot;&gt;Contributed by: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;added_on&quot;&gt;Added on: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;distance_unknown&quot;&gt;Distance unknown&lt;/string&gt;&#10;&#10;    &lt;!-- Legal and Support --&gt;&#10;    &lt;string name=&quot;privacy_policy&quot;&gt;Privacy Policy&lt;/string&gt;&#10;    &lt;string name=&quot;terms_of_service&quot;&gt;Terms of Service&lt;/string&gt;&#10;    &lt;string name=&quot;feature_privacy_policy&quot;&gt;Privacy Policy&lt;/string&gt;&#10;    &lt;string name=&quot;feature_terms_conditions&quot;&gt;Terms &amp;amp; Conditions&lt;/string&gt;&#10;    &lt;string name=&quot;feature_contact_us&quot;&gt;Contact Us&lt;/string&gt;&#10;    &lt;string name=&quot;coming_soon_suffix&quot;&gt;feature is coming soon!&lt;/string&gt;&#10;&#10;    &lt;!-- Map Functionality --&gt;&#10;    &lt;string name=&quot;my_location&quot;&gt;My Location&lt;/string&gt;&#10;    &lt;string name=&quot;map_type&quot;&gt;Map Type&lt;/string&gt;&#10;    &lt;string name=&quot;toggle_clustering&quot;&gt;Toggle Clustering&lt;/string&gt;&#10;    &lt;string name=&quot;filter_options&quot;&gt;Filter Options&lt;/string&gt;&#10;    &lt;string name=&quot;satellite_view&quot;&gt;Satellite View&lt;/string&gt;&#10;    &lt;string name=&quot;terrain_view&quot;&gt;Terrain View&lt;/string&gt;&#10;    &lt;string name=&quot;normal_view&quot;&gt;Normal View&lt;/string&gt;&#10;    &lt;string name=&quot;clustering_enabled&quot;&gt;Clustering Enabled&lt;/string&gt;&#10;    &lt;string name=&quot;clustering_disabled&quot;&gt;Clustering Disabled&lt;/string&gt;&#10;    &lt;string name=&quot;filter_options_coming_soon&quot;&gt;Filter options coming soon!&lt;/string&gt;&#10;    &lt;string name=&quot;location_not_available&quot;&gt;Location not available&lt;/string&gt;&#10;    &lt;string name=&quot;location_permission_denied&quot;&gt;Location permission denied&lt;/string&gt;&#10;    &lt;string name=&quot;failed_to_load_attractions&quot;&gt;Failed to load attractions&lt;/string&gt;&#10;    &lt;string name=&quot;lets_add_some_attractions&quot;&gt;Let\'s add some attractions! &lt;/string&gt;&#10;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>