<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/GooglePhotosHelper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/GooglePhotosHelper.java" />
              <option name="updatedContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.app.Activity;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.util.Log;&#10;&#10;import androidx.annotation.NonNull;&#10;&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInAccount;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions;&#10;import com.google.android.gms.common.api.Scope;&#10;import com.google.android.gms.tasks.Task;&#10;import com.google.api.client.extensions.android.http.AndroidHttp;&#10;import com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential;&#10;import com.google.api.client.json.gson.GsonFactory;&#10;import com.google.api.services.photoslibrary.v1.PhotosLibrary;&#10;import com.google.api.services.photoslibrary.v1.PhotosLibraryScopes;&#10;import com.google.api.services.photoslibrary.v1.model.ListSharedAlbumsResponse;&#10;import com.google.api.services.photoslibrary.v1.model.SearchMediaItemsRequest;&#10;import com.google.api.services.photoslibrary.v1.model.SearchMediaItemsResponse;&#10;import com.google.api.services.photoslibrary.v1.model.SharedAlbum;&#10;import com.google.api.services.photoslibrary.v1.model.MediaItem;&#10;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.concurrent.ExecutorService;&#10;import java.util.concurrent.Executors;&#10;&#10;/**&#10; * Helper class for Google Photos integration&#10; * Handles authentication and photo retrieval from shared albums&#10; */&#10;public class GooglePhotosHelper {&#10;    &#10;    private static final String TAG = &quot;GooglePhotosHelper&quot;;&#10;    private static final int RC_GOOGLE_PHOTOS_SIGN_IN = 9001;&#10;    &#10;    private Context context;&#10;    private GoogleSignInClient signInClient;&#10;    private PhotosLibrary photosLibraryService;&#10;    private ExecutorService executorService;&#10;    &#10;    // Interface for handling results&#10;    public interface GooglePhotosCallback {&#10;        void onAuthenticationSuccess();&#10;        void onAuthenticationFailed(String error);&#10;        void onPhotosLoaded(List&lt;PhotoItem&gt; photos);&#10;        void onError(String error);&#10;    }&#10;    &#10;    // Data class for photo items&#10;    public static class PhotoItem {&#10;        private String id;&#10;        private String baseUrl;&#10;        private String filename;&#10;        private String description;&#10;        private String mimeType;&#10;        &#10;        public PhotoItem(String id, String baseUrl, String filename, String description, String mimeType) {&#10;            this.id = id;&#10;            this.baseUrl = baseUrl;&#10;            this.filename = filename;&#10;            this.description = description;&#10;            this.mimeType = mimeType;&#10;        }&#10;        &#10;        // Getters&#10;        public String getId() { return id; }&#10;        public String getBaseUrl() { return baseUrl; }&#10;        public String getFilename() { return filename; }&#10;        public String getDescription() { return description; }&#10;        public String getMimeType() { return mimeType; }&#10;        &#10;        // Get downloadable URL with specific dimensions&#10;        public String getDownloadUrl(int width, int height) {&#10;            return baseUrl + &quot;=w&quot; + width + &quot;-h&quot; + height;&#10;        }&#10;        &#10;        // Get thumbnail URL&#10;        public String getThumbnailUrl() {&#10;            return baseUrl + &quot;=w300-h300-c&quot;;&#10;        }&#10;        &#10;        // Get full resolution URL&#10;        public String getFullResolutionUrl() {&#10;            return baseUrl + &quot;=d&quot;;&#10;        }&#10;    }&#10;    &#10;    public GooglePhotosHelper(Context context) {&#10;        this.context = context;&#10;        this.executorService = Executors.newSingleThreadExecutor();&#10;        initializeGoogleSignIn();&#10;    }&#10;    &#10;    private void initializeGoogleSignIn() {&#10;        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                .requestEmail()&#10;                .requestScopes(new Scope(PhotosLibraryScopes.PHOTOSLIBRARY_READONLY))&#10;                .build();&#10;        &#10;        signInClient = GoogleSignIn.getClient(context, gso);&#10;    }&#10;    &#10;    /**&#10;     * Check if user is already signed in to Google Photos&#10;     */&#10;    public boolean isSignedIn() {&#10;        GoogleSignInAccount account = GoogleSignIn.getLastSignedInAccount(context);&#10;        return account != null &amp;&amp; &#10;               GoogleSignIn.hasPermissions(account, new Scope(PhotosLibraryScopes.PHOTOSLIBRARY_READONLY));&#10;    }&#10;    &#10;    /**&#10;     * Sign in to Google Photos&#10;     */&#10;    public void signIn(Activity activity, GooglePhotosCallback callback) {&#10;        if (isSignedIn()) {&#10;            initializePhotosService();&#10;            callback.onAuthenticationSuccess();&#10;            return;&#10;        }&#10;        &#10;        Intent signInIntent = signInClient.getSignInIntent();&#10;        activity.startActivityForResult(signInIntent, RC_GOOGLE_PHOTOS_SIGN_IN);&#10;    }&#10;    &#10;    /**&#10;     * Handle sign-in result&#10;     */&#10;    public void handleSignInResult(Intent data, GooglePhotosCallback callback) {&#10;        Task&lt;GoogleSignInAccount&gt; task = GoogleSignIn.getSignedInAccountFromIntent(data);&#10;        &#10;        try {&#10;            GoogleSignInAccount account = task.getResult();&#10;            if (account != null) {&#10;                Log.d(TAG, &quot;Google Photos sign-in successful&quot;);&#10;                initializePhotosService();&#10;                callback.onAuthenticationSuccess();&#10;            } else {&#10;                callback.onAuthenticationFailed(&quot;Failed to sign in to Google Photos&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Google Photos sign-in failed&quot;, e);&#10;            callback.onAuthenticationFailed(&quot;Sign-in failed: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    private void initializePhotosService() {&#10;        GoogleSignInAccount account = GoogleSignIn.getLastSignedInAccount(context);&#10;        if (account == null) {&#10;            Log.e(TAG, &quot;No signed-in account found&quot;);&#10;            return;&#10;        }&#10;        &#10;        GoogleAccountCredential credential = GoogleAccountCredential.usingOAuth2(&#10;                context, Arrays.asList(PhotosLibraryScopes.PHOTOSLIBRARY_READONLY));&#10;        credential.setSelectedAccount(account.getAccount());&#10;        &#10;        photosLibraryService = new PhotosLibrary.Builder(&#10;                AndroidHttp.newCompatibleTransport(),&#10;                GsonFactory.getDefaultInstance(),&#10;                credential)&#10;                .setApplicationName(&quot;Hidden Sri Lanka&quot;)&#10;                .build();&#10;    }&#10;    &#10;    /**&#10;     * Load shared albums from Google Photos&#10;     */&#10;    public void loadSharedAlbums(GooglePhotosCallback callback) {&#10;        if (photosLibraryService == null) {&#10;            callback.onError(&quot;Google Photos service not initialized. Please sign in first.&quot;);&#10;            return;&#10;        }&#10;        &#10;        executorService.execute(() -&gt; {&#10;            try {&#10;                ListSharedAlbumsResponse response = photosLibraryService.sharedAlbums().list().execute();&#10;                List&lt;SharedAlbum&gt; albums = response.getSharedAlbums();&#10;                &#10;                if (albums != null &amp;&amp; !albums.isEmpty()) {&#10;                    // For demo, load photos from the first shared album&#10;                    loadPhotosFromAlbum(albums.get(0).getId(), callback);&#10;                } else {&#10;                    ((Activity) context).runOnUiThread(() -&gt; &#10;                        callback.onError(&quot;No shared albums found. Please make sure you have shared albums in Google Photos.&quot;));&#10;                }&#10;                &#10;            } catch (IOException e) {&#10;                Log.e(TAG, &quot;Error loading shared albums&quot;, e);&#10;                ((Activity) context).runOnUiThread(() -&gt; &#10;                    callback.onError(&quot;Failed to load shared albums: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;    &#10;    /**&#10;     * Load all recent photos from Google Photos (not album-specific)&#10;     */&#10;    public void loadRecentPhotos(GooglePhotosCallback callback) {&#10;        loadRecentPhotos(20, callback); // Load 20 recent photos&#10;    }&#10;    &#10;    /**&#10;     * Load recent photos with specified count&#10;     */&#10;    public void loadRecentPhotos(int pageSize, GooglePhotosCallback callback) {&#10;        if (photosLibraryService == null) {&#10;            callback.onError(&quot;Google Photos service not initialized. Please sign in first.&quot;);&#10;            return;&#10;        }&#10;        &#10;        executorService.execute(() -&gt; {&#10;            try {&#10;                SearchMediaItemsRequest request = new SearchMediaItemsRequest()&#10;                        .setPageSize(pageSize);&#10;                &#10;                SearchMediaItemsResponse response = photosLibraryService.mediaItems().search(request).execute();&#10;                List&lt;MediaItem&gt; mediaItems = response.getMediaItems();&#10;                &#10;                List&lt;PhotoItem&gt; photoItems = new ArrayList&lt;&gt;();&#10;                if (mediaItems != null) {&#10;                    for (MediaItem item : mediaItems) {&#10;                        // Only include images (not videos)&#10;                        if (item.getMimeType() != null &amp;&amp; item.getMimeType().startsWith(&quot;image/&quot;)) {&#10;                            PhotoItem photoItem = new PhotoItem(&#10;                                    item.getId(),&#10;                                    item.getBaseUrl(),&#10;                                    item.getFilename(),&#10;                                    item.getDescription(),&#10;                                    item.getMimeType()&#10;                            );&#10;                            photoItems.add(photoItem);&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                ((Activity) context).runOnUiThread(() -&gt; callback.onPhotosLoaded(photoItems));&#10;                &#10;            } catch (IOException e) {&#10;                Log.e(TAG, &quot;Error loading recent photos&quot;, e);&#10;                ((Activity) context).runOnUiThread(() -&gt; &#10;                    callback.onError(&quot;Failed to load photos: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;    &#10;    private void loadPhotosFromAlbum(String albumId, GooglePhotosCallback callback) {&#10;        executorService.execute(() -&gt; {&#10;            try {&#10;                SearchMediaItemsRequest request = new SearchMediaItemsRequest()&#10;                        .setAlbumId(albumId)&#10;                        .setPageSize(50);&#10;                &#10;                SearchMediaItemsResponse response = photosLibraryService.mediaItems().search(request).execute();&#10;                List&lt;MediaItem&gt; mediaItems = response.getMediaItems();&#10;                &#10;                List&lt;PhotoItem&gt; photoItems = new ArrayList&lt;&gt;();&#10;                if (mediaItems != null) {&#10;                    for (MediaItem item : mediaItems) {&#10;                        if (item.getMimeType() != null &amp;&amp; item.getMimeType().startsWith(&quot;image/&quot;)) {&#10;                            PhotoItem photoItem = new PhotoItem(&#10;                                    item.getId(),&#10;                                    item.getBaseUrl(),&#10;                                    item.getFilename(),&#10;                                    item.getDescription(),&#10;                                    item.getMimeType()&#10;                            );&#10;                            photoItems.add(photoItem);&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                ((Activity) context).runOnUiThread(() -&gt; callback.onPhotosLoaded(photoItems));&#10;                &#10;            } catch (IOException e) {&#10;                Log.e(TAG, &quot;Error loading photos from album&quot;, e);&#10;                ((Activity) context).runOnUiThread(() -&gt; &#10;                    callback.onError(&quot;Failed to load album photos: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;    &#10;    /**&#10;     * Sign out from Google Photos&#10;     */&#10;    public void signOut(GooglePhotosCallback callback) {&#10;        signInClient.signOut().addOnCompleteListener(task -&gt; {&#10;            photosLibraryService = null;&#10;            Log.d(TAG, &quot;Signed out from Google Photos&quot;);&#10;        });&#10;    }&#10;    &#10;    /**&#10;     * Clean up resources&#10;     */&#10;    public void cleanup() {&#10;        if (executorService != null &amp;&amp; !executorService.isShutdown()) {&#10;            executorService.shutdown();&#10;        }&#10;    }&#10;    &#10;    public static int getSignInRequestCode() {&#10;        return RC_GOOGLE_PHOTOS_SIGN_IN;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/GooglePhotosUrlHelper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/GooglePhotosUrlHelper.java" />
              <option name="originalContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.app.AlertDialog;&#10;import android.content.Context;&#10;import android.os.AsyncTask;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import android.widget.Toast;&#10;import com.bumptech.glide.Glide;&#10;import com.bumptech.glide.load.engine.DiskCacheStrategy;&#10;import java.io.BufferedReader;&#10;import java.io.InputStreamReader;&#10;import java.net.HttpURLConnection;&#10;import java.net.URL;&#10;import java.util.regex.Pattern;&#10;import java.util.regex.Matcher;&#10;&#10;/**&#10; * Simple helper class for Google Photos URL integration&#10; * This class helps users add Google Photos shareable links as image sources&#10; * Perfect for Firebase free tier - no storage costs, just URL references&#10; */&#10;public class GooglePhotosUrlHelper {&#10;&#10;    /**&#10;     * Shows a dialog to input Google Photos share URL&#10;     * Validates the URL and loads the image preview&#10;     */&#10;    public static void showGooglePhotosUrlDialog(Context context, ImageUrlCallback callback) {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(context);&#10;        builder.setTitle(&quot;Add Google Photos Image&quot;);&#10;        builder.setMessage(&quot;How to add images:\n\n&quot; +&#10;                &quot;Method 1 - Google Photos Share Link:\n&quot; +&#10;                &quot;1. Open Google Photos app/website\n&quot; +&#10;                &quot;2. Select your image\n&quot; +&#10;                &quot;3. Tap Share → Copy link\n&quot; +&#10;                &quot;4. Paste the link below\n\n&quot; +&#10;                &quot;Method 2 - Direct Image URL:\n&quot; +&#10;                &quot;Use any direct image URL from the web\n\n&quot; +&#10;                &quot;Both types of links are supported!&quot;);&#10;&#10;        // Create input field&#10;        EditText urlInput = new EditText(context);&#10;        urlInput.setHint(&quot;Paste Google Photos link or direct image URL...&quot;);&#10;        urlInput.setPadding(50, 30, 50, 30);&#10;        builder.setView(urlInput);&#10;&#10;        // Add buttons&#10;        builder.setPositiveButton(&quot;Add Image&quot;, (dialog, which) -&gt; {&#10;            String url = urlInput.getText().toString().trim();&#10;            if (validateAnyImageUrl(url)) {&#10;                processImageUrl(context, url, callback);&#10;            } else {&#10;                Toast.makeText(context, &quot;Please enter a valid image URL or Google Photos link&quot;, Toast.LENGTH_LONG).show();&#10;            }&#10;        });&#10;&#10;        builder.setNegativeButton(&quot;Cancel&quot;, null);&#10;        builder.show();&#10;    }&#10;&#10;    /**&#10;     * Public method to process image URL - converts Google Photos share links if needed&#10;     * This method handles both Google Photos links and direct image URLs&#10;     */&#10;    public static void processImageUrl(Context context, String url, ImageUrlCallback callback) {&#10;        if (isGooglePhotosShareLink(url)) {&#10;            // Show loading message&#10;            Toast.makeText(context, &quot;Processing Google Photos link...&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;            // Extract direct image URL from share link&#10;            new ExtractImageUrlTask(context, callback).execute(url);&#10;        } else {&#10;            // Direct image URL - use as is&#10;            callback.onUrlSelected(url);&#10;            Toast.makeText(context, &quot;Image processed successfully!&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Checks if URL is a Google Photos share link&#10;     */&#10;    private static boolean isGooglePhotosShareLink(String url) {&#10;        return url != null &amp;&amp; (&#10;            url.contains(&quot;photos.app.goo.gl&quot;) ||&#10;            url.contains(&quot;photos.google.com/share&quot;) ||&#10;            url.contains(&quot;photos.google.com/u/&quot;) ||&#10;            url.contains(&quot;photos.google.com/album&quot;)&#10;        );&#10;    }&#10;&#10;    /**&#10;     * Validates if the URL could be any type of image URL&#10;     */&#10;    private static boolean validateAnyImageUrl(String url) {&#10;        if (url == null || url.isEmpty()) {&#10;            return false;&#10;        }&#10;&#10;        String lowerUrl = url.toLowerCase();&#10;        &#10;        // Accept Google Photos links&#10;        if (isGooglePhotosShareLink(url)) {&#10;            return true;&#10;        }&#10;&#10;        // Accept direct image URLs&#10;        if (lowerUrl.matches(&quot;.*\\.(jpg|jpeg|png|gif|bmp|webp)(\\?.*)?$&quot;)) {&#10;            return true;&#10;        }&#10;        &#10;        // Accept Google user content URLs&#10;        if (lowerUrl.contains(&quot;googleusercontent.com&quot;)) {&#10;            return true;&#10;        }&#10;        &#10;        // Accept common image hosting services&#10;        if (lowerUrl.contains(&quot;imgur.com&quot;) ||&#10;            lowerUrl.contains(&quot;flickr.com&quot;) ||&#10;            lowerUrl.contains(&quot;unsplash.com&quot;) ||&#10;            lowerUrl.contains(&quot;pexels.com&quot;) ||&#10;            lowerUrl.contains(&quot;cloudinary.com&quot;) ||&#10;            lowerUrl.contains(&quot;amazonaws.com&quot;)) {&#10;            return true;&#10;        }&#10;&#10;        // For other URLs, basic validation&#10;        return lowerUrl.startsWith(&quot;http&quot;) &amp;&amp; !lowerUrl.contains(&quot;javascript:&quot;);&#10;    }&#10;&#10;    /**&#10;     * AsyncTask to extract direct image URL from Google Photos share link&#10;     */&#10;    private static class ExtractImageUrlTask extends AsyncTask&lt;String, Void, String&gt; {&#10;        private Context context;&#10;        private ImageUrlCallback callback;&#10;            this.callback = callback;&#10;        }&#10;&#10;        @Override&#10;        protected String doInBackground(String... urls) {&#10;            try {&#10;                String shareUrl = urls[0];&#10;&#10;                // as many image loading libraries can handle the redirects properly&#10;                // Method 1: Try to follow redirects to get the actual URL&#10;                if (finalUrl != null &amp;&amp; !finalUrl.equals(shareUrl)) {&#10;&#10;                    if (finalUrl.contains(&quot;googleusercontent.com&quot;) || finalUrl.contains(&quot;ggpht.com&quot;)) {&#10;&#10;                    }&#10;                }&#10;&#10;                // Method 2: Try to extract from HTML content&#10;                String htmlExtractedUrl = extractImageFromHtml(shareUrl);&#10;                if (htmlExtractedUrl != null &amp;&amp; !htmlExtractedUrl.isEmpty()) {&#10;                    return htmlExtractedUrl;&#10;                }&#10;&#10;                // Method 3: Fallback - return original URL as many modern image loaders can handle redirects&#10;                // Google Photos share links often work directly in image loading libraries&#10;                return shareUrl;&#10;&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;                // Return original URL as fallback&#10;                return urls[0];&#10;            }&#10;                return urls[0];&#10;&#10;                return urls[0];&#10;        protected void onPostExecute(String result) {&#10;                return urls[0];&#10;                callback.onUrlSelected(result);&#10;                Toast.makeText(context, &quot;Google Photos link processed - attempting to load image...&quot;, Toast.LENGTH_SHORT).show();&#10;            } else {&#10;                // Fallback - use original URL&#10;                callback.onUrlSelected(urls[0]);&#10;                Toast.makeText(context, &quot;Using original Google Photos link...&quot;, Toast.LENGTH_SHORT).show();&#10;                callback.onUrlSelected(urls[0]);&#10;        }&#10;                callback.onUrlSelected(urls[0]);&#10;&#10;                callback.onUrlSelected(urls[0]);&#10;     * Extract image ID from Google Photos URL&#10;     */&#10;    private static String extractImageIdFromUrl(String url) {&#10;        try {&#10;            // Pattern for Google Photos share URLs&#10;            Pattern pattern = Pattern.compile(&quot;photos\\.app\\.goo\\.gl/([a-zA-Z0-9]+)&quot;);&#10;            Matcher matcher = pattern.matcher(url);&#10;            if (matcher.find()) {&#10;                return matcher.group(1);&#10;            }&#10;&#10;            // Try other patterns&#10;            pattern = Pattern.compile(&quot;/photo/([a-zA-Z0-9_-]+)&quot;);&#10;            matcher = pattern.matcher(url);&#10;            if (matcher.find()) {&#10;                return matcher.group(1);&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        return null;&#10;    }&#10;&#10;    /**&#10;     * Follow redirects to get final URL&#10;     */&#10;    private static String followRedirects(String urlString) {&#10;        try {&#10;            URL url = new URL(urlString);&#10;            HttpURLConnection connection = (HttpURLConnection) url.openConnection();&#10;            connection.setInstanceFollowRedirects(true);&#10;            connection.setRequestMethod(&quot;GET&quot;);&#10;            connection.connect();&#10;&#10;            return connection.getURL().toString();&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            return null;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Try to extract image URL from HTML content&#10;     */&#10;    private static String extractImageFromHtml(String urlString) {&#10;        try {&#10;            URL url = new URL(urlString);&#10;            HttpURLConnection connection = (HttpURLConnection) url.openConnection();&#10;            connection.setRequestMethod(&quot;GET&quot;);&#10;            connection.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0&quot;);&#10;&#10;            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));&#10;            StringBuilder html = new StringBuilder();&#10;            String line;&#10;&#10;            while ((line = reader.readLine()) != null) {&#10;                html.append(line);&#10;&#10;                // Look for image URLs in the HTML&#10;                if (line.contains(&quot;googleusercontent.com&quot;)) {&#10;                    Pattern pattern = Pattern.compile(&quot;https://lh[0-9]\\.googleusercontent\\.com/[^\&quot;'\\s]+&quot;);&#10;                    Matcher matcher = pattern.matcher(line);&#10;                    if (matcher.find()) {&#10;                        return matcher.group(0);&#10;                    }&#10;                }&#10;            }&#10;            reader.close();&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        return null;&#10;    }&#10;&#10;    /**&#10;     * Load image from URL using Glide with error handling&#10;     */&#10;    public static void loadImageFromUrl(Context context, String url, ImageView imageView) {&#10;        Glide.with(context)&#10;            .load(url)&#10;            .diskCacheStrategy(DiskCacheStrategy.ALL)&#10;            .into(imageView);&#10;    }&#10;&#10;    /**&#10;     * Interface for URL selection callback&#10;     */&#10;    public interface ImageUrlCallback {&#10;        void onUrlSelected(String imageUrl);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.app.AlertDialog;&#10;import android.content.Context;&#10;import android.os.AsyncTask;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import android.widget.Toast;&#10;import com.bumptech.glide.Glide;&#10;import com.bumptech.glide.load.engine.DiskCacheStrategy;&#10;import java.io.BufferedReader;&#10;import java.io.InputStreamReader;&#10;import java.net.HttpURLConnection;&#10;import java.net.URL;&#10;import java.util.regex.Pattern;&#10;import java.util.regex.Matcher;&#10;&#10;/**&#10; * Simple helper class for Google Photos URL integration&#10; * This class helps users add Google Photos shareable links as image sources&#10; * Perfect for Firebase free tier - no storage costs, just URL references&#10; */&#10;public class GooglePhotosUrlHelper {&#10;&#10;    /**&#10;     * Shows a dialog to input Google Photos share URL&#10;     * Validates the URL and loads the image preview&#10;     */&#10;    public static void showGooglePhotosUrlDialog(Context context, ImageUrlCallback callback) {&#10;        AlertDialog.Builder builder = new AlertDialog.Builder(context);&#10;        builder.setTitle(&quot;Add Google Photos Image&quot;);&#10;        builder.setMessage(&quot;How to add images:\n\n&quot; +&#10;                &quot;Method 1 - Google Photos Share Link:\n&quot; +&#10;                &quot;1. Open Google Photos app/website\n&quot; +&#10;                &quot;2. Select your image\n&quot; +&#10;                &quot;3. Tap Share → Copy link\n&quot; +&#10;                &quot;4. Paste the link below\n\n&quot; +&#10;                &quot;Method 2 - Direct Image URL:\n&quot; +&#10;                &quot;Use any direct image URL from the web\n\n&quot; +&#10;                &quot;Both types of links are supported!&quot;);&#10;&#10;        // Create input field&#10;        EditText urlInput = new EditText(context);&#10;        urlInput.setHint(&quot;Paste Google Photos link or direct image URL...&quot;);&#10;        urlInput.setPadding(50, 30, 50, 30);&#10;        builder.setView(urlInput);&#10;&#10;        // Add buttons&#10;        builder.setPositiveButton(&quot;Add Image&quot;, (dialog, which) -&gt; {&#10;            String url = urlInput.getText().toString().trim();&#10;            if (validateAnyImageUrl(url)) {&#10;                processImageUrl(context, url, callback);&#10;            } else {&#10;                Toast.makeText(context, &quot;Please enter a valid image URL or Google Photos link&quot;, Toast.LENGTH_LONG).show();&#10;            }&#10;        });&#10;&#10;        builder.setNegativeButton(&quot;Cancel&quot;, null);&#10;        builder.show();&#10;    }&#10;&#10;    /**&#10;     * Public method to process image URL - converts Google Photos share links if needed&#10;     * This method handles both Google Photos links and direct image URLs&#10;     */&#10;    public static void processImageUrl(Context context, String url, ImageUrlCallback callback) {&#10;        if (isGooglePhotosShareLink(url)) {&#10;            // Show loading message&#10;            Toast.makeText(context, &quot;Processing Google Photos link...&quot;, Toast.LENGTH_SHORT).show();&#10;&#10;            // Extract direct image URL from share link&#10;            new ExtractImageUrlTask(context, callback).execute(url);&#10;        } else {&#10;            // Direct image URL - use as is&#10;            callback.onUrlSelected(url);&#10;            Toast.makeText(context, &quot;Image processed successfully!&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Checks if URL is a Google Photos share link&#10;     */&#10;    private static boolean isGooglePhotosShareLink(String url) {&#10;        return url != null &amp;&amp; (&#10;            url.contains(&quot;photos.app.goo.gl&quot;) ||&#10;            url.contains(&quot;photos.google.com/share&quot;) ||&#10;            url.contains(&quot;photos.google.com/u/&quot;) ||&#10;            url.contains(&quot;photos.google.com/album&quot;)&#10;        );&#10;    }&#10;&#10;    /**&#10;     * Validates if the URL could be any type of image URL&#10;     */&#10;    private static boolean validateAnyImageUrl(String url) {&#10;        if (url == null || url.isEmpty()) {&#10;            return false;&#10;        }&#10;&#10;        String lowerUrl = url.toLowerCase();&#10;        &#10;        // Accept Google Photos links&#10;        if (isGooglePhotosShareLink(url)) {&#10;            return true;&#10;        }&#10;&#10;        // Accept direct image URLs&#10;        if (lowerUrl.matches(&quot;.*\\.(jpg|jpeg|png|gif|bmp|webp)(\\?.*)?$&quot;)) {&#10;            return true;&#10;        }&#10;        &#10;        // Accept Google user content URLs&#10;        if (lowerUrl.contains(&quot;googleusercontent.com&quot;)) {&#10;            return true;&#10;        }&#10;        &#10;        // Accept common image hosting services&#10;        if (lowerUrl.contains(&quot;imgur.com&quot;) ||&#10;            lowerUrl.contains(&quot;flickr.com&quot;) ||&#10;            lowerUrl.contains(&quot;unsplash.com&quot;) ||&#10;            lowerUrl.contains(&quot;pexels.com&quot;) ||&#10;            lowerUrl.contains(&quot;cloudinary.com&quot;) ||&#10;            lowerUrl.contains(&quot;amazonaws.com&quot;)) {&#10;            return true;&#10;        }&#10;&#10;        // For other URLs, basic validation&#10;        return lowerUrl.startsWith(&quot;http&quot;) &amp;&amp; !lowerUrl.contains(&quot;javascript:&quot;);&#10;    }&#10;&#10;    /**&#10;     * AsyncTask to extract direct image URL from Google Photos share link&#10;     */&#10;    private static class ExtractImageUrlTask extends AsyncTask&lt;String, Void, String&gt; {&#10;        private Context context;&#10;        private ImageUrlCallback callback;&#10;        private String originalUrl; // Store original URL for fallback&#10;&#10;        public ExtractImageUrlTask(Context context, ImageUrlCallback callback) {&#10;            this.context = context;&#10;            this.callback = callback;&#10;        }&#10;&#10;        @Override&#10;        protected String doInBackground(String... urls) {&#10;            try {&#10;                String shareUrl = urls[0];&#10;                originalUrl = shareUrl; // Store for potential use in onPostExecute&#10;&#10;                // For Google Photos share links, the best approach is often to use the original URL&#10;                // as many image loading libraries can handle the redirects properly&#10;                &#10;                // Method 1: Try to follow redirects to get the actual URL&#10;                String finalUrl = followRedirects(shareUrl);&#10;                if (finalUrl != null &amp;&amp; !finalUrl.equals(shareUrl)) {&#10;                    // If we got a different URL, it might be the direct image URL&#10;                    if (finalUrl.contains(&quot;googleusercontent.com&quot;) || finalUrl.contains(&quot;ggpht.com&quot;)) {&#10;                        return finalUrl;&#10;                    }&#10;                }&#10;&#10;                // Method 2: Try to extract from HTML content&#10;                String htmlExtractedUrl = extractImageFromHtml(shareUrl);&#10;                if (htmlExtractedUrl != null &amp;&amp; !htmlExtractedUrl.isEmpty()) {&#10;                    return htmlExtractedUrl;&#10;                }&#10;&#10;                // Method 3: Fallback - return original URL as many modern image loaders can handle redirects&#10;                // Google Photos share links often work directly in image loading libraries&#10;                return shareUrl;&#10;&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;                // Return original URL as fallback&#10;                return originalUrl != null ? originalUrl : urls[0];&#10;            }&#10;        }&#10;&#10;        @Override&#10;        protected void onPostExecute(String result) {&#10;            if (result != null &amp;&amp; !result.isEmpty()) {&#10;                callback.onUrlSelected(result);&#10;                Toast.makeText(context, &quot;Google Photos link processed - attempting to load image...&quot;, Toast.LENGTH_SHORT).show();&#10;            } else {&#10;                // Fallback - use original URL&#10;                callback.onUrlSelected(originalUrl);&#10;                Toast.makeText(context, &quot;Using original Google Photos link...&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Extract image ID from Google Photos URL&#10;     */&#10;    private static String extractImageIdFromUrl(String url) {&#10;        try {&#10;            // Pattern for Google Photos share URLs&#10;            Pattern pattern = Pattern.compile(&quot;photos\\.app\\.goo\\.gl/([a-zA-Z0-9]+)&quot;);&#10;            Matcher matcher = pattern.matcher(url);&#10;            if (matcher.find()) {&#10;                return matcher.group(1);&#10;            }&#10;&#10;            // Try other patterns&#10;            pattern = Pattern.compile(&quot;/photo/([a-zA-Z0-9_-]+)&quot;);&#10;            matcher = pattern.matcher(url);&#10;            if (matcher.find()) {&#10;                return matcher.group(1);&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        return null;&#10;    }&#10;&#10;    /**&#10;     * Follow redirects to get final URL&#10;     */&#10;    private static String followRedirects(String urlString) {&#10;        try {&#10;            URL url = new URL(urlString);&#10;            HttpURLConnection connection = (HttpURLConnection) url.openConnection();&#10;            connection.setInstanceFollowRedirects(true);&#10;            connection.setRequestMethod(&quot;GET&quot;);&#10;            connection.connect();&#10;&#10;            return connection.getURL().toString();&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            return null;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Try to extract image URL from HTML content&#10;     */&#10;    private static String extractImageFromHtml(String urlString) {&#10;        try {&#10;            URL url = new URL(urlString);&#10;            HttpURLConnection connection = (HttpURLConnection) url.openConnection();&#10;            connection.setRequestMethod(&quot;GET&quot;);&#10;            connection.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0&quot;);&#10;&#10;            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));&#10;            StringBuilder html = new StringBuilder();&#10;            String line;&#10;&#10;            while ((line = reader.readLine()) != null) {&#10;                html.append(line);&#10;&#10;                // Look for image URLs in the HTML&#10;                if (line.contains(&quot;googleusercontent.com&quot;)) {&#10;                    Pattern pattern = Pattern.compile(&quot;https://lh[0-9]\\.googleusercontent\\.com/[^\&quot;'\\s]+&quot;);&#10;                    Matcher matcher = pattern.matcher(line);&#10;                    if (matcher.find()) {&#10;                        return matcher.group(0);&#10;                    }&#10;                }&#10;            }&#10;            reader.close();&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        return null;&#10;    }&#10;&#10;    /**&#10;     * Load image from URL using Glide with error handling&#10;     */&#10;    public static void loadImageFromUrl(Context context, String url, ImageView imageView) {&#10;        Glide.with(context)&#10;            .load(url)&#10;            .diskCacheStrategy(DiskCacheStrategy.ALL)&#10;            .into(imageView);&#10;    }&#10;&#10;    /**&#10;     * Interface for URL selection callback&#10;     */&#10;    public interface ImageUrlCallback {&#10;        void onUrlSelected(String imageUrl);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/utils/GooglePhotosHelper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/utils/GooglePhotosHelper.java" />
              <option name="updatedContent" value="// This file has been removed as it's not needed for Google Photos shared link functionality&#10;// The Google Photos integration is now handled directly in AddLocationActivity.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/grow_our_database.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/grow_our_database.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;200dp&quot;&#10;    android:height=&quot;150dp&quot;&#10;    android:viewportWidth=&quot;200&quot;&#10;    android:viewportHeight=&quot;150&quot;&gt;&#10;    &#10;    &lt;!-- Background --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#E8F5E8&quot;&#10;        android:pathData=&quot;M0,0h200v150h-200z&quot;/&gt;&#10;    &#10;    &lt;!-- Tree/Growth Icon --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M100,120c-2,0 -4,-2 -4,-4v-20c0,-2 2,-4 4,-4s4,2 4,4v20c0,2 -2,4 -4,4z&quot;/&gt;&#10;    &#10;    &lt;!-- Leaves --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#66BB6A&quot;&#10;        android:pathData=&quot;M100,90c-8,0 -15,-7 -15,-15s7,-15 15,-15s15,7 15,15s-7,15 -15,15z&quot;/&gt;&#10;    &#10;    &lt;path&#10;        android:fillColor=&quot;#81C784&quot;&#10;        android:pathData=&quot;M90,85c-6,0 -12,-5 -12,-12s6,-12 12,-12s12,5 12,12s-6,12 -12,12z&quot;/&gt;&#10;    &#10;    &lt;path&#10;        android:fillColor=&quot;#81C784&quot;&#10;        android:pathData=&quot;M110,85c-6,0 -12,-5 -12,-12s6,-12 12,-12s12,5 12,12s-6,12 -12,12z&quot;/&gt;&#10;    &#10;    &lt;!-- Plus icon in center --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#2E7D32&quot;&#10;        android:pathData=&quot;M100,50v20m-10,-10h20&quot;&#10;        android:strokeWidth=&quot;3&quot;&#10;        android:strokeColor=&quot;#2E7D32&quot;/&gt;&#10;    &#10;    &lt;!-- Text area suggestion --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#C8E6C9&quot;&#10;        android:pathData=&quot;M30,130h140v15h-140z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>