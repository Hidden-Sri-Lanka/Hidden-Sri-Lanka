<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/README.md" />
              <option name="originalContent" value="# Hidden Sri Lanka Mobile App&#10;&#10;### Change Log &#10;- Date : 2025/6/18 11.21&#10;- Changes Made : github Repostitory Initialized &#10;- Auther : Asitha Kanchana&#10;" />
              <option name="updatedContent" value="# Hidden Sri Lanka Mobile App&#10;&#10;##  Android Application Module&#10;&#10;This directory contains the main Android application code for the Hidden Sri Lanka project, developed as part of my Mobile Application Development course at OUSL.&#10;&#10;## ️ Project Structure&#10;&#10;```&#10;app/&#10;├── src/main/java/com/s23010526/hiddensrilanka/&#10;│   ├── Activities/&#10;│   │   ├── MainActivity.java&#10;│   │   ├── HomeActivity.java&#10;│   │   ├── LocationDetailActivity.java&#10;│   │   ├── AddLocationActivity.java&#10;│   │   └── LoginActivity.java&#10;│   ├── Adapters/&#10;│   │   └── AttractionAdapter.java&#10;│   ├── Models/&#10;│   │   └── Attraction.java&#10;│   ├── Helpers/&#10;│   │   └── GooglePhotosUrlHelper.java&#10;│   └── Utils/&#10;└── src/main/res/&#10;    ├── layout/&#10;    ├── values/&#10;    └── drawable/&#10;```&#10;&#10;##  Technical Implementation&#10;&#10;### Core Components&#10;&#10;#### Activities&#10;- **HomeActivity**: Location detection, attraction display, and filtering&#10;- **LocationDetailActivity**: Detailed attraction view with intelligent directions&#10;- **AddLocationActivity**: Community contribution form with Google Photos integration&#10;- **LoginActivity**: Authentication and session management&#10;&#10;#### Key Classes&#10;- **AttractionAdapter**: RecyclerView adapter with proper intent data passing&#10;- **GooglePhotosUrlHelper**: URL processing for seamless image integration&#10;- **Attraction**: Data model with comprehensive field mapping&#10;&#10;### Recent Development Work&#10;&#10;#### Bug Fixes Implemented&#10;1. **Intent Data Passing Issue** (Fixed: August 2025)&#10;   - Problem: Location details page showing empty data&#10;   - Solution: Corrected intent extra keys between activities&#10;   - Files modified: `AttractionAdapter.java`, `LocationDetailActivity.java`&#10;&#10;2. **Google Photos Image Loading** (Fixed: August 2025)&#10;   - Problem: Images not displaying in details page&#10;   - Solution: Added URL processing to LocationDetailActivity&#10;   - Files modified: `LocationDetailActivity.java`&#10;&#10;3. **Directions Button Functionality** (Enhanced: August 2025)&#10;   - Problem: Button not working when coordinates missing&#10;   - Solution: Implemented three-level fallback system&#10;   - Files modified: `LocationDetailActivity.java`&#10;&#10;#### Technical Improvements&#10;- **Smart Geocoding**: Automatic coordinate resolution for missing location data&#10;- **Error Handling**: Comprehensive exception management across all activities&#10;- **Background Processing**: Proper threading for network operations&#10;- **Lambda Expression Fixes**: Resolved compilation issues with final variables&#10;&#10;##  Learning Outcomes Demonstrated&#10;&#10;### Android Development Skills&#10;- **Activity Communication**: Proper intent usage and data passing&#10;- **Lifecycle Management**: Handling activity states and background operations&#10;- **UI/UX Design**: Material Design implementation with responsive layouts&#10;- **Database Integration**: Firestore real-time data synchronization&#10;- **Location Services**: GPS integration and geocoding API usage&#10;- **Image Processing**: Efficient loading with Glide and URL conversion&#10;&#10;### Problem-Solving Approach&#10;- **Systematic Debugging**: Using logs and systematic testing to identify issues&#10;- **Fallback Systems**: Implementing robust error recovery mechanisms&#10;- **User Experience**: Ensuring functionality works under various conditions&#10;- **Code Quality**: Proper variable scoping and lambda expression handling&#10;&#10;##  Firebase Configuration&#10;&#10;The app integrates with Firebase for:&#10;- **Firestore Database**: Real-time attraction data storage&#10;- **Authentication**: User login and session management&#10;- **Security Rules**: Proper data access control&#10;&#10;Configuration file: `google-services.json` (not included in repository for security)&#10;&#10;##  Testing Approach&#10;&#10;### Manual Testing Scenarios&#10;- Location detection across different cities&#10;- Image loading with various URL formats&#10;- Directions functionality with and without coordinates&#10;- Error handling under poor network conditions&#10;- Cross-activity data flow validation&#10;&#10;### Debug Implementation&#10;- Comprehensive logging throughout the application&#10;- Error state handling with user-friendly messages&#10;- Performance monitoring for image loading and geocoding&#10;&#10;##  Performance Considerations&#10;&#10;### Optimizations Implemented&#10;- **Image Caching**: Glide library for efficient memory usage&#10;- **Background Processing**: Non-blocking UI for network operations&#10;- **Database Queries**: Efficient Firestore query structure&#10;- **Memory Management**: Proper activity lifecycle handling&#10;&#10;##  Build Configuration&#10;&#10;- **Target SDK**: API 34 (Android 14)&#10;- **Minimum SDK**: API 21 (Android 5.0)&#10;- **Build Tools**: Gradle with modern Android build system&#10;- **Dependencies**: Material Design, Firebase, Glide, Location Services&#10;&#10;##  Change Log&#10;&#10;### August 2025&#10;- **Intent Data Passing Fix**: Resolved empty details page issue&#10;- **Google Photos Integration**: Enhanced image loading across all screens&#10;- **Intelligent Directions**: Implemented geocoding fallback system&#10;- **Error Handling**: Added comprehensive exception management&#10;- **Code Quality**: Fixed lambda expression compilation issues&#10;&#10;### June 2025&#10;- **Initial Development**: GitHub repository initialization&#10;- **Core Features**: Basic app structure and Firebase integration&#10;- **Author**: Asitha Kanchana (Student ID: S23010526)&#10;&#10;##  Academic Context&#10;&#10;This mobile application demonstrates practical implementation of concepts learned in the Mobile Application Development course at OUSL, including:&#10;&#10;- Modern Android development practices&#10;- Real-time database integration&#10;- Location-based services&#10;- Image processing and optimization&#10;- Error handling and user experience design&#10;- Systematic debugging and problem-solving&#10;&#10;---&#10;&#10;**Developer**: Asitha Kanchana  &#10;**Student ID**: S23010526  &#10;**Institution**: Open University of Sri Lanka  &#10;**Course**: Mobile Application Development  &#10;**Degree**: Bachelor of Software Engineering" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/Attraction.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/Attraction.java" />
              <option name="originalContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import java.util.List;&#10;import java.util.ArrayList;&#10;&#10;public class Attraction {&#10;    private String documentId;&#10;    private String name;&#10;    private String category;&#10;    private String description;&#10;    private String youtubeUrl;&#10;    private List&lt;String&gt; images;&#10;&#10;    // New fields for contributor information&#10;    private String contributorName;&#10;    private long contributedAt;&#10;&#10;    // Location fields&#10;    private String city;&#10;    private String province;&#10;&#10;    // Additional fields for LocationDetailActivity&#10;    private String imageUrl;&#10;    private double latitude;&#10;    private double longitude;&#10;&#10;    // Field to identify placeholder entries&#10;    private boolean isPlaceholder;&#10;&#10;    // Firebase requires a public, no-argument constructor&#10;    public Attraction() {&#10;        this.images = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    // Constructor with all fields including contributor info and location&#10;    public Attraction(String documentId, String name, String category, String description,&#10;                     String youtubeUrl, List&lt;String&gt; images, String contributorName, long contributedAt,&#10;                     String city, String province) {&#10;        this.documentId = documentId;&#10;        this.name = name;&#10;        this.category = category;&#10;        this.description = description;&#10;        this.youtubeUrl = youtubeUrl;&#10;        this.images = images != null ? images : new ArrayList&lt;&gt;();&#10;        this.contributorName = contributorName;&#10;        this.contributedAt = contributedAt;&#10;        this.city = city;&#10;        this.province = province;&#10;    }&#10;&#10;    // Constructor with all fields including contributor info&#10;    public Attraction(String documentId, String name, String category, String description,&#10;                     String youtubeUrl, List&lt;String&gt; images, String contributorName, long contributedAt) {&#10;        this.documentId = documentId;&#10;        this.name = name;&#10;        this.category = category;&#10;        this.description = description;&#10;        this.youtubeUrl = youtubeUrl;&#10;        this.images = images != null ? images : new ArrayList&lt;&gt;();&#10;        this.contributorName = contributorName;&#10;        this.contributedAt = contributedAt;&#10;    }&#10;&#10;    // Constructor for basic attraction&#10;    public Attraction(String documentId, String name, String category, String description,&#10;                     String youtubeUrl, List&lt;String&gt; images) {&#10;        this.documentId = documentId;&#10;        this.name = name;&#10;        this.category = category;&#10;        this.description = description;&#10;        this.youtubeUrl = youtubeUrl;&#10;        this.images = images != null ? images : new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getDocumentId() {&#10;        return documentId;&#10;    }&#10;&#10;    public void setDocumentId(String documentId) {&#10;        this.documentId = documentId;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public String getCategory() {&#10;        return category;&#10;    }&#10;&#10;    public void setCategory(String category) {&#10;        this.category = category;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public String getYoutubeUrl() {&#10;        return youtubeUrl;&#10;    }&#10;&#10;    public void setYoutubeUrl(String youtubeUrl) {&#10;        this.youtubeUrl = youtubeUrl;&#10;    }&#10;&#10;    public List&lt;String&gt; getImages() {&#10;        return images;&#10;    }&#10;&#10;    public void setImages(List&lt;String&gt; images) {&#10;        this.images = images != null ? images : new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public String getContributorName() {&#10;        return contributorName;&#10;    }&#10;&#10;    public void setContributorName(String contributorName) {&#10;        this.contributorName = contributorName;&#10;    }&#10;&#10;    public long getContributedAt() {&#10;        return contributedAt;&#10;    }&#10;&#10;    public void setContributedAt(long contributedAt) {&#10;        this.contributedAt = contributedAt;&#10;    }&#10;&#10;    public String getCity() {&#10;        return city;&#10;    }&#10;&#10;    public void setCity(String city) {&#10;        this.city = city;&#10;    }&#10;&#10;    public String getProvince() {&#10;        return province;&#10;    }&#10;&#10;    public void setProvince(String province) {&#10;        this.province = province;&#10;    }&#10;&#10;    // New getters and setters for missing fields&#10;    public String getImageUrl() {&#10;        return imageUrl;&#10;    }&#10;&#10;    public void setImageUrl(String imageUrl) {&#10;        this.imageUrl = imageUrl;&#10;    }&#10;&#10;    public double getLatitude() {&#10;        return latitude;&#10;    }&#10;&#10;    public void setLatitude(double latitude) {&#10;        this.latitude = latitude;&#10;    }&#10;&#10;    public double getLongitude() {&#10;        return longitude;&#10;    }&#10;&#10;    public void setLongitude(double longitude) {&#10;        this.longitude = longitude;&#10;    }&#10;&#10;    public boolean isPlaceholder() {&#10;        return isPlaceholder;&#10;    }&#10;&#10;    public void setPlaceholder(boolean placeholder) {&#10;        isPlaceholder = placeholder;&#10;    }&#10;&#10;    // Utility methods&#10;    public String getFirstImageUrl() {&#10;        if (imageUrl != null &amp;&amp; !imageUrl.isEmpty()) {&#10;            return imageUrl;&#10;        }&#10;        if (images != null &amp;&amp; !images.isEmpty()) {&#10;            return images.get(0);&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public void addImage(String imageUrl) {&#10;        if (this.images == null) {&#10;            this.images = new ArrayList&lt;&gt;();&#10;        }&#10;        this.images.add(imageUrl);&#10;    }&#10;&#10;    public boolean hasImages() {&#10;        return (imageUrl != null &amp;&amp; !imageUrl.isEmpty()) ||&#10;               (images != null &amp;&amp; !images.isEmpty());&#10;    }&#10;&#10;    public boolean hasLocation() {&#10;        return latitude != 0.0 &amp;&amp; longitude != 0.0;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Attraction{&quot; +&#10;                &quot;documentId='&quot; + documentId + '\'' +&#10;                &quot;, name='&quot; + name + '\'' +&#10;                &quot;, category='&quot; + category + '\'' +&#10;                &quot;, city='&quot; + city + '\'' +&#10;                &quot;, province='&quot; + province + '\'' +&#10;                &quot;, contributorName='&quot; + contributorName + '\'' +&#10;                &quot;, hasImages=&quot; + hasImages() +&#10;                &quot;, hasLocation=&quot; + hasLocation() +&#10;                '}';&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import java.util.List;&#10;import java.util.ArrayList;&#10;&#10;/**&#10; * Attraction - Data model class for tourist attractions in Sri Lanka&#10; * &#10; * This class demonstrates key object-oriented programming and Android development concepts:&#10; * 1. Data encapsulation with private fields and public getters/setters&#10; * 2. Firebase integration with proper constructor patterns&#10; * 3. Flexible data structure supporting multiple use cases&#10; * 4. Location-based data modeling with coordinates and administrative divisions&#10; * 5. Support for placeholder entries and dynamic content loading&#10; * &#10; * Academic Learning Outcomes:&#10; * - Object-oriented design principles&#10; * - Database integration patterns&#10; * - Data validation and type safety&#10; * - Memory-efficient collection usage&#10; * - Flexible architecture for different data sources&#10; */&#10;public class Attraction {&#10;    // Core identification and content fields&#10;    private String documentId;      // Firebase document ID for database operations&#10;    private String name;           // Primary attraction name (e.g., &quot;Udawalawe National Park&quot;)&#10;    private String category;       // Type classification (Historical, Waterfall, Beach, etc.)&#10;    private String description;    // Detailed description for display&#10;    private String youtubeUrl;     // Optional video content URL&#10;    private List&lt;String&gt; images;   // Collection of image URLs (supports multiple photos)&#10;&#10;    // Contributor tracking fields - demonstrates community aspect&#10;    private String contributorName; // User who added this attraction&#10;    private long contributedAt;     // Timestamp of contribution (Unix timestamp)&#10;&#10;    // Geographic classification fields - supports location-based queries&#10;    private String city;           // City/town location (e.g., &quot;Embilipitiya&quot;)&#10;    private String province;       // Administrative province in Sri Lanka&#10;&#10;    // Enhanced location fields for navigation and mapping&#10;    private String imageUrl;       // Primary image URL (for backward compatibility)&#10;    private double latitude;       // GPS coordinate for precise location&#10;    private double longitude;      // GPS coordinate for precise location&#10;&#10;    // Special state field for UI placeholder handling&#10;    private boolean isPlaceholder; // Indicates &quot;grow our database&quot; entries&#10;&#10;    /**&#10;     * Default constructor required by Firebase&#10;     * &#10;     * Firebase requires a public, no-argument constructor for automatic&#10;     * object serialization/deserialization from Firestore documents.&#10;     * &#10;     * Academic Learning: Understanding framework requirements and&#10;     * designing classes that work with external libraries.&#10;     */&#10;    public Attraction() {&#10;        // Initialize collections to prevent null pointer exceptions&#10;        this.images = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    /**&#10;     * Comprehensive constructor for creating complete attraction objects&#10;     * &#10;     * This constructor demonstrates proper object initialization with&#10;     * all required fields and null-safety for optional parameters.&#10;     * &#10;     * @param documentId Firebase document identifier&#10;     * @param name Attraction name&#10;     * @param category Attraction type/category&#10;     * @param description Detailed description&#10;     * @param youtubeUrl Optional video URL&#10;     * @param images List of image URLs&#10;     * @param contributorName User who added this attraction&#10;     * @param contributedAt Timestamp of contribution&#10;     * @param city City location&#10;     * @param province Province location&#10;     */&#10;    public Attraction(String documentId, String name, String category, String description,&#10;                     String youtubeUrl, List&lt;String&gt; images, String contributorName, long contributedAt,&#10;                     String city, String province) {&#10;        this.documentId = documentId;&#10;        this.name = name;&#10;        this.category = category;&#10;        this.description = description;&#10;        this.youtubeUrl = youtubeUrl;&#10;        // Null-safe initialization - prevents runtime errors&#10;        this.images = images != null ? images : new ArrayList&lt;&gt;();&#10;        this.contributorName = contributorName;&#10;        this.contributedAt = contributedAt;&#10;        this.city = city;&#10;        this.province = province;&#10;    }&#10;&#10;    /**&#10;     * Constructor with all fields including contributor info&#10;     * &#10;     * This constructor is used when contributor information is available,&#10;     * but detailed location data is not required.&#10;     * &#10;     * @param documentId Firebase document identifier&#10;     * @param name Attraction name&#10;     * @param category Attraction type/category&#10;     * @param description Detailed description&#10;     * @param youtubeUrl Optional video URL&#10;     * @param images List of image URLs&#10;     * @param contributorName User who added this attraction&#10;     * @param contributedAt Timestamp of contribution&#10;     */&#10;    public Attraction(String documentId, String name, String category, String description,&#10;                     String youtubeUrl, List&lt;String&gt; images, String contributorName, long contributedAt) {&#10;        this.documentId = documentId;&#10;        this.name = name;&#10;        this.category = category;&#10;        this.description = description;&#10;        this.youtubeUrl = youtubeUrl;&#10;        this.images = images != null ? images : new ArrayList&lt;&gt;();&#10;        this.contributorName = contributorName;&#10;        this.contributedAt = contributedAt;&#10;    }&#10;&#10;    /**&#10;     * Constructor for basic attraction&#10;     * &#10;     * This constructor is used for creating attraction objects with&#10;     * only the essential information. Ideal for placeholder entries&#10;     * or simplified views.&#10;     * &#10;     * @param documentId Firebase document identifier&#10;     * @param name Attraction name&#10;     * @param category Attraction type/category&#10;     * @param description Detailed description&#10;     * @param youtubeUrl Optional video URL&#10;     * @param images List of image URLs&#10;     */&#10;    public Attraction(String documentId, String name, String category, String description,&#10;                     String youtubeUrl, List&lt;String&gt; images) {&#10;        this.documentId = documentId;&#10;        this.name = name;&#10;        this.category = category;&#10;        this.description = description;&#10;        this.youtubeUrl = youtubeUrl;&#10;        this.images = images != null ? images : new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getDocumentId() {&#10;        return documentId;&#10;    }&#10;&#10;    public void setDocumentId(String documentId) {&#10;        this.documentId = documentId;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public String getCategory() {&#10;        return category;&#10;    }&#10;&#10;    public void setCategory(String category) {&#10;        this.category = category;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public String getYoutubeUrl() {&#10;        return youtubeUrl;&#10;    }&#10;&#10;    public void setYoutubeUrl(String youtubeUrl) {&#10;        this.youtubeUrl = youtubeUrl;&#10;    }&#10;&#10;    public List&lt;String&gt; getImages() {&#10;        return images;&#10;    }&#10;&#10;    public void setImages(List&lt;String&gt; images) {&#10;        this.images = images != null ? images : new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public String getContributorName() {&#10;        return contributorName;&#10;    }&#10;&#10;    public void setContributorName(String contributorName) {&#10;        this.contributorName = contributorName;&#10;    }&#10;&#10;    public long getContributedAt() {&#10;        return contributedAt;&#10;    }&#10;&#10;    public void setContributedAt(long contributedAt) {&#10;        this.contributedAt = contributedAt;&#10;    }&#10;&#10;    public String getCity() {&#10;        return city;&#10;    }&#10;&#10;    public void setCity(String city) {&#10;        this.city = city;&#10;    }&#10;&#10;    public String getProvince() {&#10;        return province;&#10;    }&#10;&#10;    public void setProvince(String province) {&#10;        this.province = province;&#10;    }&#10;&#10;    // New getters and setters for missing fields&#10;    public String getImageUrl() {&#10;        return imageUrl;&#10;    }&#10;&#10;    public void setImageUrl(String imageUrl) {&#10;        this.imageUrl = imageUrl;&#10;    }&#10;&#10;    public double getLatitude() {&#10;        return latitude;&#10;    }&#10;&#10;    public void setLatitude(double latitude) {&#10;        this.latitude = latitude;&#10;    }&#10;&#10;    public double getLongitude() {&#10;        return longitude;&#10;    }&#10;&#10;    public void setLongitude(double longitude) {&#10;        this.longitude = longitude;&#10;    }&#10;&#10;    public boolean isPlaceholder() {&#10;        return isPlaceholder;&#10;    }&#10;&#10;    public void setPlaceholder(boolean placeholder) {&#10;        isPlaceholder = placeholder;&#10;    }&#10;&#10;    // Utility methods&#10;    public String getFirstImageUrl() {&#10;        if (imageUrl != null &amp;&amp; !imageUrl.isEmpty()) {&#10;            return imageUrl;&#10;        }&#10;        if (images != null &amp;&amp; !images.isEmpty()) {&#10;            return images.get(0);&#10;        }&#10;        return null;&#10;    }&#10;&#10;    public void addImage(String imageUrl) {&#10;        if (this.images == null) {&#10;            this.images = new ArrayList&lt;&gt;();&#10;        }&#10;        this.images.add(imageUrl);&#10;    }&#10;&#10;    public boolean hasImages() {&#10;        return (imageUrl != null &amp;&amp; !imageUrl.isEmpty()) ||&#10;               (images != null &amp;&amp; !images.isEmpty());&#10;    }&#10;&#10;    public boolean hasLocation() {&#10;        return latitude != 0.0 &amp;&amp; longitude != 0.0;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Attraction{&quot; +&#10;                &quot;documentId='&quot; + documentId + '\'' +&#10;                &quot;, name='&quot; + name + '\'' +&#10;                &quot;, category='&quot; + category + '\'' +&#10;                &quot;, city='&quot; + city + '\'' +&#10;                &quot;, province='&quot; + province + '\'' +&#10;                &quot;, contributorName='&quot; + contributorName + '\'' +&#10;                &quot;, hasImages=&quot; + hasImages() +&#10;                &quot;, hasLocation=&quot; + hasLocation() +&#10;                '}';&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/GooglePhotosHelper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/GooglePhotosHelper.java" />
              <option name="updatedContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.app.Activity;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.util.Log;&#10;&#10;import androidx.annotation.NonNull;&#10;&#10;import com.google.android.gms.auth.api.signin.GoogleSignIn;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInAccount;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInClient;&#10;import com.google.android.gms.auth.api.signin.GoogleSignInOptions;&#10;import com.google.android.gms.common.api.Scope;&#10;import com.google.android.gms.tasks.Task;&#10;import com.google.api.client.extensions.android.http.AndroidHttp;&#10;import com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential;&#10;import com.google.api.client.json.gson.GsonFactory;&#10;import com.google.api.services.photoslibrary.v1.PhotosLibrary;&#10;import com.google.api.services.photoslibrary.v1.PhotosLibraryScopes;&#10;import com.google.api.services.photoslibrary.v1.model.ListSharedAlbumsResponse;&#10;import com.google.api.services.photoslibrary.v1.model.SearchMediaItemsRequest;&#10;import com.google.api.services.photoslibrary.v1.model.SearchMediaItemsResponse;&#10;import com.google.api.services.photoslibrary.v1.model.SharedAlbum;&#10;import com.google.api.services.photoslibrary.v1.model.MediaItem;&#10;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.concurrent.ExecutorService;&#10;import java.util.concurrent.Executors;&#10;&#10;/**&#10; * Helper class for Google Photos integration&#10; * Handles authentication and photo retrieval from shared albums&#10; */&#10;public class GooglePhotosHelper {&#10;    &#10;    private static final String TAG = &quot;GooglePhotosHelper&quot;;&#10;    private static final int RC_GOOGLE_PHOTOS_SIGN_IN = 9001;&#10;    &#10;    private Context context;&#10;    private GoogleSignInClient signInClient;&#10;    private PhotosLibrary photosLibraryService;&#10;    private ExecutorService executorService;&#10;    &#10;    // Interface for handling results&#10;    public interface GooglePhotosCallback {&#10;        void onAuthenticationSuccess();&#10;        void onAuthenticationFailed(String error);&#10;        void onPhotosLoaded(List&lt;PhotoItem&gt; photos);&#10;        void onError(String error);&#10;    }&#10;    &#10;    // Data class for photo items&#10;    public static class PhotoItem {&#10;        private String id;&#10;        private String baseUrl;&#10;        private String filename;&#10;        private String description;&#10;        private String mimeType;&#10;        &#10;        public PhotoItem(String id, String baseUrl, String filename, String description, String mimeType) {&#10;            this.id = id;&#10;            this.baseUrl = baseUrl;&#10;            this.filename = filename;&#10;            this.description = description;&#10;            this.mimeType = mimeType;&#10;        }&#10;        &#10;        // Getters&#10;        public String getId() { return id; }&#10;        public String getBaseUrl() { return baseUrl; }&#10;        public String getFilename() { return filename; }&#10;        public String getDescription() { return description; }&#10;        public String getMimeType() { return mimeType; }&#10;        &#10;        // Get downloadable URL with specific dimensions&#10;        public String getDownloadUrl(int width, int height) {&#10;            return baseUrl + &quot;=w&quot; + width + &quot;-h&quot; + height;&#10;        }&#10;        &#10;        // Get thumbnail URL&#10;        public String getThumbnailUrl() {&#10;            return baseUrl + &quot;=w300-h300-c&quot;;&#10;        }&#10;        &#10;        // Get full resolution URL&#10;        public String getFullResolutionUrl() {&#10;            return baseUrl + &quot;=d&quot;;&#10;        }&#10;    }&#10;    &#10;    public GooglePhotosHelper(Context context) {&#10;        this.context = context;&#10;        this.executorService = Executors.newSingleThreadExecutor();&#10;        initializeGoogleSignIn();&#10;    }&#10;    &#10;    private void initializeGoogleSignIn() {&#10;        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)&#10;                .requestEmail()&#10;                .requestScopes(new Scope(PhotosLibraryScopes.PHOTOSLIBRARY_READONLY))&#10;                .build();&#10;        &#10;        signInClient = GoogleSignIn.getClient(context, gso);&#10;    }&#10;    &#10;    /**&#10;     * Check if user is already signed in to Google Photos&#10;     */&#10;    public boolean isSignedIn() {&#10;        GoogleSignInAccount account = GoogleSignIn.getLastSignedInAccount(context);&#10;        return account != null &amp;&amp; &#10;               GoogleSignIn.hasPermissions(account, new Scope(PhotosLibraryScopes.PHOTOSLIBRARY_READONLY));&#10;    }&#10;    &#10;    /**&#10;     * Sign in to Google Photos&#10;     */&#10;    public void signIn(Activity activity, GooglePhotosCallback callback) {&#10;        if (isSignedIn()) {&#10;            initializePhotosService();&#10;            callback.onAuthenticationSuccess();&#10;            return;&#10;        }&#10;        &#10;        Intent signInIntent = signInClient.getSignInIntent();&#10;        activity.startActivityForResult(signInIntent, RC_GOOGLE_PHOTOS_SIGN_IN);&#10;    }&#10;    &#10;    /**&#10;     * Handle sign-in result&#10;     */&#10;    public void handleSignInResult(Intent data, GooglePhotosCallback callback) {&#10;        Task&lt;GoogleSignInAccount&gt; task = GoogleSignIn.getSignedInAccountFromIntent(data);&#10;        &#10;        try {&#10;            GoogleSignInAccount account = task.getResult();&#10;            if (account != null) {&#10;                Log.d(TAG, &quot;Google Photos sign-in successful&quot;);&#10;                initializePhotosService();&#10;                callback.onAuthenticationSuccess();&#10;            } else {&#10;                callback.onAuthenticationFailed(&quot;Failed to sign in to Google Photos&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(TAG, &quot;Google Photos sign-in failed&quot;, e);&#10;            callback.onAuthenticationFailed(&quot;Sign-in failed: &quot; + e.getMessage());&#10;        }&#10;    }&#10;    &#10;    private void initializePhotosService() {&#10;        GoogleSignInAccount account = GoogleSignIn.getLastSignedInAccount(context);&#10;        if (account == null) {&#10;            Log.e(TAG, &quot;No signed-in account found&quot;);&#10;            return;&#10;        }&#10;        &#10;        GoogleAccountCredential credential = GoogleAccountCredential.usingOAuth2(&#10;                context, Arrays.asList(PhotosLibraryScopes.PHOTOSLIBRARY_READONLY));&#10;        credential.setSelectedAccount(account.getAccount());&#10;        &#10;        photosLibraryService = new PhotosLibrary.Builder(&#10;                AndroidHttp.newCompatibleTransport(),&#10;                GsonFactory.getDefaultInstance(),&#10;                credential)&#10;                .setApplicationName(&quot;Hidden Sri Lanka&quot;)&#10;                .build();&#10;    }&#10;    &#10;    /**&#10;     * Load shared albums from Google Photos&#10;     */&#10;    public void loadSharedAlbums(GooglePhotosCallback callback) {&#10;        if (photosLibraryService == null) {&#10;            callback.onError(&quot;Google Photos service not initialized. Please sign in first.&quot;);&#10;            return;&#10;        }&#10;        &#10;        executorService.execute(() -&gt; {&#10;            try {&#10;                ListSharedAlbumsResponse response = photosLibraryService.sharedAlbums().list().execute();&#10;                List&lt;SharedAlbum&gt; albums = response.getSharedAlbums();&#10;                &#10;                if (albums != null &amp;&amp; !albums.isEmpty()) {&#10;                    // For demo, load photos from the first shared album&#10;                    loadPhotosFromAlbum(albums.get(0).getId(), callback);&#10;                } else {&#10;                    ((Activity) context).runOnUiThread(() -&gt; &#10;                        callback.onError(&quot;No shared albums found. Please make sure you have shared albums in Google Photos.&quot;));&#10;                }&#10;                &#10;            } catch (IOException e) {&#10;                Log.e(TAG, &quot;Error loading shared albums&quot;, e);&#10;                ((Activity) context).runOnUiThread(() -&gt; &#10;                    callback.onError(&quot;Failed to load shared albums: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;    &#10;    /**&#10;     * Load all recent photos from Google Photos (not album-specific)&#10;     */&#10;    public void loadRecentPhotos(GooglePhotosCallback callback) {&#10;        loadRecentPhotos(20, callback); // Load 20 recent photos&#10;    }&#10;    &#10;    /**&#10;     * Load recent photos with specified count&#10;     */&#10;    public void loadRecentPhotos(int pageSize, GooglePhotosCallback callback) {&#10;        if (photosLibraryService == null) {&#10;            callback.onError(&quot;Google Photos service not initialized. Please sign in first.&quot;);&#10;            return;&#10;        }&#10;        &#10;        executorService.execute(() -&gt; {&#10;            try {&#10;                SearchMediaItemsRequest request = new SearchMediaItemsRequest()&#10;                        .setPageSize(pageSize);&#10;                &#10;                SearchMediaItemsResponse response = photosLibraryService.mediaItems().search(request).execute();&#10;                List&lt;MediaItem&gt; mediaItems = response.getMediaItems();&#10;                &#10;                List&lt;PhotoItem&gt; photoItems = new ArrayList&lt;&gt;();&#10;                if (mediaItems != null) {&#10;                    for (MediaItem item : mediaItems) {&#10;                        // Only include images (not videos)&#10;                        if (item.getMimeType() != null &amp;&amp; item.getMimeType().startsWith(&quot;image/&quot;)) {&#10;                            PhotoItem photoItem = new PhotoItem(&#10;                                    item.getId(),&#10;                                    item.getBaseUrl(),&#10;                                    item.getFilename(),&#10;                                    item.getDescription(),&#10;                                    item.getMimeType()&#10;                            );&#10;                            photoItems.add(photoItem);&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                ((Activity) context).runOnUiThread(() -&gt; callback.onPhotosLoaded(photoItems));&#10;                &#10;            } catch (IOException e) {&#10;                Log.e(TAG, &quot;Error loading recent photos&quot;, e);&#10;                ((Activity) context).runOnUiThread(() -&gt; &#10;                    callback.onError(&quot;Failed to load photos: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;    &#10;    private void loadPhotosFromAlbum(String albumId, GooglePhotosCallback callback) {&#10;        executorService.execute(() -&gt; {&#10;            try {&#10;                SearchMediaItemsRequest request = new SearchMediaItemsRequest()&#10;                        .setAlbumId(albumId)&#10;                        .setPageSize(50);&#10;                &#10;                SearchMediaItemsResponse response = photosLibraryService.mediaItems().search(request).execute();&#10;                List&lt;MediaItem&gt; mediaItems = response.getMediaItems();&#10;                &#10;                List&lt;PhotoItem&gt; photoItems = new ArrayList&lt;&gt;();&#10;                if (mediaItems != null) {&#10;                    for (MediaItem item : mediaItems) {&#10;                        if (item.getMimeType() != null &amp;&amp; item.getMimeType().startsWith(&quot;image/&quot;)) {&#10;                            PhotoItem photoItem = new PhotoItem(&#10;                                    item.getId(),&#10;                                    item.getBaseUrl(),&#10;                                    item.getFilename(),&#10;                                    item.getDescription(),&#10;                                    item.getMimeType()&#10;                            );&#10;                            photoItems.add(photoItem);&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                ((Activity) context).runOnUiThread(() -&gt; callback.onPhotosLoaded(photoItems));&#10;                &#10;            } catch (IOException e) {&#10;                Log.e(TAG, &quot;Error loading photos from album&quot;, e);&#10;                ((Activity) context).runOnUiThread(() -&gt; &#10;                    callback.onError(&quot;Failed to load album photos: &quot; + e.getMessage()));&#10;            }&#10;        });&#10;    }&#10;    &#10;    /**&#10;     * Sign out from Google Photos&#10;     */&#10;    public void signOut(GooglePhotosCallback callback) {&#10;        signInClient.signOut().addOnCompleteListener(task -&gt; {&#10;            photosLibraryService = null;&#10;            Log.d(TAG, &quot;Signed out from Google Photos&quot;);&#10;        });&#10;    }&#10;    &#10;    /**&#10;     * Clean up resources&#10;     */&#10;    public void cleanup() {&#10;        if (executorService != null &amp;&amp; !executorService.isShutdown()) {&#10;            executorService.shutdown();&#10;        }&#10;    }&#10;    &#10;    public static int getSignInRequestCode() {&#10;        return RC_GOOGLE_PHOTOS_SIGN_IN;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/utils/GooglePhotosHelper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/utils/GooglePhotosHelper.java" />
              <option name="updatedContent" value="// This file has been removed as it's not needed for Google Photos shared link functionality&#10;// The Google Photos integration is now handled directly in AddLocationActivity.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/grow_our_database.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/grow_our_database.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;200dp&quot;&#10;    android:height=&quot;150dp&quot;&#10;    android:viewportWidth=&quot;200&quot;&#10;    android:viewportHeight=&quot;150&quot;&gt;&#10;    &#10;    &lt;!-- Background --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#E8F5E8&quot;&#10;        android:pathData=&quot;M0,0h200v150h-200z&quot;/&gt;&#10;    &#10;    &lt;!-- Tree/Growth Icon --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M100,120c-2,0 -4,-2 -4,-4v-20c0,-2 2,-4 4,-4s4,2 4,4v20c0,2 -2,4 -4,4z&quot;/&gt;&#10;    &#10;    &lt;!-- Leaves --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#66BB6A&quot;&#10;        android:pathData=&quot;M100,90c-8,0 -15,-7 -15,-15s7,-15 15,-15s15,7 15,15s-7,15 -15,15z&quot;/&gt;&#10;    &#10;    &lt;path&#10;        android:fillColor=&quot;#81C784&quot;&#10;        android:pathData=&quot;M90,85c-6,0 -12,-5 -12,-12s6,-12 12,-12s12,5 12,12s-6,12 -12,12z&quot;/&gt;&#10;    &#10;    &lt;path&#10;        android:fillColor=&quot;#81C784&quot;&#10;        android:pathData=&quot;M110,85c-6,0 -12,-5 -12,-12s6,-12 12,-12s12,5 12,12s-6,12 -12,12z&quot;/&gt;&#10;    &#10;    &lt;!-- Plus icon in center --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#2E7D32&quot;&#10;        android:pathData=&quot;M100,50v20m-10,-10h20&quot;&#10;        android:strokeWidth=&quot;3&quot;&#10;        android:strokeColor=&quot;#2E7D32&quot;/&gt;&#10;    &#10;    &lt;!-- Text area suggestion --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#C8E6C9&quot;&#10;        android:pathData=&quot;M30,130h140v15h-140z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>