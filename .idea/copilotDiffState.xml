<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# Hidden Sri Lanka &#10;&#10;&gt; Discover the wonders beyond the guidebook&#10;&#10;A mobile application for discovering hidden gems and lesser-known attractions across Sri Lanka, powered by community contributions and location-based recommendations.&#10;&#10;##  Features&#10;&#10;- ** Location-Based Discovery**: Automatically detects your location and shows nearby attractions&#10;- ** Smart Filtering**: Filter attractions by categories (Historical Sites, Waterfalls, Beaches, etc.)&#10;- **➕ Community Contributions**: Add new hidden gems to help fellow travelers&#10;- ** Persistent Login**: Stay logged in across app sessions&#10;- ** Manual Search**: Search for attractions in specific Sri Lankan cities&#10;- ** Modern UI**: Clean, intuitive Material Design interface&#10;&#10;##  Quick Start&#10;&#10;### Prerequisites&#10;- Android Studio Arctic Fox (2020.3.1) or newer&#10;- Android SDK API 21+ (Android 5.0+)&#10;- Firebase account for backend services&#10;&#10;### Installation&#10;1. **Clone the repository**&#10;   ```bash&#10;   git clone https://github.com/your-username/Hidden-Sri-Lanka.git&#10;   cd Hidden-Sri-Lanka&#10;   ```&#10;&#10;2. **Setup Firebase**&#10;   - Create a Firebase project&#10;   - Add your `google-services.json` to `app/` directory&#10;   - Enable Firestore and Realtime Database&#10;   - Configure authentication&#10;&#10;3. **Build and Run**&#10;   ```bash&#10;   ./gradlew clean build&#10;   ./gradlew installDebug&#10;   ```&#10;&#10;##  Documentation&#10;&#10;### Core Features&#10;- [ Authentication System](docs/features/authentication.md) - Login, signup, and session management&#10;- [ Home &amp; Discovery](docs/features/home-discovery.md) - Location detection and attraction browsing&#10;- [ Filtering System](docs/features/filtering.md) - Category-based attraction filtering&#10;- [ Location Details](docs/features/location-details.md) - Detailed attraction information&#10;- [➕ Add Locations](docs/features/add-locations.md) - Community contribution system&#10;- [ Navigation](docs/features/navigation.md) - App navigation and menu system&#10;&#10;### Setup &amp; Development&#10;- [⚙️ Installation Guide](docs/setup/installation.md) - Complete setup instructions&#10;- [ Firebase Integration](docs/setup/firebase.md) - Backend configuration&#10;- [️ Architecture](docs/setup/architecture.md) - App structure and design patterns&#10;- [ API Reference](docs/api/endpoints.md) - Firebase collections and data models&#10;&#10;### User Guides&#10;- [ Getting Started](docs/guides/getting-started.md) - First-time user guide&#10;- [ Contributing Locations](docs/guides/contributing.md) - How to add new attractions&#10;- [ Troubleshooting](docs/guides/troubleshooting.md) - Common issues and solutions&#10;&#10;## ️ Architecture&#10;&#10;```&#10;┌─────────────────────────────────────────┐&#10;│                View Layer               │&#10;│  Activities, Layouts, Adapters         │&#10;├─────────────────────────────────────────┤&#10;│              Controller Layer           │&#10;│  BaseActivity, Session Management      │&#10;├─────────────────────────────────────────┤&#10;│                Model Layer              │&#10;│  Data Classes, Firebase Integration     │&#10;└─────────────────────────────────────────┘&#10;```&#10;&#10;### Key Components&#10;- **BaseActivity Pattern**: Consistent navigation and session management&#10;- **SessionManager**: Persistent login with SharedPreferences&#10;- **Firebase Integration**: Firestore for attractions, Realtime DB for users&#10;- **Location Services**: GPS-based attraction discovery&#10;&#10;## ️ Tech Stack&#10;&#10;- **Android**: Native Android with Java&#10;- **UI Framework**: Material Design Components&#10;- **Backend**: Firebase (Firestore + Realtime Database)&#10;- **Authentication**: Custom Firebase authentication&#10;- **Location**: Google Play Services Location API&#10;- **Image Loading**: Glide&#10;- **Build System**: Gradle with Kotlin DSL&#10;&#10;##  Project Status&#10;&#10;### ✅ Completed Features&#10;- [x] User authentication (login/signup)&#10;- [x] Persistent login sessions&#10;- [x] Location-based attraction discovery&#10;- [x] Category filtering system&#10;- [x] Add new locations feature&#10;- [x] Navigation drawer with menu&#10;- [x] Search functionality&#10;- [x] Community contribution system&#10;&#10;###  In Development&#10;- [ ] Google Maps integration&#10;- [ ] User profiles and preferences&#10;- [ ] Favorites system&#10;- [ ] Photo upload functionality&#10;- [ ] Dark theme support&#10;&#10;### ️ Future Plans&#10;- [ ] Offline map support&#10;- [ ] User reviews and ratings&#10;- [ ] Social features (follow travelers)&#10;- [ ] Advanced search filters&#10;- [ ] Multi-language support&#10;- [ ] AR features for attraction discovery&#10;&#10;##  Contributing&#10;&#10;We welcome contributions from the community! Here's how you can help:&#10;&#10;### Adding Attractions&#10;1. Use the &quot;Add Location&quot; feature in the app&#10;2. Provide detailed descriptions and quality images&#10;3. Follow our [Contributing Guidelines](docs/guides/contributing.md)&#10;&#10;### Code Contributions&#10;1. Fork the repository&#10;2. Create a feature branch (`git checkout -b feature/amazing-feature`)&#10;3. Commit your changes (`git commit -m 'Add amazing feature'`)&#10;4. Push to the branch (`git push origin feature/amazing-feature`)&#10;5. Open a Pull Request&#10;&#10;### Bug Reports&#10;- Use GitHub Issues to report bugs&#10;- Include device model, Android version, and steps to reproduce&#10;- Check [Troubleshooting Guide](docs/guides/troubleshooting.md) first&#10;&#10;##  Screenshots&#10;&#10;| Splash Screen | Home Screen | Add Location |&#10;|---------------|-------------|--------------|&#10;| ![Splash](img-Markdown/Splash_Screen.png) | ![Home](img-Markdown/Hidden_Sri_Lanka_home_screen.png) | ![Add](img-Markdown/Explor_and_Shere.png) |&#10;&#10;| Login | Location Details | Navigation |&#10;|-------|------------------|------------|&#10;| ![Login](img-Markdown/Login.png) | ![Details](img-Markdown/Location_Details.png) | ![Nav](img-Markdown/sidePanel.png) |&#10;&#10;##  License&#10;&#10;This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.&#10;&#10;##  Team&#10;&#10;**Developer**: S23010526  &#10;**University**: SLIIT (Sri Lanka Institute of Information Technology)  &#10;**Course**: Mobile Application Development  &#10;&#10;##  Acknowledgments&#10;&#10;- **Firebase** for providing robust backend services&#10;- **Material Design** for the beautiful UI components&#10;- **Sri Lankan Tourism Board** for inspiration&#10;- **Community Contributors** for sharing hidden gems&#10;- **SLIIT** for educational support&#10;&#10;##  Support&#10;&#10;- **Documentation**: Check our comprehensive [docs](docs/)&#10;- **Issues**: Use GitHub Issues for bug reports&#10;- **Contact**: Through app's &quot;About Us&quot; section&#10;&#10;##  Show Your Support&#10;&#10;If you find this project helpful, please consider:&#10;- ⭐ Starring the repository&#10;-  Reporting bugs and issues&#10;- ️ Contributing new attraction locations&#10;-  Sharing with fellow travelers&#10;&#10;---&#10;&#10;**Made with ❤️ for Sri Lankan travelers and adventure seekers**&#10;&#10;*Discover the island's hidden treasures, one location at a time* " />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.google.gms.google.services)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.s23010526.hiddensrilanka&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.s23010526.hiddensrilanka&quot;&#10;        minSdk = 24&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_1_8&#10;        targetCompatibility = JavaVersion.VERSION_1_8&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.activity)&#10;    implementation(libs.constraintlayout)&#10;&#10;    // --- Firebase Setup ---&#10;    // Firebase BoM -- Bill of Materials--&#10;    // This line manages all Firebase library versions.&#10;    implementation(platform(libs.firebase.bom))&#10;&#10;    // Versions are handled by the BoM so  dont need to  specify them here.&#10;    implementation(libs.firebase.auth)       // For  login system&#10;    implementation(libs.firebase.database)   // For login system&#10;    implementation(libs.firebase.firestore)  // For location content&#10;&#10;&#10;    implementation(libs.glide)&#10;    annotationProcessor(libs.glide.compiler)&#10;&#10;    // Google Play Servicesfor location&#10;    implementation(libs.play.services.location)&#10;&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;}&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.google.gms.google.services)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.s23010526.hiddensrilanka&quot;&#10;    compileSdk = 34  // Change from 35 to 34 for better compatibility&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.s23010526.hiddensrilanka&quot;&#10;        minSdk = 24&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11  // Update from VERSION_1_8&#10;        targetCompatibility = JavaVersion.VERSION_11  // Update from VERSION_1_8&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(libs.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.activity)&#10;    implementation(libs.constraintlayout)&#10;&#10;    // --- Firebase Setup ---&#10;    // Firebase BoM -- Bill of Materials--&#10;    // This line manages all Firebase library versions.&#10;    implementation(platform(libs.firebase.bom))&#10;&#10;    // Versions are handled by the BoM so  dont need to  specify them here.&#10;    implementation(libs.firebase.auth)       // For  login system&#10;    implementation(libs.firebase.database)   // For login system&#10;    implementation(libs.firebase.firestore)  // For location content&#10;    implementation(libs.firebase.storage)    // For image uploads - ADDED&#10;&#10;    implementation(libs.glide)&#10;    annotationProcessor(libs.glide.compiler)&#10;&#10;    // Google Play Services for location&#10;    implementation(libs.play.services.location)&#10;&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.ext.junit)&#10;    androidTestImplementation(libs.espresso.core)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/BaseActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/BaseActivity.java" />
              <option name="originalContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.Menu;&#10;import android.view.MenuItem;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.LayoutRes;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.ActionBarDrawerToggle;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.GravityCompat;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;import androidx.activity.OnBackPressedCallback;&#10;&#10;import com.google.android.material.navigation.NavigationView;&#10;import com.s23010526.hiddensrilanka.databinding.ActivityBaseBinding;&#10;&#10;public abstract class BaseActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {&#10;&#10;    protected ActivityBaseBinding binding; // Binding for the base layout&#10;    private ActionBarDrawerToggle drawerToggle;&#10;&#10;    @LayoutRes&#10;    protected abstract int getLayoutResourceId(); // Child activities need to provide their content layout&#10;&#10;    protected abstract String getActivityTitle(); // Child activities need to provide their titles&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        binding = ActivityBaseBinding.inflate(getLayoutInflater());&#10;        setContentView(binding.getRoot());&#10;&#10;        LayoutInflater inflater = LayoutInflater.from(this);&#10;        inflater.inflate(getLayoutResourceId(), binding.contentFrame, true);&#10;&#10;        // Setup Toolbar with custom layout&#10;        setSupportActionBar(binding.toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            // Disable the default title since we're using custom TextView&#10;            getSupportActionBar().setDisplayShowTitleEnabled(false);&#10;        }&#10;&#10;        // Set custom title text&#10;        TextView toolbarTitle = binding.toolbar.findViewById(R.id.toolbar_title);&#10;        if (toolbarTitle != null) {&#10;            toolbarTitle.setText(getActivityTitle());&#10;        }&#10;&#10;        // Setup search field functionality&#10;        EditText searchField = binding.toolbar.findViewById(R.id.toolbar_search_field);&#10;        ImageView searchIcon = binding.toolbar.findViewById(R.id.search_icon);&#10;&#10;        if (searchField != null &amp;&amp; searchIcon != null) {&#10;            // Handle search input&#10;            searchField.setOnEditorActionListener((v, actionId, event) -&gt; {&#10;                if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH) {&#10;                    String query = searchField.getText().toString().trim();&#10;                    if (!query.isEmpty()) {&#10;                        performSearch(query);&#10;                        searchField.clearFocus();&#10;                        // Hide keyboard&#10;                        android.view.inputmethod.InputMethodManager imm =&#10;                                (android.view.inputmethod.InputMethodManager) getSystemService(android.content.Context.INPUT_METHOD_SERVICE);&#10;                        imm.hideSoftInputFromWindow(searchField.getWindowToken(), 0);&#10;                    }&#10;                    return true;&#10;                }&#10;                return false;&#10;            });&#10;&#10;            // Handle search icon click&#10;            searchIcon.setOnClickListener(v -&gt; {&#10;                String query = searchField.getText().toString().trim();&#10;                if (!query.isEmpty()) {&#10;                    performSearch(query);&#10;                    searchField.clearFocus();&#10;                }&#10;            });&#10;        }&#10;&#10;        // Setup Navigation Drawer&#10;        drawerToggle = new ActionBarDrawerToggle(&#10;                this,&#10;                binding.drawerLayout,&#10;                binding.toolbar,&#10;                R.string.navigation_drawer_open,&#10;                R.string.navigation_drawer_close&#10;        );&#10;        binding.drawerLayout.addDrawerListener(drawerToggle);&#10;        drawerToggle.syncState();&#10;&#10;        binding.navView.setNavigationItemSelectedListener(this);&#10;        binding.navView.bringToFront();&#10;&#10;        // Handle back button press using OnBackPressedCallback (modern approach)&#10;        getOnBackPressedDispatcher().addCallback(this, new OnBackPressedCallback(true) {&#10;            @Override&#10;            public void handleOnBackPressed() {&#10;                if (binding.drawerLayout.isDrawerOpen(GravityCompat.START)) {&#10;                    binding.drawerLayout.closeDrawer(GravityCompat.START);&#10;                } else {&#10;                    setEnabled(false);&#10;                    getOnBackPressedDispatcher().onBackPressed();&#10;                }&#10;            }&#10;        });&#10;&#10;        // Handle WindowInsets for Edge to Edge display&#10;        ViewCompat.setOnApplyWindowInsetsListener(binding.drawerLayout, (v, windowInsets) -&gt; {&#10;            Insets systemBars = windowInsets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, 0, systemBars.right, systemBars.bottom);&#10;            return WindowInsetsCompat.CONSUMED;&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public boolean onNavigationItemSelected(@NonNull MenuItem item) {&#10;        int itemId = item.getItemId();&#10;        Intent intent = null;&#10;&#10;        Class&lt;?&gt; currentActivityClass = this.getClass();&#10;&#10;        if (itemId == R.id.nav_home) {&#10;            if (currentActivityClass != HomeActivity.class) {&#10;                intent = new Intent(this, HomeActivity.class);&#10;            }&#10;            Toast.makeText(this, &quot;Home Clicked&quot;, Toast.LENGTH_SHORT).show();&#10;        } else if (itemId == R.id.nav_settings) {&#10;            if (currentActivityClass != SettingsActivity.class) {&#10;                intent = new Intent(this, SettingsActivity.class);&#10;            }&#10;            Toast.makeText(this, &quot;Settings Clicked&quot;, Toast.LENGTH_SHORT).show();&#10;        } else if (itemId == R.id.nav_exp_map) {&#10;            if (currentActivityClass != FullMapViewActivity.class) {&#10;                intent = new Intent(this, FullMapViewActivity.class);&#10;            }&#10;            Toast.makeText(this, &quot;Map Page Clicked&quot;, Toast.LENGTH_SHORT).show();&#10;        } else if (itemId == R.id.nav_add_location) {&#10;            if (currentActivityClass != AddLocationActivity.class) {&#10;                intent = new Intent(this, AddLocationActivity.class);&#10;            }&#10;            Toast.makeText(this, &quot;Add Location Clicked&quot;, Toast.LENGTH_SHORT).show();&#10;        } else if (itemId == R.id.nav_favorit) {&#10;            Toast.makeText(this, &quot;Favorites Feature Coming Soon...&quot;, Toast.LENGTH_SHORT).show();&#10;        } else if (itemId == R.id.nav_about_us) {&#10;            if (currentActivityClass != AboutUsActivity.class) {&#10;                intent = new Intent(this, AboutUsActivity.class);&#10;            }&#10;            Toast.makeText(this, &quot;About Us Clicked&quot;, Toast.LENGTH_SHORT).show();&#10;        } else if (itemId == R.id.nav_profile) {&#10;            Toast.makeText(this, &quot;Profile Feature not available Now ...&quot;, Toast.LENGTH_SHORT).show();&#10;        } else if (itemId == R.id.nav_log_out) {&#10;            intent = new Intent(this, LoginActivity.class);&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;            Toast.makeText(this, &quot;Log Out&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;&#10;        if (intent != null) {&#10;            startActivity(intent);&#10;            if (itemId == R.id.nav_log_out) {&#10;                finish(); // Finish current activity after logging out&#10;            }&#10;        }&#10;&#10;        binding.drawerLayout.closeDrawer(GravityCompat.START);&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCreateOptionsMenu(Menu menu) {&#10;        // No need to inflate any menu items as search is now integrated&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (drawerToggle.onOptionsItemSelected(item)) { // Let drawer toggle handle hamburger icon&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;&#10;    protected void performSearch(String query) {&#10;        // Implement search functionality in child classes or here&#10;        Toast.makeText(this, &quot;Search performed for query: &quot; + query, Toast.LENGTH_SHORT).show();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.Menu;&#10;import android.view.MenuItem;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.LayoutRes;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.ActionBarDrawerToggle;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.GravityCompat;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;import androidx.activity.OnBackPressedCallback;&#10;&#10;import com.google.android.material.navigation.NavigationView;&#10;import com.s23010526.hiddensrilanka.databinding.ActivityBaseBinding;&#10;&#10;public abstract class BaseActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {&#10;&#10;    protected ActivityBaseBinding binding; // Binding for the base layout&#10;    private ActionBarDrawerToggle drawerToggle;&#10;    protected SessionManager sessionManager; // Add SessionManager&#10;&#10;    @LayoutRes&#10;    protected abstract int getLayoutResourceId(); // Child activities need to provide their content layout&#10;&#10;    protected abstract String getActivityTitle(); // Child activities need to provide their titles&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        // Initialize SessionManager&#10;        sessionManager = new SessionManager(this);&#10;&#10;        binding = ActivityBaseBinding.inflate(getLayoutInflater());&#10;        setContentView(binding.getRoot());&#10;&#10;        LayoutInflater inflater = LayoutInflater.from(this);&#10;        inflater.inflate(getLayoutResourceId(), binding.contentFrame, true);&#10;&#10;        // Setup Toolbar with custom layout&#10;        setSupportActionBar(binding.toolbar);&#10;        if (getSupportActionBar() != null) {&#10;            // Disable the default title since we're using custom TextView&#10;            getSupportActionBar().setDisplayShowTitleEnabled(false);&#10;        }&#10;&#10;        // Set custom title text&#10;        TextView toolbarTitle = binding.toolbar.findViewById(R.id.toolbar_title);&#10;        if (toolbarTitle != null) {&#10;            toolbarTitle.setText(getActivityTitle());&#10;        }&#10;&#10;        // Setup search field functionality&#10;        EditText searchField = binding.toolbar.findViewById(R.id.toolbar_search_field);&#10;        ImageView searchIcon = binding.toolbar.findViewById(R.id.search_icon);&#10;&#10;        if (searchField != null &amp;&amp; searchIcon != null) {&#10;            // Handle search input&#10;            searchField.setOnEditorActionListener((v, actionId, event) -&gt; {&#10;                if (actionId == android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH) {&#10;                    String query = searchField.getText().toString().trim();&#10;                    if (!query.isEmpty()) {&#10;                        performSearch(query);&#10;                        searchField.clearFocus();&#10;                        // Hide keyboard&#10;                        android.view.inputmethod.InputMethodManager imm =&#10;                                (android.view.inputmethod.InputMethodManager) getSystemService(android.content.Context.INPUT_METHOD_SERVICE);&#10;                        imm.hideSoftInputFromWindow(searchField.getWindowToken(), 0);&#10;                    }&#10;                    return true;&#10;                }&#10;                return false;&#10;            });&#10;&#10;            // Handle search icon click&#10;            searchIcon.setOnClickListener(v -&gt; {&#10;                String query = searchField.getText().toString().trim();&#10;                if (!query.isEmpty()) {&#10;                    performSearch(query);&#10;                    searchField.clearFocus();&#10;                }&#10;            });&#10;        }&#10;&#10;        // Setup Navigation Drawer&#10;        drawerToggle = new ActionBarDrawerToggle(&#10;                this,&#10;                binding.drawerLayout,&#10;                binding.toolbar,&#10;                R.string.navigation_drawer_open,&#10;                R.string.navigation_drawer_close&#10;        );&#10;        binding.drawerLayout.addDrawerListener(drawerToggle);&#10;        drawerToggle.syncState();&#10;&#10;        binding.navView.setNavigationItemSelectedListener(this);&#10;        binding.navView.bringToFront();&#10;&#10;        // Handle back button press using OnBackPressedCallback (modern approach)&#10;        getOnBackPressedDispatcher().addCallback(this, new OnBackPressedCallback(true) {&#10;            @Override&#10;            public void handleOnBackPressed() {&#10;                if (binding.drawerLayout.isDrawerOpen(GravityCompat.START)) {&#10;                    binding.drawerLayout.closeDrawer(GravityCompat.START);&#10;                } else {&#10;                    setEnabled(false);&#10;                    getOnBackPressedDispatcher().onBackPressed();&#10;                }&#10;            }&#10;        });&#10;&#10;        // Handle WindowInsets for Edge to Edge display&#10;        ViewCompat.setOnApplyWindowInsetsListener(binding.drawerLayout, (v, windowInsets) -&gt; {&#10;            Insets systemBars = windowInsets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, 0, systemBars.right, systemBars.bottom);&#10;            return WindowInsetsCompat.CONSUMED;&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public boolean onNavigationItemSelected(@NonNull MenuItem item) {&#10;        int itemId = item.getItemId();&#10;        Intent intent = null;&#10;&#10;        Class&lt;?&gt; currentActivityClass = this.getClass();&#10;&#10;        if (itemId == R.id.nav_home) {&#10;            if (currentActivityClass != HomeActivity.class) {&#10;                intent = new Intent(this, HomeActivity.class);&#10;            }&#10;            Toast.makeText(this, &quot;Home Clicked&quot;, Toast.LENGTH_SHORT).show();&#10;        } else if (itemId == R.id.nav_settings) {&#10;            if (currentActivityClass != SettingsActivity.class) {&#10;                intent = new Intent(this, SettingsActivity.class);&#10;            }&#10;            Toast.makeText(this, &quot;Settings Clicked&quot;, Toast.LENGTH_SHORT).show();&#10;        } else if (itemId == R.id.nav_exp_map) {&#10;            if (currentActivityClass != FullMapViewActivity.class) {&#10;                intent = new Intent(this, FullMapViewActivity.class);&#10;            }&#10;            Toast.makeText(this, &quot;Map Page Clicked&quot;, Toast.LENGTH_SHORT).show();&#10;        } else if (itemId == R.id.nav_add_location) {&#10;            if (currentActivityClass != AddLocationActivity.class) {&#10;                intent = new Intent(this, AddLocationActivity.class);&#10;            }&#10;            Toast.makeText(this, &quot;Add Location Clicked&quot;, Toast.LENGTH_SHORT).show();&#10;        } else if (itemId == R.id.nav_favorit) {&#10;            Toast.makeText(this, &quot;Favorites Feature Coming Soon...&quot;, Toast.LENGTH_SHORT).show();&#10;        } else if (itemId == R.id.nav_about_us) {&#10;            if (currentActivityClass != AboutUsActivity.class) {&#10;                intent = new Intent(this, AboutUsActivity.class);&#10;            }&#10;            Toast.makeText(this, &quot;About Us Clicked&quot;, Toast.LENGTH_SHORT).show();&#10;        } else if (itemId == R.id.nav_profile) {&#10;            Toast.makeText(this, &quot;Profile Feature not available Now ...&quot;, Toast.LENGTH_SHORT).show();&#10;        } else if (itemId == R.id.nav_log_out) {&#10;            // Clear session data&#10;            sessionManager.logoutUser();&#10;            &#10;            // Redirect to WelcomeActivity and clear the activity stack&#10;            intent = new Intent(this, WelcomeActivity.class);&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;            Toast.makeText(this, &quot;Logged out successfully&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;&#10;        if (intent != null) {&#10;            startActivity(intent);&#10;            if (itemId == R.id.nav_log_out) {&#10;                finish(); // Finish current activity after logging out&#10;            }&#10;        }&#10;&#10;        binding.drawerLayout.closeDrawer(GravityCompat.START);&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean onCreateOptionsMenu(Menu menu) {&#10;        // No need to inflate any menu items as search is now integrated&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public boolean onOptionsItemSelected(@NonNull MenuItem item) {&#10;        if (drawerToggle.onOptionsItemSelected(item)) { // Let drawer toggle handle hamburger icon&#10;            return true;&#10;        }&#10;        return super.onOptionsItemSelected(item);&#10;    }&#10;&#10;&#10;    protected void performSearch(String query) {&#10;        // Implement search functionality in child classes or here&#10;        Toast.makeText(this, &quot;Search performed for query: &quot; + query, Toast.LENGTH_SHORT).show();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/HomeActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/HomeActivity.java" />
              <option name="originalContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.Manifest;&#10;import android.annotation.SuppressLint;&#10;import android.content.pm.PackageManager;&#10;import android.location.Address;&#10;import android.location.Geocoder;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.View;&#10;import android.widget.EditText;&#10;import android.widget.ProgressBar;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.core.app.ActivityCompat;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.location.Priority;&#10;import com.google.android.material.chip.Chip;&#10;import com.google.android.material.chip.ChipGroup;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.Query;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class HomeActivity extends BaseActivity {&#10;&#10;    // ---Declare all the variables we will need ---&#10;    private static final int LOCATION_PERMISSION_REQUEST_CODE = 1;&#10;    private static final String TAG = &quot;HomeActivity&quot;;&#10;&#10;    private AttractionAdapter adapter;&#10;    private List&lt;Attraction&gt; attractionList;&#10;&#10;    private ProgressBar progressBar;&#10;    private ChipGroup chipGroup;&#10;&#10;    private FirebaseFirestore firestoreDb;&#10;    private FusedLocationProviderClient fusedLocationProviderClient;&#10;    private String currentCity = null;&#10;&#10;    // Add flag to prevent multiple location requests&#10;    private boolean isLocationRequestInProgress = false;&#10;    private boolean hasInitialLocationLoad = false;&#10;&#10;    @Override&#10;    protected int getLayoutResourceId() {&#10;        return R.layout.activity_home;&#10;    }&#10;&#10;    @Override&#10;    protected String getActivityTitle() {&#10;        return getString(R.string.nav_home_title);&#10;    }&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        //Initialize everything&#10;        firestoreDb = FirebaseFirestore.getInstance();&#10;        fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);&#10;&#10;        progressBar = findViewById(R.id.progressBar);&#10;        chipGroup = findViewById(R.id.chip_group_filters);&#10;        RecyclerView recyclerView = findViewById(R.id.recyclerView_attractions);&#10;&#10;        attractionList = new ArrayList&lt;&gt;();&#10;        adapter = new AttractionAdapter(attractionList);&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(this));&#10;        recyclerView.setAdapter(adapter);&#10;&#10;        checkLocationPermission();&#10;        setupFilterListener();&#10;        setupRefreshButton(); // Add refresh functionality&#10;    }&#10;&#10;    // Add refresh button functionality&#10;    private void setupRefreshButton() {&#10;        // Make the search functionality work for manual city override&#10;        findViewById(R.id.search_icon).setOnClickListener(v -&gt; {&#10;            EditText searchField = findViewById(R.id.toolbar_search_field);&#10;            String searchQuery = searchField.getText().toString().trim();&#10;&#10;            if (!searchQuery.isEmpty()) {&#10;                // Manual city override - search for attractions in specified city&#10;                currentCity = searchQuery;&#10;                Toast.makeText(this, &quot; Searching attractions in: &quot; + searchQuery, Toast.LENGTH_SHORT).show();&#10;                loadAttractionsFromFirestore(searchQuery, &quot;All&quot;);&#10;&#10;                // Clear search field and hide keyboard&#10;                searchField.setText(&quot;&quot;);&#10;                searchField.clearFocus();&#10;                android.view.inputmethod.InputMethodManager imm =&#10;                    (android.view.inputmethod.InputMethodManager) getSystemService(android.content.Context.INPUT_METHOD_SERVICE);&#10;                imm.hideSoftInputFromWindow(searchField.getWindowToken(), 0);&#10;            } else {&#10;                // Regular refresh functionality&#10;                Toast.makeText(this, &quot; Refreshing location...&quot;, Toast.LENGTH_SHORT).show();&#10;                refreshLocation();&#10;            }&#10;        });&#10;    }&#10;&#10;    // Method to refresh location and attractions&#10;    private void refreshLocation() {&#10;        if (isLocationRequestInProgress) {&#10;            Log.d(TAG, &quot;Location request already in progress, skipping refresh&quot;);&#10;            Toast.makeText(this, &quot;Location request already in progress...&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        // Clear current data&#10;        currentCity = null;&#10;        attractionList.clear();&#10;        notifyDataSetChanged();&#10;        hasInitialLocationLoad = false; // Reset flag for manual refresh&#10;&#10;        // Get fresh location&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {&#10;            getCurrentCity();&#10;        } else {&#10;            Toast.makeText(this, &quot;Location permission needed for refresh&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    // Helper method to update adapter efficiently&#10;    private void notifyDataSetChanged() {&#10;        if (adapter != null) {&#10;            adapter.notifyDataSetChanged();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Only refresh location if we haven't done initial load and no request is in progress&#10;        if (!hasInitialLocationLoad &amp;&amp; !isLocationRequestInProgress &amp;&amp; currentCity == null) {&#10;            Log.d(TAG, &quot;onResume: Performing initial location load&quot;);&#10;            refreshLocation();&#10;        } else {&#10;            Log.d(TAG, &quot;onResume: Skipping location refresh - already loaded or in progress&quot;);&#10;        }&#10;    }&#10;&#10;    // Location Handling Methods&#10;    private void checkLocationPermission() {&#10;        if (isLocationRequestInProgress) {&#10;            Log.d(TAG, &quot;Location request already in progress, skipping&quot;);&#10;            return;&#10;        }&#10;&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {&#10;            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, LOCATION_PERMISSION_REQUEST_CODE);&#10;        } else {&#10;            getCurrentCity();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults);&#10;        if (requestCode == LOCATION_PERMISSION_REQUEST_CODE) {&#10;            if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;                getCurrentCity();&#10;            } else {&#10;                Toast.makeText(this, &quot;Location permission is required to show nearby attractions. Loading default attractions...&quot;, Toast.LENGTH_LONG).show();&#10;                // Load default attractions when permission denied&#10;                loadDefaultAttractions();&#10;            }&#10;        }&#10;    }&#10;&#10;    @SuppressLint(&quot;MissingPermission&quot;)&#10;    private void getCurrentCity() {&#10;        if (isLocationRequestInProgress) {&#10;            Log.d(TAG, &quot;Location request already in progress, skipping getCurrentCity&quot;);&#10;            return;&#10;        }&#10;&#10;        isLocationRequestInProgress = true;&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        Log.d(TAG, &quot;Starting location detection...&quot;);&#10;&#10;        // Clear any cached location first&#10;        fusedLocationProviderClient.flushLocations();&#10;&#10;        fusedLocationProviderClient.getCurrentLocation(Priority.PRIORITY_HIGH_ACCURACY, null)&#10;                .addOnSuccessListener(this, location -&gt; {&#10;                    isLocationRequestInProgress = false;&#10;                    hasInitialLocationLoad = true;&#10;&#10;                    if (location != null) {&#10;                        Log.d(TAG, &quot;Location found: &quot; + location.getLatitude() + &quot;, &quot; + location.getLongitude());&#10;&#10;                        // Always try to geocode the coordinates to get city name&#10;                        Geocoder geocoder = new Geocoder(this, Locale.getDefault());&#10;                        try {&#10;                            List&lt;Address&gt; addresses = geocoder.getFromLocation(location.getLatitude(), location.getLongitude(), 1);&#10;                            if (addresses != null &amp;&amp; !addresses.isEmpty()) {&#10;                                Address address = addresses.get(0);&#10;&#10;                                // Try multiple ways to get city name&#10;                                String city = address.getLocality();&#10;                                if (city == null) city = address.getSubAdminArea();&#10;                                if (city == null) city = address.getAdminArea();&#10;                                if (city == null) city = address.getSubLocality();&#10;&#10;                                Log.d(TAG, &quot;Geocoded city: &quot; + city);&#10;                                Log.d(TAG, &quot;Full geocoded address: &quot; + address);&#10;&#10;                                if (city != null) {&#10;                                    currentCity = normalizeCityName(city);&#10;&#10;                                    // Check if location is in Sri Lanka&#10;                                    if (isInSriLanka(location.getLatitude(), location.getLongitude())) {&#10;                                        Toast.makeText(this, &quot; Detected location: &quot; + currentCity, Toast.LENGTH_SHORT).show();&#10;                                    } else {&#10;                                        Toast.makeText(this, &quot; Foreign location detected: &quot; + currentCity +&#10;                                                     &quot;\n Tap refresh to try again or test with Sri Lankan cities&quot;, Toast.LENGTH_LONG).show();&#10;                                    }&#10;&#10;                                    // Always check Firebase for attractions in the detected city&#10;                                    loadAttractionsFromFirestore(currentCity, &quot;All&quot;);&#10;                                    return;&#10;                                } else {&#10;                                    Log.w(TAG, &quot;Could not determine city name from geocoding&quot;);&#10;                                    showLocationFallbackOptions();&#10;                                }&#10;                            } else {&#10;                                Log.w(TAG, &quot;No addresses found for location&quot;);&#10;                                showLocationFallbackOptions();&#10;                            }&#10;                        } catch (IOException e) {&#10;                            Log.e(TAG, &quot;Geocoder error: &quot; + e.getMessage());&#10;                            showLocationFallbackOptions();&#10;                        }&#10;                    } else {&#10;                        Log.w(TAG, &quot;Location is null&quot;);&#10;                        showLocationFallbackOptions();&#10;                    }&#10;                })&#10;                .addOnFailureListener(this, e -&gt; {&#10;                    isLocationRequestInProgress = false;&#10;                    hasInitialLocationLoad = true;&#10;                    Log.e(TAG, &quot;Location error: &quot; + e.getMessage());&#10;                    showLocationFallbackOptions();&#10;                });&#10;    }&#10;&#10;    // New method to show fallback options when location detection fails&#10;    private void showLocationFallbackOptions() {&#10;        isLocationRequestInProgress = false;&#10;        hasInitialLocationLoad = true;&#10;        progressBar.setVisibility(View.GONE);&#10;        Toast.makeText(this, &quot; Location not detected. Showing default attractions.\n Tap refresh icon to try again&quot;, Toast.LENGTH_LONG).show();&#10;&#10;        // Try some Sri Lankan cities as fallback&#10;        String[] sriLankanCities = {&quot;Colombo&quot;, &quot;Kandy&quot;, &quot;Galle&quot;, &quot;Anuradhapura&quot;, &quot;Nuwara Eliya&quot;, &quot;Kahawatta&quot;};&#10;&#10;        for (String city : sriLankanCities) {&#10;            currentCity = city;&#10;            loadAttractionsFromFirestore(city, &quot;All&quot;);&#10;            break; // Try first available city&#10;        }&#10;    }&#10;&#10;    // Show message when location cannot be detected&#10;    private void showNoLocationMessage() {&#10;        progressBar.setVisibility(View.GONE);&#10;        Toast.makeText(this, &quot;Unable to detect your location. Please check GPS settings.&quot;, Toast.LENGTH_LONG).show();&#10;&#10;        // Clear the attractions list and show message&#10;        attractionList.clear();&#10;        adapter.notifyDataSetChanged();&#10;    }&#10;&#10;    // New method to load default attractions when location fails&#10;    private void loadDefaultAttractions() {&#10;        Log.d(TAG, &quot;Loading default attractions from fallback cities&quot;);&#10;        currentCity = &quot;Colombo&quot;; // Set default city&#10;        loadAttractionsFromFirestore(currentCity, &quot;All&quot;);&#10;    }&#10;&#10;    // Improved Firestore loading with better error handling and fallback&#10;    private void loadAttractionsFromFirestore(String cityName, String category) {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        attractionList.clear();&#10;&#10;        String formattedCityName = cityName.trim();&#10;        Log.d(TAG, &quot;Querying for city: '&quot; + formattedCityName + &quot;' and category: '&quot; + category + &quot;'&quot;);&#10;&#10;        // Try exact city match first&#10;        tryLoadFromCity(formattedCityName, category, 0);&#10;    }&#10;&#10;    private void tryLoadFromCity(String cityName, String category, int fallbackIndex) {&#10;        Query query = firestoreDb.collection(&quot;cities&quot;).document(cityName).collection(&quot;attractions&quot;);&#10;&#10;        if (!&quot;All&quot;.equalsIgnoreCase(category)) {&#10;            query = query.whereEqualTo(&quot;category&quot;, category);&#10;        }&#10;&#10;        query.get().addOnCompleteListener(task -&gt; {&#10;            if (task.isSuccessful()) {&#10;                Log.d(TAG, &quot;Query successful for &quot; + cityName + &quot;. Found &quot; + task.getResult().size() + &quot; documents.&quot;);&#10;&#10;                if (!task.getResult().isEmpty()) {&#10;                    // Found attractions for this city - show them&#10;                    for (QueryDocumentSnapshot document : task.getResult()) {&#10;                        Attraction attraction = document.toObject(Attraction.class);&#10;                        attraction.setDocumentId(document.getId());&#10;                        attractionList.add(attraction);&#10;                        Log.d(TAG, &quot;Added attraction: &quot; + attraction.getName());&#10;                    }&#10;                    adapter.notifyDataSetChanged();&#10;                    progressBar.setVisibility(View.GONE);&#10;&#10;                    Toast.makeText(this, &quot;Found &quot; + attractionList.size() + &quot; attractions in &quot; + cityName, Toast.LENGTH_SHORT).show();&#10;                } else {&#10;                    // No attractions found for this city - show community growth entry&#10;                    Log.d(TAG, &quot;No attractions found for &quot; + cityName + &quot;, showing community growth entry&quot;);&#10;                    showPlaceholderEntry(cityName); // Changed back to show the grow database entry&#10;                }&#10;            } else {&#10;                Exception exception = task.getException();&#10;                Log.e(TAG, &quot;Error getting documents from &quot; + cityName + &quot;: &quot;, exception);&#10;&#10;                progressBar.setVisibility(View.GONE);&#10;                if (exception != null &amp;&amp; exception.getMessage() != null &amp;&amp; exception.getMessage().contains(&quot;PERMISSION_DENIED&quot;)) {&#10;                    Toast.makeText(this, &quot;⚠️ Firebase Database Access Denied!\nPlease update Firebase Security Rules.&quot;, Toast.LENGTH_LONG).show();&#10;                } else {&#10;                    Toast.makeText(this, &quot;Error loading data. Please check your internet connection.&quot;, Toast.LENGTH_LONG).show();&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    // Show message when no attractions found for the detected city&#10;    private void showNoAttractionsMessage(String cityName) {&#10;        progressBar.setVisibility(View.GONE);&#10;        attractionList.clear();&#10;        adapter.notifyDataSetChanged();&#10;&#10;        Toast.makeText(this, &quot;No attractions found in &quot; + cityName + &quot;. Be the first to add some!&quot;, Toast.LENGTH_LONG).show();&#10;    }&#10;&#10;    // Helper method to check if coordinates are in Sri Lanka&#10;    private boolean isInSriLanka(double lat, double lng) {&#10;        // Sri Lanka boundaries (approximate)&#10;        return lat &gt;= 5.9 &amp;&amp; lat &lt;= 9.9 &amp;&amp; lng &gt;= 79.5 &amp;&amp; lng &lt;= 81.9;&#10;    }&#10;&#10;    // Helper method to normalize city names for better Firebase matching&#10;    private String normalizeCityName(String cityName) {&#10;        if (cityName == null) return null;&#10;&#10;        String normalized = cityName.trim();&#10;&#10;        // Handle common Sri Lankan city name variations&#10;        switch (normalized.toLowerCase()) {&#10;            case &quot;colombo municipal council&quot;:&#10;            case &quot;colombo district&quot;:&#10;                return &quot;Colombo&quot;;&#10;            case &quot;kandy municipal council&quot;:&#10;            case &quot;kandy district&quot;:&#10;                return &quot;Kandy&quot;;&#10;            case &quot;galle municipal council&quot;:&#10;            case &quot;galle district&quot;:&#10;                return &quot;Galle&quot;;&#10;            case &quot;anuradhapura district&quot;:&#10;                return &quot;Anuradhapura&quot;;&#10;            case &quot;polonnaruwa district&quot;:&#10;                return &quot;Polonnaruwa&quot;;&#10;            case &quot;nuwara eliya district&quot;:&#10;                return &quot;Nuwara Eliya&quot;;&#10;            case &quot;matale district&quot;:&#10;                return &quot;Matale&quot;;&#10;            case &quot;kurunegala district&quot;:&#10;                return &quot;Kurunegala&quot;;&#10;            default:&#10;                return normalized;&#10;        }&#10;    }&#10;&#10;    private void setupFilterListener() {&#10;        chipGroup.setOnCheckedChangeListener((group, checkedId) -&gt; {&#10;            if (checkedId == View.NO_ID) {&#10;                return;&#10;            }&#10;            Chip selectedChip = findViewById(checkedId);&#10;            if (selectedChip != null) {&#10;                String selectedCategory = selectedChip.getText().toString();&#10;                String cityToQuery = currentCity != null ? currentCity : &quot;Colombo&quot;;&#10;                loadAttractionsFromFirestore(cityToQuery, selectedCategory);&#10;            }&#10;        });&#10;    }&#10;&#10;    // Add this method to your HomeActivity class&#10;    private void seedSampleData() {&#10;        DataSeeder seeder = new DataSeeder();&#10;        seeder.seedSampleAttractions();&#10;        Toast.makeText(this, &quot;Sample attractions added!&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    // Method to show placeholder entry when no attractions found&#10;    private void showPlaceholderEntry(String cityName) {&#10;        progressBar.setVisibility(View.GONE);&#10;&#10;        // Create placeholder attraction&#10;        Attraction placeholder = new Attraction();&#10;        placeholder.setDocumentId(&quot;placeholder_&quot; + cityName);&#10;        placeholder.setName(&quot;Help Us Grow Our Database! &quot;);&#10;        placeholder.setCategory(&quot;Community Contribution&quot;);&#10;        placeholder.setDescription(&quot;Unfortunately, we haven't updated our database with attractions from &quot; + cityName + &quot; yet. &quot; +&#10;                &quot;Please consider adding interesting locations near your area to help other travelers discover amazing places!&quot;);&#10;        placeholder.setYoutubeUrl(&quot;&quot;);&#10;&#10;        // Set placeholder image - let the adapter handle the icon&#10;        List&lt;String&gt; placeholderImages = new ArrayList&lt;&gt;();&#10;        // Don't add any image URL - the adapter will show the special icon&#10;        placeholder.setImages(placeholderImages);&#10;&#10;        placeholder.setContributorName(&quot;Hidden Sri Lanka Team&quot;);&#10;        placeholder.setContributedAt(System.currentTimeMillis());&#10;        placeholder.setPlaceholder(true); // Mark as placeholder&#10;&#10;        // Add to attraction list&#10;        attractionList.clear();&#10;        attractionList.add(placeholder);&#10;        adapter.notifyDataSetChanged();&#10;&#10;        Log.d(TAG, &quot;Placeholder entry added for &quot; + cityName);&#10;        Toast.makeText(this, &quot;No attractions found for &quot; + cityName + &quot;. Help us by adding some!&quot;, Toast.LENGTH_LONG).show();&#10;    }&#10;&#10;    // Call this method once to populate your database (you can trigger it with a button or on first run)&#10;}&#10;" />
              <option name="updatedContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.Manifest;&#10;import android.annotation.SuppressLint;&#10;import android.content.pm.PackageManager;&#10;import android.location.Address;&#10;import android.location.Geocoder;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.View;&#10;import android.widget.EditText;&#10;import android.widget.ProgressBar;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.core.app.ActivityCompat;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.location.Priority;&#10;import com.google.android.material.chip.Chip;&#10;import com.google.android.material.chip.ChipGroup;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.Query;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class HomeActivity extends BaseActivity {&#10;&#10;    // ---Declare all the variables we will need ---&#10;    private static final int LOCATION_PERMISSION_REQUEST_CODE = 1;&#10;    private static final String TAG = &quot;HomeActivity&quot;;&#10;&#10;    private AttractionAdapter adapter;&#10;    private List&lt;Attraction&gt; attractionList;&#10;&#10;    private ProgressBar progressBar;&#10;    private ChipGroup chipGroup;&#10;&#10;    private FirebaseFirestore firestoreDb;&#10;    private FusedLocationProviderClient fusedLocationProviderClient;&#10;    private String currentCity = null;&#10;&#10;    // Add flag to prevent multiple location requests&#10;    private boolean isLocationRequestInProgress = false;&#10;    private boolean hasInitialLocationLoad = false;&#10;&#10;    @Override&#10;    protected int getLayoutResourceId() {&#10;        return R.layout.activity_home;&#10;    }&#10;&#10;    @Override&#10;    protected String getActivityTitle() {&#10;        return getString(R.string.nav_home_title);&#10;    }&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;&#10;        //Initialize everything&#10;        firestoreDb = FirebaseFirestore.getInstance();&#10;        fusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);&#10;&#10;        progressBar = findViewById(R.id.progressBar);&#10;        chipGroup = findViewById(R.id.chip_group_filters);&#10;        RecyclerView recyclerView = findViewById(R.id.recyclerView_attractions);&#10;&#10;        attractionList = new ArrayList&lt;&gt;();&#10;        adapter = new AttractionAdapter(attractionList);&#10;        recyclerView.setLayoutManager(new LinearLayoutManager(this));&#10;        recyclerView.setAdapter(adapter);&#10;&#10;        checkLocationPermission();&#10;        setupFilterListener();&#10;        setupRefreshButton(); // Add refresh functionality&#10;    }&#10;&#10;    // Add refresh button functionality&#10;    private void setupRefreshButton() {&#10;        // Make the search functionality work for manual city override&#10;        findViewById(R.id.search_icon).setOnClickListener(v -&gt; {&#10;            EditText searchField = findViewById(R.id.toolbar_search_field);&#10;            String searchQuery = searchField.getText().toString().trim();&#10;&#10;            if (!searchQuery.isEmpty()) {&#10;                // Manual city override - search for attractions in specified city&#10;                currentCity = searchQuery;&#10;                Toast.makeText(this, &quot; Searching attractions in: &quot; + searchQuery, Toast.LENGTH_SHORT).show();&#10;                loadAttractionsFromFirestore(searchQuery, &quot;All&quot;);&#10;&#10;                // Clear search field and hide keyboard&#10;                searchField.setText(&quot;&quot;);&#10;                searchField.clearFocus();&#10;                android.view.inputmethod.InputMethodManager imm =&#10;                    (android.view.inputmethod.InputMethodManager) getSystemService(android.content.Context.INPUT_METHOD_SERVICE);&#10;                imm.hideSoftInputFromWindow(searchField.getWindowToken(), 0);&#10;            } else {&#10;                // Regular refresh functionality&#10;                Toast.makeText(this, &quot; Refreshing location...&quot;, Toast.LENGTH_SHORT).show();&#10;                refreshLocation();&#10;            }&#10;        });&#10;    }&#10;&#10;    // Method to refresh location and attractions&#10;    private void refreshLocation() {&#10;        if (isLocationRequestInProgress) {&#10;            Log.d(TAG, &quot;Location request already in progress, skipping refresh&quot;);&#10;            Toast.makeText(this, &quot;Location request already in progress...&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        // Clear current data&#10;        currentCity = null;&#10;        attractionList.clear();&#10;        notifyDataSetChanged();&#10;        hasInitialLocationLoad = false; // Reset flag for manual refresh&#10;&#10;        // Get fresh location&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {&#10;            getCurrentCity();&#10;        } else {&#10;            Toast.makeText(this, &quot;Location permission needed for refresh&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    // Helper method to update adapter efficiently&#10;    private void notifyDataSetChanged() {&#10;        if (adapter != null) {&#10;            adapter.notifyDataSetChanged();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        // Only refresh location if we haven't done initial load and no request is in progress&#10;        if (!hasInitialLocationLoad &amp;&amp; !isLocationRequestInProgress &amp;&amp; currentCity == null) {&#10;            Log.d(TAG, &quot;onResume: Performing initial location load&quot;);&#10;            refreshLocation();&#10;        } else {&#10;            Log.d(TAG, &quot;onResume: Skipping location refresh - already loaded or in progress&quot;);&#10;        }&#10;    }&#10;&#10;    // Location Handling Methods&#10;    private void checkLocationPermission() {&#10;        if (isLocationRequestInProgress) {&#10;            Log.d(TAG, &quot;Location request already in progress, skipping&quot;);&#10;            return;&#10;        }&#10;&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {&#10;            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, LOCATION_PERMISSION_REQUEST_CODE);&#10;        } else {&#10;            getCurrentCity();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults);&#10;        if (requestCode == LOCATION_PERMISSION_REQUEST_CODE) {&#10;            if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;                getCurrentCity();&#10;            } else {&#10;                Toast.makeText(this, &quot;Location permission is required to show nearby attractions. Loading default attractions...&quot;, Toast.LENGTH_LONG).show();&#10;                // Load default attractions when permission denied&#10;                loadDefaultAttractions();&#10;            }&#10;        }&#10;    }&#10;&#10;    @SuppressLint(&quot;MissingPermission&quot;)&#10;    private void getCurrentCity() {&#10;        if (isLocationRequestInProgress) {&#10;            Log.d(TAG, &quot;Location request already in progress, skipping getCurrentCity&quot;);&#10;            return;&#10;        }&#10;&#10;        isLocationRequestInProgress = true;&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        Log.d(TAG, &quot;Starting location detection...&quot;);&#10;&#10;        // Clear any cached location first&#10;        fusedLocationProviderClient.flushLocations();&#10;&#10;        fusedLocationProviderClient.getCurrentLocation(Priority.PRIORITY_HIGH_ACCURACY, null)&#10;                .addOnSuccessListener(this, location -&gt; {&#10;                    isLocationRequestInProgress = false;&#10;                    hasInitialLocationLoad = true;&#10;&#10;                    if (location != null) {&#10;                        Log.d(TAG, &quot;Location found: &quot; + location.getLatitude() + &quot;, &quot; + location.getLongitude());&#10;&#10;                        // Always try to geocode the coordinates to get city name&#10;                        Geocoder geocoder = new Geocoder(this, Locale.getDefault());&#10;                        try {&#10;                            List&lt;Address&gt; addresses = geocoder.getFromLocation(location.getLatitude(), location.getLongitude(), 1);&#10;                            if (addresses != null &amp;&amp; !addresses.isEmpty()) {&#10;                                Address address = addresses.get(0);&#10;&#10;                                // Try multiple ways to get city name&#10;                                String city = address.getLocality();&#10;                                if (city == null) city = address.getSubAdminArea();&#10;                                if (city == null) city = address.getAdminArea();&#10;                                if (city == null) city = address.getSubLocality();&#10;&#10;                                Log.d(TAG, &quot;Geocoded city: &quot; + city);&#10;                                Log.d(TAG, &quot;Full geocoded address: &quot; + address);&#10;&#10;                                if (city != null) {&#10;                                    currentCity = normalizeCityName(city);&#10;&#10;                                    // Check if location is in Sri Lanka&#10;                                    if (isInSriLanka(location.getLatitude(), location.getLongitude())) {&#10;                                        Toast.makeText(this, &quot; Detected location: &quot; + currentCity, Toast.LENGTH_SHORT).show();&#10;                                    } else {&#10;                                        Toast.makeText(this, &quot; Foreign location detected: &quot; + currentCity +&#10;                                                     &quot;\n Tap refresh to try again or test with Sri Lankan cities&quot;, Toast.LENGTH_LONG).show();&#10;                                    }&#10;&#10;                                    // Always check Firebase for attractions in the detected city&#10;                                    loadAttractionsFromFirestore(currentCity, &quot;All&quot;);&#10;                                    return;&#10;                                } else {&#10;                                    Log.w(TAG, &quot;Could not determine city name from geocoding&quot;);&#10;                                    showLocationFallbackOptions();&#10;                                }&#10;                            } else {&#10;                                Log.w(TAG, &quot;No addresses found for location&quot;);&#10;                                showLocationFallbackOptions();&#10;                            }&#10;                        } catch (IOException e) {&#10;                            Log.e(TAG, &quot;Geocoder error: &quot; + e.getMessage());&#10;                            showLocationFallbackOptions();&#10;                        }&#10;                    } else {&#10;                        Log.w(TAG, &quot;Location is null&quot;);&#10;                        showLocationFallbackOptions();&#10;                    }&#10;                })&#10;                .addOnFailureListener(this, e -&gt; {&#10;                    isLocationRequestInProgress = false;&#10;                    hasInitialLocationLoad = true;&#10;                    Log.e(TAG, &quot;Location error: &quot; + e.getMessage());&#10;                    showLocationFallbackOptions();&#10;                });&#10;    }&#10;&#10;    // New method to show fallback options when location detection fails&#10;    private void showLocationFallbackOptions() {&#10;        isLocationRequestInProgress = false;&#10;        hasInitialLocationLoad = true;&#10;        progressBar.setVisibility(View.GONE);&#10;        Toast.makeText(this, &quot; Location not detected. Showing default attractions.\n Tap refresh icon to try again&quot;, Toast.LENGTH_LONG).show();&#10;&#10;        // Try some Sri Lankan cities as fallback&#10;        String[] sriLankanCities = {&quot;Colombo&quot;, &quot;Kandy&quot;, &quot;Galle&quot;, &quot;Anuradhapura&quot;, &quot;Nuwara Eliya&quot;, &quot;Kahawatta&quot;};&#10;&#10;        for (String city : sriLankanCities) {&#10;            currentCity = city;&#10;            loadAttractionsFromFirestore(city, &quot;All&quot;);&#10;            break; // Try first available city&#10;        }&#10;    }&#10;&#10;    // Show message when location cannot be detected&#10;    private void showNoLocationMessage() {&#10;        progressBar.setVisibility(View.GONE);&#10;        Toast.makeText(this, &quot;Unable to detect your location. Please check GPS settings.&quot;, Toast.LENGTH_LONG).show();&#10;&#10;        // Clear the attractions list and show message&#10;        attractionList.clear();&#10;        adapter.notifyDataSetChanged();&#10;    }&#10;&#10;    // New method to load default attractions when location fails&#10;    private void loadDefaultAttractions() {&#10;        Log.d(TAG, &quot;Loading default attractions from fallback cities&quot;);&#10;        currentCity = &quot;Colombo&quot;; // Set default city&#10;        loadAttractionsFromFirestore(currentCity, &quot;All&quot;);&#10;    }&#10;&#10;    // Improved Firestore loading with better error handling and fallback&#10;    private void loadAttractionsFromFirestore(String cityName, String category) {&#10;        progressBar.setVisibility(View.VISIBLE);&#10;        attractionList.clear();&#10;&#10;        String formattedCityName = cityName.trim();&#10;        Log.d(TAG, &quot;Querying for city: '&quot; + formattedCityName + &quot;' and category: '&quot; + category + &quot;'&quot;);&#10;&#10;        // Try exact city match first&#10;        tryLoadFromCity(formattedCityName, category, 0);&#10;    }&#10;&#10;    private void tryLoadFromCity(String cityName, String category, int fallbackIndex) {&#10;        Query query = firestoreDb.collection(&quot;cities&quot;).document(cityName).collection(&quot;attractions&quot;);&#10;&#10;        // Only apply category filter if it's not &quot;All&quot;&#10;        if (!&quot;All&quot;.equalsIgnoreCase(category)) {&#10;            query = query.whereEqualTo(&quot;category&quot;, category);&#10;        }&#10;&#10;        query.get().addOnCompleteListener(task -&gt; {&#10;            if (task.isSuccessful()) {&#10;                Log.d(TAG, &quot;Query successful for &quot; + cityName + &quot;. Found &quot; + task.getResult().size() + &quot; documents.&quot;);&#10;&#10;                if (!task.getResult().isEmpty()) {&#10;                    // Clear previous results and add new ones&#10;                    attractionList.clear();&#10;                    &#10;                    // Found attractions for this city - show them&#10;                    for (QueryDocumentSnapshot document : task.getResult()) {&#10;                        Attraction attraction = document.toObject(Attraction.class);&#10;                        attraction.setDocumentId(document.getId());&#10;                        attractionList.add(attraction);&#10;                        Log.d(TAG, &quot;Added attraction: &quot; + attraction.getName());&#10;                    }&#10;                    adapter.notifyDataSetChanged();&#10;                    progressBar.setVisibility(View.GONE);&#10;&#10;                    String filterText = &quot;All&quot;.equalsIgnoreCase(category) ? &quot;all&quot; : category;&#10;                    Toast.makeText(this, &quot;Found &quot; + attractionList.size() + &quot; &quot; + filterText + &quot; attractions in &quot; + cityName, Toast.LENGTH_SHORT).show();&#10;                } else {&#10;                    // No attractions found for this city - show community growth entry&#10;                    Log.d(TAG, &quot;No attractions found for &quot; + cityName + &quot;, showing community growth entry&quot;);&#10;                    showPlaceholderEntry(cityName);&#10;                }&#10;            } else {&#10;                Exception exception = task.getException();&#10;                Log.e(TAG, &quot;Error getting documents from &quot; + cityName + &quot;: &quot;, exception);&#10;&#10;                progressBar.setVisibility(View.GONE);&#10;                if (exception != null &amp;&amp; exception.getMessage() != null &amp;&amp; exception.getMessage().contains(&quot;PERMISSION_DENIED&quot;)) {&#10;                    Toast.makeText(this, &quot;⚠️ Firebase Database Access Denied!\nPlease update Firebase Security Rules.&quot;, Toast.LENGTH_LONG).show();&#10;                } else {&#10;                    Toast.makeText(this, &quot;Error loading data. Please check your internet connection.&quot;, Toast.LENGTH_LONG).show();&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    // Show message when no attractions found for the detected city&#10;    private void showNoAttractionsMessage(String cityName) {&#10;        progressBar.setVisibility(View.GONE);&#10;        attractionList.clear();&#10;        adapter.notifyDataSetChanged();&#10;&#10;        Toast.makeText(this, &quot;No attractions found in &quot; + cityName + &quot;. Be the first to add some!&quot;, Toast.LENGTH_LONG).show();&#10;    }&#10;&#10;    // Helper method to check if coordinates are in Sri Lanka&#10;    private boolean isInSriLanka(double lat, double lng) {&#10;        // Sri Lanka boundaries (approximate)&#10;        return lat &gt;= 5.9 &amp;&amp; lat &lt;= 9.9 &amp;&amp; lng &gt;= 79.5 &amp;&amp; lng &lt;= 81.9;&#10;    }&#10;&#10;    // Helper method to normalize city names for better Firebase matching&#10;    private String normalizeCityName(String cityName) {&#10;        if (cityName == null) return null;&#10;&#10;        String normalized = cityName.trim();&#10;&#10;        // Handle common Sri Lankan city name variations&#10;        switch (normalized.toLowerCase()) {&#10;            case &quot;colombo municipal council&quot;:&#10;            case &quot;colombo district&quot;:&#10;                return &quot;Colombo&quot;;&#10;            case &quot;kandy municipal council&quot;:&#10;            case &quot;kandy district&quot;:&#10;                return &quot;Kandy&quot;;&#10;            case &quot;galle municipal council&quot;:&#10;            case &quot;galle district&quot;:&#10;                return &quot;Galle&quot;;&#10;            case &quot;anuradhapura district&quot;:&#10;                return &quot;Anuradhapura&quot;;&#10;            case &quot;polonnaruwa district&quot;:&#10;                return &quot;Polonnaruwa&quot;;&#10;            case &quot;nuwara eliya district&quot;:&#10;                return &quot;Nuwara Eliya&quot;;&#10;            case &quot;matale district&quot;:&#10;                return &quot;Matale&quot;;&#10;            case &quot;kurunegala district&quot;:&#10;                return &quot;Kurunegala&quot;;&#10;            default:&#10;                return normalized;&#10;        }&#10;    }&#10;&#10;    private void setupFilterListener() {&#10;        chipGroup.setOnCheckedChangeListener((group, checkedId) -&gt; {&#10;            if (checkedId == View.NO_ID) {&#10;                return;&#10;            }&#10;            Chip selectedChip = findViewById(checkedId);&#10;            if (selectedChip != null) {&#10;                String selectedCategory = selectedChip.getText().toString();&#10;                String cityToQuery = currentCity != null ? currentCity : &quot;Colombo&quot;;&#10;                loadAttractionsFromFirestore(cityToQuery, selectedCategory);&#10;            }&#10;        });&#10;    }&#10;&#10;    // Add this method to your HomeActivity class&#10;    private void seedSampleData() {&#10;        DataSeeder seeder = new DataSeeder();&#10;        seeder.seedSampleAttractions();&#10;        Toast.makeText(this, &quot;Sample attractions added!&quot;, Toast.LENGTH_SHORT).show();&#10;    }&#10;&#10;    // Method to show placeholder entry when no attractions found&#10;    private void showPlaceholderEntry(String cityName) {&#10;        progressBar.setVisibility(View.GONE);&#10;&#10;        // Create placeholder attraction&#10;        Attraction placeholder = new Attraction();&#10;        placeholder.setDocumentId(&quot;placeholder_&quot; + cityName);&#10;        placeholder.setName(&quot;Help Us Grow Our Database! &quot;);&#10;        placeholder.setCategory(&quot;Community Contribution&quot;);&#10;        placeholder.setDescription(&quot;Unfortunately, we haven't updated our database with attractions from &quot; + cityName + &quot; yet. &quot; +&#10;                &quot;Please consider adding interesting locations near your area to help other travelers discover amazing places!&quot;);&#10;        placeholder.setYoutubeUrl(&quot;&quot;);&#10;&#10;        // Set placeholder image - let the adapter handle the icon&#10;        List&lt;String&gt; placeholderImages = new ArrayList&lt;&gt;();&#10;        // Don't add any image URL - the adapter will show the special icon&#10;        placeholder.setImages(placeholderImages);&#10;&#10;        placeholder.setContributorName(&quot;Hidden Sri Lanka Team&quot;);&#10;        placeholder.setContributedAt(System.currentTimeMillis());&#10;        placeholder.setPlaceholder(true); // Mark as placeholder&#10;&#10;        // Add to attraction list&#10;        attractionList.clear();&#10;        attractionList.add(placeholder);&#10;        adapter.notifyDataSetChanged();&#10;&#10;        Log.d(TAG, &quot;Placeholder entry added for &quot; + cityName);&#10;        Toast.makeText(this, &quot;No attractions found for &quot; + cityName + &quot;. Help us by adding some!&quot;, Toast.LENGTH_LONG).show();&#10;    }&#10;&#10;    // Call this method once to populate your database (you can trigger it with a button or on first run)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/LoginActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/LoginActivity.java" />
              <option name="originalContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Toast; // Added for onCancelled&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;import com.google.firebase.database.DataSnapshot;&#10;import com.google.firebase.database.DatabaseError;&#10;import com.google.firebase.database.DatabaseReference;&#10;import com.google.firebase.database.FirebaseDatabase;&#10;import com.google.firebase.database.Query;&#10;import com.google.firebase.database.ValueEventListener;&#10;&#10;import java.util.Objects;&#10;&#10;public class LoginActivity extends AppCompatActivity {&#10;    EditText loginUsername, loginPassword;&#10;    Button loginButton;&#10;    Button signUpRederect;&#10;&#10;    // Define your database URL as a constant i have given reson in Signup Activity&#10;    private static final String FIREBASE_DATABASE_URL = &quot;https://hidden-sri-lanka-c3ec5-default-rtdb.asia-southeast1.firebasedatabase.app&quot;;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_login);&#10;&#10;        loginUsername = findViewById(R.id.userName);&#10;        loginPassword = findViewById(R.id.password);&#10;        loginButton = findViewById(R.id.logingButton);&#10;        signUpRederect = findViewById(R.id.signUpRederect);&#10;&#10;        loginButton.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                boolean isUsernameValid = validateUsername();&#10;                boolean isPasswordValid = validatePassword();&#10;                if (isUsernameValid &amp;&amp; isPasswordValid) {&#10;                    checkUser();&#10;                }&#10;            }&#10;        });&#10;&#10;        signUpRederect.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                Intent intent = new Intent(LoginActivity.this, SignUpActivity.class);&#10;                startActivity(intent);&#10;            }&#10;        });&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;    }&#10;&#10;    public Boolean validateUsername() {&#10;        String val = loginUsername.getText().toString().trim(); // Added trim()&#10;        if (val.isEmpty()) {&#10;            loginUsername.setError(&quot;User Name cannot be Empty !&quot;);&#10;            return false;&#10;        } else {&#10;            loginUsername.setError(null);&#10;            return true;&#10;        }&#10;    }&#10;&#10;    public Boolean validatePassword() {&#10;        String val = loginPassword.getText().toString(); // No trim() here, as passwords can have leading/trailing spaces&#10;        if (val.isEmpty()) {&#10;            loginPassword.setError(&quot;Password cannot be Empty !&quot;);&#10;            return false;&#10;        } else {&#10;            loginPassword.setError(null);&#10;            return true;&#10;        }&#10;    }&#10;&#10;    public void checkUser() {&#10;        String userName = loginUsername.getText().toString().trim();&#10;        String userPassword = loginPassword.getText().toString().trim(); // Also trim password input for consistency if needed, but be careful&#10;&#10;        // Get FirebaseDatabase instance with the correct URL&#10;        FirebaseDatabase database = FirebaseDatabase.getInstance(FIREBASE_DATABASE_URL);&#10;        DatabaseReference reference = database.getReference(&quot;users&quot;);&#10;        Query checkUserDatabase = reference.orderByChild(&quot;username&quot;).equalTo(userName);&#10;&#10;        checkUserDatabase.addListenerForSingleValueEvent(new ValueEventListener() {&#10;            @Override&#10;            public void onDataChange(@NonNull DataSnapshot snapshot) {&#10;                if (snapshot.exists()) {&#10;                    loginUsername.setError(null);&#10;                    boolean credentialsValid = false;&#10;                    for (DataSnapshot userSnapshot : snapshot.getChildren()) {&#10;&#10;&#10;                        String passwordFromDB = userSnapshot.child(&quot;password&quot;).getValue(String.class);&#10;&#10;                        if (Objects.equals(passwordFromDB, userPassword)) {&#10;                            credentialsValid = true;&#10;                            loginPassword.setError(null);&#10;                            Intent intent = new Intent(LoginActivity.this, HomeActivity.class);&#10;                            // Pass the actual username from DB if it can differ in case from input&#10;                            String actualUsernameFromDB = userSnapshot.child(&quot;username&quot;).getValue(String.class);&#10;                            intent.putExtra(&quot;USERNAME&quot;, actualUsernameFromDB != null ? actualUsernameFromDB : userName);&#10;                            startActivity(intent);&#10;                            finish();&#10;                            return; // Exit after successful login&#10;                        }&#10;                    }&#10;&#10;                    // If loop completes and credentials are not valid&#10;                    if (!credentialsValid) {&#10;                        loginPassword.setError(&quot;Invalid Credentials!&quot;);&#10;                        loginPassword.requestFocus();&#10;                    }&#10;&#10;                } else {&#10;                    loginUsername.setError(&quot;User Does Not Exist&quot;);&#10;                    loginUsername.requestFocus();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onCancelled(@NonNull DatabaseError error) {&#10;//if any error&#10;                Toast.makeText(LoginActivity.this, &quot;Database Error: &quot; + error.getMessage(), Toast.LENGTH_LONG).show();&#10;            }&#10;        });&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Toast; // Added for onCancelled&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;import com.google.firebase.database.DataSnapshot;&#10;import com.google.firebase.database.DatabaseError;&#10;import com.google.firebase.database.DatabaseReference;&#10;import com.google.firebase.database.FirebaseDatabase;&#10;import com.google.firebase.database.Query;&#10;import com.google.firebase.database.ValueEventListener;&#10;&#10;import java.util.Objects;&#10;&#10;public class LoginActivity extends AppCompatActivity {&#10;    EditText loginUsername, loginPassword;&#10;    Button loginButton;&#10;    Button signUpRederect;&#10;    private SessionManager sessionManager;&#10;&#10;    // Define your database URL as a constant i have given reson in Signup Activity&#10;    private static final String FIREBASE_DATABASE_URL = &quot;https://hidden-sri-lanka-c3ec5-default-rtdb.asia-southeast1.firebasedatabase.app&quot;;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_login);&#10;&#10;        // Initialize SessionManager&#10;        sessionManager = new SessionManager(this);&#10;&#10;        loginUsername = findViewById(R.id.userName);&#10;        loginPassword = findViewById(R.id.password);&#10;        loginButton = findViewById(R.id.logingButton);&#10;        signUpRederect = findViewById(R.id.signUpRederect);&#10;&#10;        loginButton.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                boolean isUsernameValid = validateUsername();&#10;                boolean isPasswordValid = validatePassword();&#10;                if (isUsernameValid &amp;&amp; isPasswordValid) {&#10;                    checkUser();&#10;                }&#10;            }&#10;        });&#10;&#10;        signUpRederect.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                Intent intent = new Intent(LoginActivity.this, SignUpActivity.class);&#10;                startActivity(intent);&#10;            }&#10;        });&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;    }&#10;&#10;    public Boolean validateUsername() {&#10;        String val = loginUsername.getText().toString().trim(); // Added trim()&#10;        if (val.isEmpty()) {&#10;            loginUsername.setError(&quot;User Name cannot be Empty !&quot;);&#10;            return false;&#10;        } else {&#10;            loginUsername.setError(null);&#10;            return true;&#10;        }&#10;    }&#10;&#10;    public Boolean validatePassword() {&#10;        String val = loginPassword.getText().toString(); // No trim() here, as passwords can have leading/trailing spaces&#10;        if (val.isEmpty()) {&#10;            loginPassword.setError(&quot;Password cannot be Empty !&quot;);&#10;            return false;&#10;        } else {&#10;            loginPassword.setError(null);&#10;            return true;&#10;        }&#10;    }&#10;&#10;    public void checkUser() {&#10;        String userName = loginUsername.getText().toString().trim();&#10;        String userPassword = loginPassword.getText().toString().trim(); // Also trim password input for consistency if needed, but be careful&#10;&#10;        // Get FirebaseDatabase instance with the correct URL&#10;        FirebaseDatabase database = FirebaseDatabase.getInstance(FIREBASE_DATABASE_URL);&#10;        DatabaseReference reference = database.getReference(&quot;users&quot;);&#10;        Query checkUserDatabase = reference.orderByChild(&quot;username&quot;).equalTo(userName);&#10;&#10;        checkUserDatabase.addListenerForSingleValueEvent(new ValueEventListener() {&#10;            @Override&#10;            public void onDataChange(@NonNull DataSnapshot snapshot) {&#10;                if (snapshot.exists()) {&#10;                    loginUsername.setError(null);&#10;                    boolean credentialsValid = false;&#10;                    for (DataSnapshot userSnapshot : snapshot.getChildren()) {&#10;&#10;&#10;                        String passwordFromDB = userSnapshot.child(&quot;password&quot;).getValue(String.class);&#10;&#10;                        if (Objects.equals(passwordFromDB, userPassword)) {&#10;                            credentialsValid = true;&#10;                            loginPassword.setError(null);&#10;&#10;                            // Get user data from database&#10;                            String actualUsernameFromDB = userSnapshot.child(&quot;username&quot;).getValue(String.class);&#10;                            String emailFromDB = userSnapshot.child(&quot;email&quot;).getValue(String.class);&#10;                            String nameFromDB = userSnapshot.child(&quot;name&quot;).getValue(String.class);&#10;&#10;                            // Save session data&#10;                            sessionManager.createLoginSession(&#10;                                    actualUsernameFromDB != null ? actualUsernameFromDB : userName,&#10;                                    emailFromDB != null ? emailFromDB : &quot;&quot;,&#10;                                    nameFromDB != null ? nameFromDB : &quot;&quot;&#10;                            );&#10;&#10;                            Intent intent = new Intent(LoginActivity.this, HomeActivity.class);&#10;                            intent.putExtra(&quot;USERNAME&quot;, actualUsernameFromDB != null ? actualUsernameFromDB : userName);&#10;                            startActivity(intent);&#10;                            finish();&#10;                            return; // Exit after successful login&#10;                        }&#10;                    }&#10;&#10;                    // If loop completes and credentials are not valid&#10;                    if (!credentialsValid) {&#10;                        loginPassword.setError(&quot;Invalid Credentials!&quot;);&#10;                        loginPassword.requestFocus();&#10;                    }&#10;&#10;                } else {&#10;                    loginUsername.setError(&quot;User Does Not Exist&quot;);&#10;                    loginUsername.requestFocus();&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onCancelled(@NonNull DatabaseError error) {&#10;//if any error&#10;                Toast.makeText(LoginActivity.this, &quot;Database Error: &quot; + error.getMessage(), Toast.LENGTH_LONG).show();&#10;            }&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/MainActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/MainActivity.java" />
              <option name="originalContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;// Removed: import android.os.Handler; // No longer needed for the primary delay&#10;// Removed: import android.os.Looper;  // No longer needed for the primary delay&#10;// Removed: import android.view.View; // Not directly used in this corrected version&#10;import android.view.animation.Animation;&#10;import android.view.animation.AnimationUtils;&#10;import android.widget.ImageView;&#10;&#10;// Removed: import androidx.activity.EdgeToEdge; // Not essential for the core logic shown&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    // private static final long SPLASH_TIMEOUT = 5000;  (Changed to another method for delay )&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_main);&#10;&#10;        // -------------------------------------- Fading Animation &amp; Transition Logic ------------------------------------------&#10;        ImageView imageViewToFadeIn = findViewById(R.id.splashImage);&#10;&#10;        // Load the fade-in animation&#10;        Animation fadeInAnimation = AnimationUtils.loadAnimation(this, R.anim.fadein);&#10;&#10;        // Set an AnimationListener to know when the animation ends&#10;        fadeInAnimation.setAnimationListener(new Animation.AnimationListener() {&#10;            @Override&#10;            public void onAnimationStart(Animation animation) {&#10;                // Animation started&#10;            }&#10;&#10;            @Override&#10;            public void onAnimationEnd(Animation animation) {&#10;                // Animation ended, NOW start the transition to WelcomeActivity&#10;                Intent intent = new Intent(MainActivity.this, WelcomeActivity.class);&#10;                startActivity(intent);&#10;&#10;                // Finish this MainActivity so the user can't navigate back to the splash screen&#10;                finish();&#10;&#10;            }&#10;&#10;            @Override&#10;            public void onAnimationRepeat(Animation animation) {&#10;                // Animation repeated&#10;            }&#10;        });&#10;&#10;        // Apply the animation to the ImageView&#10;        imageViewToFadeIn.startAnimation(fadeInAnimation);&#10;&#10;        // --- Original Handler that i used for  delayed transition no longer need ---&#10;        /*&#10;        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {&#10;            @Override&#10;            public void run() {&#10;                Intent intent = new Intent(MainActivity.this, WelcomeActivity.class);&#10;                startActivity(intent);&#10;                finish();&#10;            }&#10;        }, SPLASH_TIMEOUT);&#10;        */&#10;&#10;        // --------------------------------------------finshed------------------------------------&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;// Removed: import android.os.Handler; // No longer needed for the primary delay&#10;// Removed: import android.os.Looper;  // No longer needed for the primary delay&#10;// Removed: import android.view.View; // Not directly used in this corrected version&#10;import android.view.animation.Animation;&#10;import android.view.animation.AnimationUtils;&#10;import android.widget.ImageView;&#10;&#10;// Removed: import androidx.activity.EdgeToEdge; // Not essential for the core logic shown&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    // private static final long SPLASH_TIMEOUT = 5000;  (Changed to another method for delay )&#10;    private SessionManager sessionManager;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_main);&#10;&#10;        // Initialize SessionManager&#10;        sessionManager = new SessionManager(this);&#10;&#10;        // -------------------------------------- Fading Animation &amp; Transition Logic ------------------------------------------&#10;        ImageView imageViewToFadeIn = findViewById(R.id.splashImage);&#10;&#10;        // Load the fade-in animation&#10;        Animation fadeInAnimation = AnimationUtils.loadAnimation(this, R.anim.fadein);&#10;&#10;        // Set an AnimationListener to know when the animation ends&#10;        fadeInAnimation.setAnimationListener(new Animation.AnimationListener() {&#10;            @Override&#10;            public void onAnimationStart(Animation animation) {&#10;                // Animation started&#10;            }&#10;&#10;            @Override&#10;            public void onAnimationEnd(Animation animation) {&#10;                // Check if user is already logged in&#10;                if (sessionManager.isLoggedIn()) {&#10;                    // User is logged in, go directly to HomeActivity&#10;                    Intent intent = new Intent(MainActivity.this, HomeActivity.class);&#10;                    intent.putExtra(&quot;USERNAME&quot;, sessionManager.getUsername());&#10;                    startActivity(intent);&#10;                } else {&#10;                    // User is not logged in, go to WelcomeActivity&#10;                    Intent intent = new Intent(MainActivity.this, WelcomeActivity.class);&#10;                    startActivity(intent);&#10;                }&#10;&#10;                // Finish this MainActivity so the user can't navigate back to the splash screen&#10;                finish();&#10;            }&#10;&#10;            @Override&#10;            public void onAnimationRepeat(Animation animation) {&#10;                // Animation repeated&#10;            }&#10;        });&#10;&#10;        // Apply the animation to the ImageView&#10;        imageViewToFadeIn.startAnimation(fadeInAnimation);&#10;&#10;        // --- Original Handler that i used for  delayed transition no longer need ---&#10;        /*&#10;        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {&#10;            @Override&#10;            public void run() {&#10;                Intent intent = new Intent(MainActivity.this, WelcomeActivity.class);&#10;                startActivity(intent);&#10;                finish();&#10;            }&#10;        }, SPLASH_TIMEOUT);&#10;        */&#10;&#10;        // --------------------------------------------finshed------------------------------------&#10;&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/SessionManager.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/s23010526/hiddensrilanka/SessionManager.java" />
              <option name="originalContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;&#10;public class SessionManager {&#10;    private static final String PREF_NAME = &quot;HiddenSriLankaSession&quot;;&#10;    private static final String KEY_IS_LOGGED_IN = &quot;isLoggedIn&quot;;&#10;    private static final String KEY_USERNAME = &quot;username&quot;;&#10;    private static final String KEY_EMAIL = &quot;email&quot;;&#10;    private static final String KEY_NAME = &quot;name&quot;;&#10;&#10;    private SharedPreferences pref;&#10;    private SharedPreferences.Editor editor;&#10;    private Context context;&#10;&#10;    public SessionManager(Context context) {&#10;        this.context = context;&#10;        pref = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);&#10;        editor = pref.edit();&#10;    }&#10;&#10;    /**&#10;     * Create login session&#10;     */&#10;    public void createLoginSession(String username, String email, String name) {&#10;        editor.putBoolean(KEY_IS_LOGGED_IN, true);&#10;        editor.putString(KEY_USERNAME, username);&#10;        editor.putString(KEY_EMAIL, email);&#10;        editor.putString(KEY_NAME, name);&#10;        editor.apply();&#10;    }&#10;&#10;    /**&#10;     * Check login method will check user login status&#10;     * If false it will redirect user to login page&#10;     * Else do anything&#10;     */&#10;    public boolean isLoggedIn() {&#10;        return pref.getBoolean(KEY_IS_LOGGED_IN, false);&#10;    }&#10;&#10;    /**&#10;     * Get stored session data&#10;     */&#10;    public String getUsername() {&#10;        return pref.getString(KEY_USERNAME, null);&#10;    }&#10;&#10;    public String getEmail() {&#10;        return pref.getString(KEY_EMAIL, null);&#10;    }&#10;&#10;    public String getName() {&#10;        return pref.getString(KEY_NAME, null);&#10;    }&#10;&#10;    /**&#10;     * Clear session details&#10;     */&#10;    public void logoutUser() {&#10;        editor.clear();&#10;        editor.apply();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.s23010526.hiddensrilanka;&#10;&#10;import android.content.Context;&#10;import android.content.SharedPreferences;&#10;&#10;public class SessionManager {&#10;    private static final String PREF_NAME = &quot;HiddenSriLankaSession&quot;;&#10;    private static final String KEY_IS_LOGGED_IN = &quot;isLoggedIn&quot;;&#10;    private static final String KEY_USERNAME = &quot;username&quot;;&#10;    private static final String KEY_EMAIL = &quot;email&quot;;&#10;    private static final String KEY_NAME = &quot;name&quot;;&#10;&#10;    private final SharedPreferences pref;&#10;    private final SharedPreferences.Editor editor;&#10;&#10;    public SessionManager(Context context) {&#10;        pref = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);&#10;        editor = pref.edit();&#10;    }&#10;&#10;    /**&#10;     * Create login session&#10;     */&#10;    public void createLoginSession(String username, String email, String name) {&#10;        editor.putBoolean(KEY_IS_LOGGED_IN, true);&#10;        editor.putString(KEY_USERNAME, username);&#10;        editor.putString(KEY_EMAIL, email);&#10;        editor.putString(KEY_NAME, name);&#10;        editor.apply();&#10;    }&#10;&#10;    /**&#10;     * Check login method will check user login status&#10;     * If false it will redirect user to login page&#10;     * Else do anything&#10;     */&#10;    public boolean isLoggedIn() {&#10;        return pref.getBoolean(KEY_IS_LOGGED_IN, false);&#10;    }&#10;&#10;    /**&#10;     * Get stored session data&#10;     */&#10;    public String getUsername() {&#10;        return pref.getString(KEY_USERNAME, null);&#10;    }&#10;&#10;    public String getEmail() {&#10;        return pref.getString(KEY_EMAIL, null);&#10;    }&#10;&#10;    public String getName() {&#10;        return pref.getString(KEY_NAME, null);&#10;    }&#10;&#10;    /**&#10;     * Clear session details&#10;     */&#10;    public void logoutUser() {&#10;        editor.clear();&#10;        editor.apply();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_add_location.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_add_location.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C8.13,2 5,5.13 5,9c0,5.25 7,13 7,13s7,-7.75 7,-13c0,-3.87 -3.13,-7 -7,-7zM7,9c0,-2.76 2.24,-5 5,-5s5,2.24 5,5c0,2.88 -2.88,7.19 -5,9.88C9.92,16.21 7,11.85 7,9z&quot;/&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,9m-2.5,0a2.5,2.5 0,1 1,5 0a2.5,2.5 0,1 1,-5 0&quot;/&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M11,7h2v2h-2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_camera.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_camera.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M9,2l1.17,0L12,4.17L14.83,2L16,2v6h-2V5.83l-2,2 -2,-2V8H8V2H9zM7,8h2v1H7V8zM16,8h1v1h-1V8zM7,10h10v1H7V10zM7,12h10v8H7V12zM9,14h6v2H9V14zM9,17h6v2H9V17z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_image_placeholder.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_image_placeholder.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M21,19V5c0,-1.1 -0.9,-2 -2,-2H5c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2zM8.5,13.5l2.5,3.01L14.5,12l4.5,6H5l3.5,-4.5z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_info.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_info.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM13,17h-2v-6h2v6zM13,9h-2L11,7h2v2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_link.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_link.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M3.9,12c0,-1.71 1.39,-3.1 3.1,-3.1h4V7H6.9C3.82,7 1.3,9.52 1.3,12.6S3.82,18.2 6.9,18.2h4v-1.9H6.9c-1.71,0 -3.1,-1.39 -3.1,-3.1zM8,13h8v-2H8v2zM17.1,7h-4v1.9h4c1.71,0 3.1,1.39 3.1,3.1s-1.39,3.1 -3.1,3.1h-4v1.9h4c3.08,0 5.6,-2.52 5.6,-5.6S20.18,7 17.1,7z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_share.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_share.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M18,16.08c-0.76,0 -1.44,0.3 -1.96,0.77L8.91,12.7c0.05,-0.23 0.09,-0.46 0.09,-0.7s-0.04,-0.47 -0.09,-0.7l7.05,-4.11c0.54,0.5 1.25,0.81 2.04,0.81 1.66,0 3,-1.34 3,-3s-1.34,-3 -3,-3 -3,1.34 -3,3c0,0.24 0.04,0.47 0.09,0.7L8.04,9.81C7.5,9.31 6.79,9 6,9c-1.66,0 -3,1.34 -3,3s1.34,3 3,3c0.79,0 1.5,-0.31 2.04,-0.81l7.12,4.16c-0.05,0.21 -0.08,0.43 -0.08,0.65 0,1.61 1.31,2.92 2.92,2.92 1.61,0 2.92,-1.31 2.92,-2.92s-1.31,-2.92 -2.92,-2.92z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/main_menue.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/main_menue.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;&lt;!--TODO : Change Title Color--&gt;&#10;&lt;!--Base file for Drawer--&gt;&#10;    &lt;group android:checkableBehavior=&quot;single&quot;&gt;&#10;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_home&quot;&#10;            android:icon=&quot;@drawable/home_icon&quot;&#10;            android:title=&quot;Home&quot; /&gt;&#10;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_exp_map&quot;&#10;            android:icon=&quot;@drawable/map_drop_pin_icon&quot;&#10;            android:title=&quot;Explore On Map&quot; /&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;&lt;!--TODO : Change Title Color--&gt;&#10;&lt;!--Base file for Drawer--&gt;&#10;    &lt;group android:checkableBehavior=&quot;single&quot;&gt;&#10;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_home&quot;&#10;            android:icon=&quot;@drawable/home_icon&quot;&#10;            android:title=&quot;Home&quot; /&gt;&#10;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_exp_map&quot;&#10;            android:icon=&quot;@drawable/map_drop_pin_icon&quot;&#10;            android:title=&quot;Explore On Map&quot; /&gt;&#10;            &#10;        &lt;item&#10;            android:id=&quot;@+id/nav_add_location&quot;&#10;            android:icon=&quot;@drawable/ic_add_location&quot;&#10;            android:title=&quot;Add Location&quot; /&gt;&#10;            &#10;        &lt;item&#10;            android:id=&quot;@+id/nav_favorit&quot;&#10;            android:icon=&quot;@drawable/fav_icon&quot;&#10;            android:title=&quot;My Favorites&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_about_us&quot;&#10;            android:icon=&quot;@drawable/two_person_icon&quot;&#10;            android:title=&quot;About Us&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_settings&quot;&#10;            android:icon=&quot;@drawable/settings&quot;&#10;            android:title=&quot;Settings&quot; /&gt;&#10;    &lt;/group&gt;&#10;&#10;&#10;    &lt;item android:title=&quot;Profile&quot;&gt;&#10;&#10;        &lt;menu&gt;&#10;            &lt;group android:checkableBehavior=&quot;single&quot;&gt;&#10;&#10;                &lt;item&#10;                    android:id=&quot;@+id/nav_profile&quot;&#10;                    android:icon=&quot;@drawable/fringerprint_icon&quot;&#10;                    android:title=&quot;Profile&quot; /&gt;&#10;&#10;                &lt;item&#10;                    android:id=&quot;@+id/nav_log_out&quot;&#10;                    android:icon=&quot;@drawable/log_out_icon&quot;&#10;                    android:title=&quot;Log Out&quot; /&gt;&#10;&#10;            &lt;/group&gt;&#10;        &lt;/menu&gt;&#10;    &lt;/item&gt;&#10;&#10;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/styles.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/styles.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;&#10;    &lt;!-- Base application theme with consistent color scheme --&gt;&#10;    &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.MaterialComponents.DayNight.DarkActionBar&quot;&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/DeepForestGreen&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryVariant&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/GoldYellow&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondary&quot;&gt;@color/GoldSand&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondaryVariant&quot;&gt;@color/Tanbrown&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSecondary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:colorBackground&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorSurface&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSurface&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;!-- Toolbar Theme --&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;style name=&quot;ToolbarTheme&quot; parent=&quot;ThemeOverlay.MaterialComponents.Toolbar.Primary&quot;&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColorPrimary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &lt;!-- Primary Button Style --&gt;&#10;        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_height&quot;&gt;60dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;cursive&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;        &lt;item name=&quot;backgroundTint&quot;&gt;@color/DeepForestGreen&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/GoldYellow&lt;/item&gt;&#10;        &lt;item name=&quot;cornerRadius&quot;&gt;30dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;style name=&quot;SecondaryButton&quot; parent=&quot;Widget.MaterialComponents.Button.TextButton&quot;&gt;&#10;        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;cursive&lt;/item&gt;&#10;        &lt;item name=&quot;android:textAllCaps&quot;&gt;false&lt;/item&gt;&#10;&#10;    &lt;!-- Primary Text Style --&gt;&#10;    &lt;style name=&quot;PrimaryText&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textAlignment&quot;&gt;center&lt;/item&gt;&#10;&#10;    &lt;!-- Title Text Style --&gt;&#10;    &lt;style name=&quot;TitleText&quot; parent=&quot;PrimaryText&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;        &lt;item name=&quot;android:textStyle&quot;&gt;bold&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Heading Text Style --&gt;&#10;    &lt;style name=&quot;HeadingText&quot; parent=&quot;PrimaryText&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;        &lt;item name=&quot;android:textStyle&quot;&gt;bold&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Body Text Style --&gt;&#10;    &lt;style name=&quot;BodyText&quot; parent=&quot;PrimaryText&quot;&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Custom EditText Style --&gt;&#10;    &lt;style name=&quot;CustomEditText&quot;&gt;&#10;        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;&#10;        &lt;item name=&quot;android:drawablePadding&quot;&gt;8dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;cursive&lt;/item&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;48dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;20dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginStart&quot;&gt;8dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginEnd&quot;&gt;8dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginBottom&quot;&gt;20dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;&#10;    &lt;!-- Card Style (main Card Style for all boxes)--&gt;&#10;    &lt;style name=&quot;AppCard&quot; parent=&quot;Widget.MaterialComponents.CardView&quot;&gt;&#10;        &lt;item name=&quot;cardBackgroundColor&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;cardCornerRadius&quot;&gt;30dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Styles for About Us Page --&gt;&#10;    &lt;style name=&quot;AboutPage.TextView.Base&quot; parent=&quot;Widget.AppCompat.TextView&quot;&gt;&#10;        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginEnd&quot;&gt;50dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textAlignment&quot;&gt;center&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;&#10;    &lt;style name=&quot;AboutPage.TextView.Title&quot; parent=&quot;AboutPage.TextView.Base&quot;&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;cursive&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;20sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textStyle&quot;&gt;bold&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;AboutPage.TextView.Mission&quot; parent=&quot;AboutPage.TextView.Base&quot;&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;monospace&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;20sp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;AboutPage.TextView.Paragraph&quot; parent=&quot;AboutPage.TextView.Base&quot;&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;monospace&lt;/item&gt;&#10;        &lt;item name=&quot;android:textStyle&quot;&gt;italic&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;AboutPage.Button.Link&quot; parent=&quot;Widget.MaterialComponents.Button.TextButton&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginStart&quot;&gt;40dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginEnd&quot;&gt;40dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginTop&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;monospace&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/Blue2&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;12sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textStyle&quot;&gt;bold&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Toolbar Title Appearance Style --&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;20sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;cursive&lt;/item&gt;&#10;        &lt;item name=&quot;android:textStyle&quot;&gt;bold&lt;/item&gt;&#10;        &lt;item name=&quot;android:gravity&quot;&gt;center_vertical&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;&#10;    &lt;!-- Base application theme with consistent color scheme --&gt;&#10;    &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.MaterialComponents.DayNight.DarkActionBar&quot;&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/DeepForestGreen&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryVariant&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/GoldYellow&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondary&quot;&gt;@color/GoldSand&lt;/item&gt;&#10;        &lt;item name=&quot;colorSecondaryVariant&quot;&gt;@color/Tanbrown&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSecondary&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:colorBackground&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorSurface&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnSurface&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Primary Button Style --&gt;&#10;    &lt;style name=&quot;PrimaryButton&quot; parent=&quot;Widget.MaterialComponents.Button&quot;&gt;&#10;        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_height&quot;&gt;60dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;cursive&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;18sp&lt;/item&gt;&#10;        &lt;item name=&quot;backgroundTint&quot;&gt;@color/DeepForestGreen&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/GoldYellow&lt;/item&gt;&#10;        &lt;item name=&quot;cornerRadius&quot;&gt;30dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Secondary Button Style --&gt;&#10;    &lt;style name=&quot;SecondaryButton&quot; parent=&quot;Widget.MaterialComponents.Button.TextButton&quot;&gt;&#10;        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;cursive&lt;/item&gt;&#10;        &lt;item name=&quot;android:textAllCaps&quot;&gt;false&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/DeepForestGreen&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Primary Text Style --&gt;&#10;    &lt;style name=&quot;PrimaryText&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;cursive&lt;/item&gt;&#10;        &lt;item name=&quot;android:textAlignment&quot;&gt;center&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Title Text Style --&gt;&#10;    &lt;style name=&quot;TitleText&quot; parent=&quot;PrimaryText&quot;&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;36sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textStyle&quot;&gt;bold&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Heading Text Style --&gt;&#10;    &lt;style name=&quot;HeadingText&quot; parent=&quot;PrimaryText&quot;&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;20sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textStyle&quot;&gt;bold&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Body Text Style --&gt;&#10;    &lt;style name=&quot;BodyText&quot; parent=&quot;PrimaryText&quot;&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;14sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;monospace&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Custom EditText Style --&gt;&#10;    &lt;style name=&quot;CustomEditText&quot;&gt;&#10;        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;&#10;        &lt;item name=&quot;android:background&quot;&gt;@drawable/custom_edittext&lt;/item&gt;&#10;        &lt;item name=&quot;android:drawablePadding&quot;&gt;8dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;cursive&lt;/item&gt;&#10;        &lt;item name=&quot;android:minHeight&quot;&gt;48dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingStart&quot;&gt;20dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:paddingEnd&quot;&gt;20dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginStart&quot;&gt;8dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginEnd&quot;&gt;8dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginBottom&quot;&gt;20dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Card Style (main Card Style for all boxes)--&gt;&#10;    &lt;style name=&quot;AppCard&quot; parent=&quot;Widget.MaterialComponents.CardView&quot;&gt;&#10;        &lt;item name=&quot;cardBackgroundColor&quot;&gt;@color/white&lt;/item&gt;&#10;        &lt;item name=&quot;cardCornerRadius&quot;&gt;30dp&lt;/item&gt;&#10;        &lt;item name=&quot;cardElevation&quot;&gt;20dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_margin&quot;&gt;30dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Styles for About Us Page --&gt;&#10;    &lt;style name=&quot;AboutPage.TextView.Base&quot; parent=&quot;Widget.AppCompat.TextView&quot;&gt;&#10;        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginStart&quot;&gt;50dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginEnd&quot;&gt;50dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textAlignment&quot;&gt;center&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;AboutPage.TextView.Title&quot; parent=&quot;AboutPage.TextView.Base&quot;&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;cursive&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;20sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textStyle&quot;&gt;bold&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginBottom&quot;&gt;40dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;AboutPage.TextView.Mission&quot; parent=&quot;AboutPage.TextView.Base&quot;&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;monospace&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;20sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textStyle&quot;&gt;bold&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginBottom&quot;&gt;10dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;AboutPage.TextView.Paragraph&quot; parent=&quot;AboutPage.TextView.Base&quot;&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;monospace&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;14sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textStyle&quot;&gt;italic&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginBottom&quot;&gt;40dp&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;AboutPage.Button.Link&quot; parent=&quot;Widget.MaterialComponents.Button.TextButton&quot;&gt;&#10;        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginStart&quot;&gt;40dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginEnd&quot;&gt;40dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_marginTop&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;monospace&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/DeepForestGreen&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;12sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textStyle&quot;&gt;bold&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;!-- Toolbar Title Appearance Style --&gt;&#10;    &lt;style name=&quot;ToolbarTitleAppearance&quot; parent=&quot;TextAppearance.Widget.AppCompat.Toolbar.Title&quot;&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;@color/NavyBlue&lt;/item&gt;&#10;        &lt;item name=&quot;android:textSize&quot;&gt;20sp&lt;/item&gt;&#10;        &lt;item name=&quot;android:fontFamily&quot;&gt;cursive&lt;/item&gt;&#10;        &lt;item name=&quot;android:textStyle&quot;&gt;bold&lt;/item&gt;&#10;        &lt;item name=&quot;android:gravity&quot;&gt;center_vertical&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_gravity&quot;&gt;center_vertical&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/README.md" />
              <option name="updatedContent" value="# Hidden Sri Lanka - Documentation&#10;&#10;Welcome to the comprehensive documentation for the Hidden Sri Lanka mobile application. This documentation covers all aspects of the app's functionality, architecture, and usage.&#10;&#10;##  About the App&#10;&#10;Hidden Sri Lanka is a mobile application designed to help travelers discover hidden gems and lesser-known attractions across Sri Lanka. The app provides location-based recommendations, detailed attraction information, and allows users to contribute their own discoveries.&#10;&#10;##  Documentation Structure&#10;&#10;### Core Features&#10;- [User Authentication](features/authentication.md) - Login, signup, and session management&#10;- [Home &amp; Discovery](features/home-discovery.md) - Location detection and attraction browsing&#10;- [Filtering System](features/filtering.md) - Category-based attraction filtering&#10;- [Location Details](features/location-details.md) - Detailed attraction information&#10;- [Add Locations](features/add-locations.md) - Community contribution system&#10;- [Navigation](features/navigation.md) - App navigation and menu system&#10;&#10;### Technical Documentation&#10;- [Setup Guide](setup/installation.md) - Installation and configuration&#10;- [Firebase Integration](setup/firebase.md) - Database and authentication setup&#10;- [Architecture](setup/architecture.md) - App structure and design patterns&#10;- [API Reference](api/endpoints.md) - Firebase collections and data models&#10;&#10;### User Guides&#10;- [Getting Started](guides/getting-started.md) - First-time user guide&#10;- [Contributing Locations](guides/contributing.md) - How to add new attractions&#10;- [Troubleshooting](guides/troubleshooting.md) - Common issues and solutions&#10;&#10;##  Quick Start&#10;&#10;1. Clone the repository&#10;2. Follow the [Setup Guide](setup/installation.md)&#10;3. Configure Firebase using [Firebase Integration](setup/firebase.md)&#10;4. Build and run the app&#10;&#10;##  Contributing&#10;&#10;Please read our [Contributing Guide](guides/contributing.md) to learn how to add new locations and improve the app.&#10;&#10;##  Support&#10;&#10;For issues and questions, please check the [Troubleshooting Guide](guides/troubleshooting.md) or create an issue on GitHub.&#10;&#10;---&#10;*Last updated: August 2025*" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/api/endpoints.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/api/endpoints.md" />
              <option name="updatedContent" value="# API Reference&#10;&#10;## Firebase Collections &amp; Data Models&#10;&#10;### Collections Structure&#10;&#10;```&#10;/cities/{cityName}/attractions/{attractionId}&#10;```&#10;&#10;### Data Models&#10;&#10;#### Attraction Model&#10;```javascript&#10;{&#10;  &quot;name&quot;: string,                    // Required - Attraction name&#10;  &quot;category&quot;: string,                // Required - Category type&#10;  &quot;description&quot;: string,             // Required - Detailed description&#10;  &quot;images&quot;: array&lt;string&gt;,           // Required - Array of image URLs&#10;  &quot;youtubeUrl&quot;: string,             // Optional - YouTube video URL&#10;  &quot;contributorName&quot;: string,         // Required - Contributor name&#10;  &quot;contributedAt&quot;: timestamp,        // Required - Contribution timestamp&#10;  &quot;province&quot;: string,               // Required - Sri Lankan province&#10;  &quot;city&quot;: string,                   // Required - City name&#10;  &quot;latitude&quot;: number,               // Optional - GPS latitude&#10;  &quot;longitude&quot;: number,              // Optional - GPS longitude&#10;  &quot;documentId&quot;: string,             // Auto-generated - Firestore document ID&#10;  &quot;isPlaceholder&quot;: boolean          // Optional - Placeholder content flag&#10;}&#10;```&#10;&#10;#### User Model (Realtime Database)&#10;```javascript&#10;{&#10;  &quot;username&quot;: string,               // Required - Unique username&#10;  &quot;email&quot;: string,                  // Required - Email address&#10;  &quot;name&quot;: string,                   // Required - Display name&#10;  &quot;password&quot;: string,               // Required - Encrypted password&#10;  &quot;createdAt&quot;: timestamp           // Optional - Account creation time&#10;}&#10;```&#10;&#10;## Categories&#10;&#10;### Supported Categories&#10;- `&quot;Historical Site&quot;` - Archaeological sites, heritage buildings&#10;- `&quot;WaterFall&quot;` - Natural waterfalls and water features&#10;- `&quot;Beach&quot;` - Coastal attractions and beaches&#10;- `&quot;Mountain&quot;` - Hill country locations and viewpoints&#10;- `&quot;Temple&quot;` - Religious sites and temples&#10;- `&quot;National Park&quot;` - Wildlife reserves and nature parks&#10;- `&quot;More&quot;` - Additional miscellaneous categories&#10;&#10;### Sri Lankan Provinces&#10;- `&quot;Western Province&quot;`&#10;- `&quot;Central Province&quot;`&#10;- `&quot;Southern Province&quot;`&#10;- `&quot;Northern Province&quot;`&#10;- `&quot;Eastern Province&quot;`&#10;- `&quot;North Western Province&quot;`&#10;- `&quot;North Central Province&quot;`&#10;- `&quot;Uva Province&quot;`&#10;- `&quot;Sabaragamuwa Province&quot;`&#10;&#10;## Firebase Queries&#10;&#10;### Get All Attractions for City&#10;```javascript&#10;db.collection(&quot;cities&quot;)&#10;  .document(cityName)&#10;  .collection(&quot;attractions&quot;)&#10;  .get()&#10;```&#10;&#10;### Get Attractions by Category&#10;```javascript&#10;db.collection(&quot;cities&quot;)&#10;  .document(cityName)&#10;  .collection(&quot;attractions&quot;)&#10;  .whereEqualTo(&quot;category&quot;, categoryName)&#10;  .get()&#10;```&#10;&#10;### Add New Attraction&#10;```javascript&#10;db.collection(&quot;cities&quot;)&#10;  .document(cityName)&#10;  .collection(&quot;attractions&quot;)&#10;  .add(attractionData)&#10;```&#10;&#10;## Authentication Endpoints&#10;&#10;### User Registration&#10;**Collection**: `users` (Realtime Database)&#10;**Method**: `POST`&#10;**Data**:&#10;```javascript&#10;{&#10;  &quot;username&quot;: &quot;unique_username&quot;,&#10;  &quot;email&quot;: &quot;user@example.com&quot;,&#10;  &quot;name&quot;: &quot;User Name&quot;,&#10;  &quot;password&quot;: &quot;hashed_password&quot;&#10;}&#10;```&#10;&#10;### User Login&#10;**Collection**: `users` (Realtime Database)&#10;**Method**: `GET`&#10;**Query**: `orderByChild(&quot;username&quot;).equalTo(username)`&#10;&#10;## Error Codes&#10;&#10;### Firebase Errors&#10;- `PERMISSION_DENIED` - Insufficient permissions&#10;- `NOT_FOUND` - Document/collection not found&#10;- `CANCELLED` - Operation cancelled&#10;- `UNKNOWN` - Unknown error occurred&#10;- `INVALID_ARGUMENT` - Invalid query parameters&#10;- `DEADLINE_EXCEEDED` - Request timeout&#10;- `ALREADY_EXISTS` - Document already exists&#10;- `RESOURCE_EXHAUSTED` - Quota exceeded&#10;- `FAILED_PRECONDITION` - Operation failed precondition&#10;- `ABORTED` - Operation aborted&#10;- `OUT_OF_RANGE` - Out of valid range&#10;- `UNIMPLEMENTED` - Operation not implemented&#10;- `INTERNAL` - Internal server error&#10;- `UNAVAILABLE` - Service unavailable&#10;- `DATA_LOSS` - Unrecoverable data loss&#10;&#10;### Custom Error Handling&#10;```java&#10;public class ApiErrorHandler {&#10;    public static void handleFirebaseError(Exception e) {&#10;        if (e.getMessage().contains(&quot;PERMISSION_DENIED&quot;)) {&#10;            showError(&quot;Database access denied. Please check permissions.&quot;);&#10;        } else if (e.getMessage().contains(&quot;UNAVAILABLE&quot;)) {&#10;            showError(&quot;Service temporarily unavailable. Please try again.&quot;);&#10;        } else {&#10;            showError(&quot;An unexpected error occurred: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}&#10;```&#10;&#10;## Rate Limits &amp; Quotas&#10;&#10;### Firestore Limits&#10;- **Reads**: 50,000 per day (free tier)&#10;- **Writes**: 20,000 per day (free tier)&#10;- **Deletes**: 20,000 per day (free tier)&#10;- **Document Size**: 1 MB maximum&#10;- **Collection Depth**: 100 levels maximum&#10;&#10;### Realtime Database Limits&#10;- **Simultaneous Connections**: 100 (free tier)&#10;- **GB Stored**: 1 GB (free tier)&#10;- **GB Downloaded**: 10 GB/month (free tier)&#10;&#10;## Security Rules&#10;&#10;### Firestore Rules&#10;```javascript&#10;rules_version = '2';&#10;service cloud.firestore {&#10;  match /databases/{database}/documents {&#10;    match /cities/{city}/attractions/{attraction} {&#10;      allow read: if true;&#10;      allow write: if request.auth != null &amp;&amp; &#10;                      resource == null &amp;&amp; &#10;                      isValidAttraction(request.resource.data);&#10;    }&#10;  }&#10;  &#10;  function isValidAttraction(data) {&#10;    return data.keys().hasAll(['name', 'category', 'description', 'contributorName']) &amp;&amp;&#10;           data.name is string &amp;&amp; data.name.size() &gt; 0 &amp;&amp;&#10;           data.category in ['Historical Site', 'WaterFall', 'Beach', 'Mountain', 'Temple', 'National Park', 'More'] &amp;&amp;&#10;           data.description is string &amp;&amp; data.description.size() &gt;= 50;&#10;  }&#10;}&#10;```&#10;&#10;### Realtime Database Rules&#10;```javascript&#10;{&#10;  &quot;rules&quot;: {&#10;    &quot;users&quot;: {&#10;      &quot;.read&quot;: true,&#10;      &quot;.write&quot;: true,&#10;      &quot;$userId&quot;: {&#10;        &quot;.validate&quot;: &quot;newData.hasChildren(['username', 'email', 'name', 'password'])&quot;&#10;      }&#10;    }&#10;  }&#10;}&#10;```&#10;&#10;## Best Practices&#10;&#10;### Query Optimization&#10;1. **Use Indexes**: Create composite indexes for common queries&#10;2. **Limit Results**: Use `.limit()` to prevent large data transfers&#10;3. **Cache Results**: Implement local caching for frequently accessed data&#10;4. **Batch Operations**: Group multiple operations when possible&#10;&#10;### Error Handling&#10;1. **Graceful Degradation**: Provide fallback content when APIs fail&#10;2. **Retry Logic**: Implement exponential backoff for failed requests&#10;3. **User Feedback**: Show meaningful error messages to users&#10;4. **Logging**: Log errors for debugging and monitoring&#10;&#10;### Security Considerations&#10;1. **Validate Input**: Sanitize all user inputs before database operations&#10;2. **Use Security Rules**: Implement proper Firebase security rules&#10;3. **Minimize Permissions**: Grant least privilege necessary&#10;4. **Monitor Usage**: Track API usage and detect anomalies&#10;&#10;---&#10;*This API reference provides comprehensive information for integrating with the Hidden Sri Lanka backend services.*" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/features/add-locations.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/features/add-locations.md" />
              <option name="updatedContent" value="# Add Locations Feature&#10;&#10;## Overview&#10;The Add Locations feature enables community-driven content creation, allowing users to contribute new attractions and hidden gems to the Hidden Sri Lanka database.&#10;&#10;## Features&#10;&#10;###  Comprehensive Form&#10;- **Location Name**: Required attraction title&#10;- **Category Selection**: Dropdown with predefined categories&#10;- **Province &amp; City**: Hierarchical location selection&#10;- **Description**: Rich text area with character limits&#10;- **Contributor Information**: User attribution&#10;- **YouTube URL**: Optional video content&#10;- **Image URL**: Required visual content&#10;&#10;###  Smart Validation&#10;- **Real-time Validation**: Instant feedback on form fields&#10;- **Required Field Checking**: Clear indication of mandatory fields&#10;- **URL Validation**: YouTube and image URL format checking&#10;- **Character Limits**: Description length enforcement&#10;- **Duplicate Prevention**: Check for existing attractions&#10;&#10;### ️ Image Management&#10;- **URL-based Upload**: Simple image URL input&#10;- **Live Preview**: Real-time image preview from URL&#10;- **Format Support**: JPEG, PNG, WebP compatibility&#10;- **Size Validation**: Automatic image dimension checking&#10;- **Error Handling**: Graceful handling of invalid URLs&#10;&#10;## Technical Implementation&#10;&#10;### Form Components&#10;```java&#10;// Core form fields&#10;TextInputEditText locationName;&#10;AutoCompleteTextView category;&#10;AutoCompleteTextView province;&#10;AutoCompleteTextView city;&#10;TextInputEditText description;&#10;TextInputEditText contributorName;&#10;TextInputEditText youtubeUrl;&#10;TextInputEditText imageUrl;&#10;```&#10;&#10;### Data Structure&#10;```java&#10;public class NewAttraction {&#10;    private String name;&#10;    private String category;&#10;    private String province;&#10;    private String city;&#10;    private String description;&#10;    private String contributorName;&#10;    private String youtubeUrl;&#10;    private List&lt;String&gt; images;&#10;    private long contributedAt;&#10;    private String documentId;&#10;}&#10;```&#10;&#10;### Validation Logic&#10;- **Field Validation**: Real-time input checking&#10;- **Network Validation**: Image URL accessibility testing&#10;- **Data Sanitization**: Clean and format user input&#10;- **Error Display**: Clear, actionable error messages&#10;&#10;## User Interface Design&#10;&#10;### Form Layout&#10;- **Card-based Design**: Clean, organized sections&#10;- **Progressive Disclosure**: Logical field ordering&#10;- **Visual Hierarchy**: Clear importance indicators&#10;- **Material Design**: Consistent with app theme&#10;&#10;### Input Types&#10;- **Text Fields**: Standard text input with validation&#10;- **Dropdowns**: Category, province, city selection&#10;- **Text Areas**: Multi-line description input&#10;- **URL Fields**: Specialized keyboard and validation&#10;- **Image Preview**: Visual confirmation of selected images&#10;&#10;### User Experience Flow&#10;1. **Welcome Card**: Introduction and encouragement&#10;2. **Form Completion**: Step-by-step field filling&#10;3. **Image Preview**: Visual confirmation&#10;4. **Validation Check**: Real-time error correction&#10;5. **Submission**: Progress indication and feedback&#10;6. **Confirmation**: Success message and next steps&#10;&#10;## Data Categories&#10;&#10;### Attraction Categories&#10;- **Historical Site**: Archaeological sites, heritage buildings&#10;- **WaterFall**: Natural waterfalls and water features&#10;- **Beach**: Coastal attractions and beaches&#10;- **Mountain**: Hill country locations and viewpoints&#10;- **Temple**: Religious sites and spiritual locations&#10;- **National Park**: Wildlife reserves and nature parks&#10;- **More**: Additional miscellaneous categories&#10;&#10;### Geographic Organization&#10;- **Provinces**: All 9 Sri Lankan provinces&#10;- **Cities**: Major cities and towns within each province&#10;- **Hierarchical Selection**: Province determines available cities&#10;- **Dynamic Loading**: Cities populate based on province selection&#10;&#10;## Validation Rules&#10;&#10;### Required Fields&#10;- **Location Name**: Must be unique and descriptive&#10;- **Category**: Must select from predefined list&#10;- **Province**: Must select valid Sri Lankan province&#10;- **City**: Must select city within chosen province&#10;- **Description**: Minimum 50 characters, maximum 500&#10;- **Contributor Name**: User identification&#10;- **Image URL**: At least one valid image required&#10;&#10;### Optional Fields&#10;- **YouTube URL**: Valid YouTube video link&#10;- **Additional Images**: Support for multiple images&#10;- **Contact Information**: Optional contributor contact&#10;&#10;### Format Validation&#10;- **Image URLs**: Must be accessible HTTP/HTTPS links&#10;- **YouTube URLs**: Valid YouTube video format&#10;- **Text Length**: Appropriate minimum and maximum lengths&#10;- **Special Characters**: Proper handling and sanitization&#10;&#10;## Firebase Integration&#10;&#10;### Database Structure&#10;```&#10;/cities/{cityName}/attractions/{attractionId}&#10;{&#10;  name: string,&#10;  category: string,&#10;  description: string,&#10;  images: array,&#10;  youtubeUrl: string,&#10;  contributorName: string,&#10;  contributedAt: timestamp,&#10;  province: string,&#10;  city: string&#10;}&#10;```&#10;&#10;### Submission Process&#10;1. **Validation**: Complete form validation&#10;2. **Image Check**: Verify image URL accessibility&#10;3. **Data Preparation**: Format and sanitize input&#10;4. **Firebase Upload**: Submit to Firestore database&#10;5. **Success Handling**: Confirmation and cleanup&#10;6. **Error Handling**: Retry mechanisms and user feedback&#10;&#10;## Community Guidelines&#10;&#10;### Content Standards&#10;- **Appropriate Content**: Family-friendly attractions only&#10;- **Accurate Information**: Verified location details&#10;- **Quality Images**: Clear, relevant photographs&#10;- **Respectful Language**: Professional description writing&#10;- **Original Content**: No copyright infringement&#10;&#10;### Moderation System&#10;- **Automatic Filtering**: Basic content validation&#10;- **Community Reporting**: User-reported inappropriate content&#10;- **Admin Review**: Manual approval for sensitive content&#10;- **Quality Control**: Regular content quality audits&#10;&#10;## User Guidance&#10;&#10;### Form Instructions&#10;- **Clear Labels**: Descriptive field labels and hints&#10;- **Help Text**: Contextual assistance and examples&#10;- **Progress Indicators**: Show completion status&#10;- **Error Messages**: Specific, actionable feedback&#10;- **Success Confirmation**: Clear submission acknowledgment&#10;&#10;### Image Guidelines&#10;- **Format Requirements**: Supported image formats&#10;- **Size Recommendations**: Optimal image dimensions&#10;- **Quality Standards**: Clear, well-lit photographs&#10;- **Content Guidelines**: Appropriate image content&#10;- **Copyright Notice**: Original or properly licensed images&#10;&#10;## Performance Considerations&#10;&#10;### Form Optimization&#10;- **Field Debouncing**: Prevent excessive validation calls&#10;- **Image Preloading**: Validate images before submission&#10;- **Progressive Enhancement**: Core functionality first&#10;- **Memory Management**: Efficient form state handling&#10;&#10;### Network Efficiency&#10;- **Batch Validation**: Group validation requests&#10;- **Image Compression**: Optimize image sizes&#10;- **Retry Logic**: Handle network failures gracefully&#10;- **Offline Support**: Save drafts for later submission&#10;&#10;## Error Handling&#10;&#10;### Validation Errors&#10;- **Field-level Errors**: Immediate feedback on individual fields&#10;- **Form-level Errors**: Overall form validation issues&#10;- **Network Errors**: Connection and timeout handling&#10;- **Server Errors**: Firebase and backend error handling&#10;&#10;### User Experience&#10;- **Clear Messages**: Understandable error descriptions&#10;- **Retry Options**: Easy ways to correct and resubmit&#10;- **Draft Saving**: Preserve user input during errors&#10;- **Help Resources**: Links to support and guidelines&#10;&#10;## Analytics &amp; Tracking&#10;&#10;### Contribution Metrics&#10;- **Submission Rates**: Track successful form submissions&#10;- **Error Analysis**: Common validation failures&#10;- **User Engagement**: Time spent on form completion&#10;- **Geographic Distribution**: Contribution patterns by location&#10;&#10;### Quality Metrics&#10;- **Approval Rates**: Content moderation statistics&#10;- **User Feedback**: Community ratings of contributions&#10;- **Engagement**: Views and interactions with contributed content&#10;&#10;---&#10;*The Add Locations feature empowers the community to grow the Hidden Sri Lanka database while maintaining high content quality and user experience standards.*" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/features/authentication.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/features/authentication.md" />
              <option name="updatedContent" value="# User Authentication System&#10;&#10;## Overview&#10;The Hidden Sri Lanka app implements a robust authentication system with persistent login functionality using Firebase Realtime Database and local session management.&#10;&#10;## Features&#10;&#10;###  Login System&#10;- **Email/Username Login**: Users can log in using their registered credentials&#10;- **Real-time Validation**: Form validation with immediate feedback&#10;- **Secure Authentication**: Password verification against Firebase database&#10;- **Session Persistence**: Login state maintained using SharedPreferences&#10;&#10;###  Registration System&#10;- **User Registration**: New users can create accounts with username, email, and password&#10;- **Data Validation**: Comprehensive input validation including:&#10;  - Username uniqueness check&#10;  - Email format validation&#10;  - Password strength requirements&#10;  - Confirmation password matching&#10;- **Firebase Integration**: User data stored securely in Firebase Realtime Database&#10;&#10;###  Session Management&#10;- **Persistent Login**: Users stay logged in between app sessions&#10;- **Automatic Redirect**: Logged-in users bypass login screen on app startup&#10;- **Secure Logout**: Complete session cleanup and redirect to welcome screen&#10;&#10;## Technical Implementation&#10;&#10;### Architecture Components&#10;```&#10;SessionManager.java - Handles local session storage&#10;LoginActivity.java - Login interface and validation&#10;SignUpActivity.java - Registration interface and validation&#10;MainActivity.java - Entry point with authentication check&#10;```&#10;&#10;### Session Storage&#10;- **SharedPreferences**: Local storage for user session data&#10;- **Stored Data**: Username, email, name, login status&#10;- **Security**: Session data cleared on logout&#10;&#10;### Authentication Flow&#10;1. **App Launch**: MainActivity checks existing session&#10;2. **Session Found**: Direct redirect to HomeActivity&#10;3. **No Session**: Redirect to WelcomeActivity → Login/SignUp&#10;4. **Successful Login**: Session created → HomeActivity&#10;5. **Logout**: Session cleared → WelcomeActivity&#10;&#10;## User Interface&#10;&#10;### Login Screen&#10;- Clean, intuitive design with app branding&#10;- Username and password input fields&#10;- Login button with loading states&#10;- Redirect to signup option&#10;- Form validation with error messages&#10;&#10;### Registration Screen&#10;- Comprehensive form with all required fields&#10;- Real-time validation feedback&#10;- Password confirmation&#10;- Redirect to login after successful registration&#10;&#10;### Session States&#10;- **Logged In**: Access to all app features&#10;- **Logged Out**: Limited to welcome, login, and signup screens&#10;&#10;## Error Handling&#10;- Network connectivity issues&#10;- Invalid credentials feedback&#10;- Registration validation errors&#10;- Database connection errors&#10;&#10;## Security Features&#10;- Password encryption (handled by Firebase)&#10;- Session timeout (configurable)&#10;- Input sanitization&#10;- SQL injection prevention (Firebase security)&#10;&#10;## Usage Examples&#10;&#10;### Checking Login Status&#10;```java&#10;SessionManager sessionManager = new SessionManager(this);&#10;if (sessionManager.isLoggedIn()) {&#10;    // User is logged in&#10;    String username = sessionManager.getUsername();&#10;}&#10;```&#10;&#10;### Creating Session&#10;```java&#10;sessionManager.createLoginSession(username, email, name);&#10;```&#10;&#10;### Logout&#10;```java&#10;sessionManager.logoutUser();&#10;// Redirect to welcome screen&#10;```&#10;&#10;---&#10;*This system ensures a smooth, secure user experience with minimal friction for returning users.*" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/features/filtering.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/features/filtering.md" />
              <option name="updatedContent" value="# Filtering System&#10;&#10;## Overview&#10;The filtering system allows users to discover attractions by category using horizontally scrollable filter chips. The system is designed to be intuitive and efficient, with special handling for the &quot;All&quot; filter.&#10;&#10;## Features&#10;&#10;### ️ Category Filters&#10;- **All**: Shows all attractions without category filtering&#10;- **Historical Site**: Ancient temples, ruins, and heritage sites&#10;- **WaterFall**: Natural waterfalls and cascades&#10;- **Beach**: Coastal attractions and beaches&#10;- **Mountain**: Hill country and mountain attractions&#10;- **Temple**: Religious sites and temples&#10;- **National Park**: Wildlife reserves and national parks&#10;- **More**: Additional categories&#10;&#10;###  User Interface&#10;- **Horizontal Scrolling**: Prevents filter overflow on small screens&#10;- **Single Selection**: Only one filter active at a time&#10;- **Visual Feedback**: Selected filter highlighted with different colors&#10;- **Touch-Friendly**: Large, accessible filter chips&#10;&#10;## Technical Implementation&#10;&#10;### Filter Architecture&#10;```java&#10;ChipGroup - Container for filter chips&#10;HorizontalScrollView - Enables horizontal scrolling&#10;Material Design Chips - Individual filter buttons&#10;Single Selection Mode - Only one filter active&#10;```&#10;&#10;### Filter Logic&#10;```java&#10;private void setupFilterListener() {&#10;    chipGroup.setOnCheckedChangeListener((group, checkedId) -&gt; {&#10;        if (checkedId == View.NO_ID) return;&#10;        &#10;        Chip selectedChip = findViewById(checkedId);&#10;        String selectedCategory = selectedChip.getText().toString();&#10;        String cityToQuery = currentCity != null ? currentCity : &quot;Colombo&quot;;&#10;        &#10;        loadAttractionsFromFirestore(cityToQuery, selectedCategory);&#10;    });&#10;}&#10;```&#10;&#10;### Database Queries&#10;- **&quot;All&quot; Filter**: No category constraint applied&#10;- **Specific Categories**: `whereEqualTo(&quot;category&quot;, categoryName)`&#10;- **Result Clearing**: Previous results cleared before new query&#10;- **Loading States**: Progress indicators during filtering&#10;&#10;## Filter Categories&#10;&#10;### All&#10;- **Purpose**: Show all available attractions&#10;- **Query**: No category filtering applied&#10;- **Use Case**: General browsing, overview of all attractions&#10;- **Visual**: Green background with yellow text (selected state)&#10;&#10;### Historical Site&#10;- **Examples**: Ancient ruins, archaeological sites, heritage buildings&#10;- **Target Audience**: History enthusiasts, cultural tourists&#10;- **Common Locations**: Anuradhapura, Polonnaruwa, Sigiriya&#10;&#10;### WaterFall&#10;- **Examples**: Natural waterfalls, cascades, water features&#10;- **Target Audience**: Nature lovers, adventure seekers&#10;- **Common Locations**: Nuwara Eliya, Ella, Badulla&#10;&#10;### Beach&#10;- **Examples**: Coastal areas, surfing spots, beach resorts&#10;- **Target Audience**: Beach lovers, water sports enthusiasts&#10;- **Common Locations**: Galle, Mirissa, Arugam Bay&#10;&#10;### Mountain&#10;- **Examples**: Hill country attractions, viewpoints, hiking trails&#10;- **Target Audience**: Hikers, nature photographers&#10;- **Common Locations**: Nuwara Eliya, Ella, Bandarawela&#10;&#10;### Temple&#10;- **Examples**: Buddhist temples, Hindu kovils, religious sites&#10;- **Target Audience**: Spiritual tourists, cultural explorers&#10;- **Common Locations**: Kandy, Colombo, Anuradhapura&#10;&#10;### National Park&#10;- **Examples**: Wildlife reserves, safari parks, nature reserves&#10;- **Target Audience**: Wildlife enthusiasts, eco-tourists&#10;- **Common Locations**: Yala, Udawalawe, Wilpattu&#10;&#10;## User Experience&#10;&#10;### Filter Selection Flow&#10;1. User views current attractions (default: &quot;All&quot;)&#10;2. User scrolls through filter options&#10;3. User taps desired category filter&#10;4. System clears current results&#10;5. System queries database for category&#10;6. System displays filtered results&#10;7. User receives feedback message&#10;&#10;### Visual States&#10;- **Unselected**: Gold background with navy text&#10;- **Selected**: Green background with yellow text&#10;- **Loading**: Progress indicator shown&#10;- **Results**: Count displayed in toast message&#10;&#10;### Responsive Design&#10;- **Small Screens**: Horizontal scrolling prevents overflow&#10;- **Large Screens**: All filters visible without scrolling&#10;- **Touch Targets**: Minimum 48dp touch area&#10;- **Spacing**: Appropriate margins between chips&#10;&#10;## Performance Considerations&#10;&#10;### Efficient Querying&#10;- **Index Optimization**: Firebase indexes on category field&#10;- **Result Limiting**: Reasonable result limits for performance&#10;- **Caching**: Previous results cached for quick switching&#10;&#10;### Memory Management&#10;- **List Clearing**: Previous results cleared to prevent memory leaks&#10;- **Adapter Updates**: Efficient RecyclerView updates&#10;- **Image Loading**: Lazy loading for attraction images&#10;&#10;## Error Handling&#10;&#10;### No Results&#10;- Display community contribution prompt&#10;- Encourage users to add attractions in that category&#10;- Provide helpful feedback message&#10;&#10;### Network Issues&#10;- Show cached results if available&#10;- Display appropriate error messages&#10;- Retry mechanism for failed requests&#10;&#10;### Database Errors&#10;- Firebase permission errors handling&#10;- Connection timeout handling&#10;- Graceful degradation to cached data&#10;&#10;## Filter Analytics&#10;&#10;### Usage Tracking&#10;- Most popular filter categories&#10;- User filter switching patterns&#10;- Geographic filter preferences&#10;- Session duration by filter type&#10;&#10;## Future Enhancements&#10;&#10;### Planned Features&#10;- **Multi-select Filters**: Allow multiple categories&#10;- **Custom Filters**: User-defined filter combinations&#10;- **Advanced Filters**: Distance, rating, amenities&#10;- **Filter Persistence**: Remember user preferences&#10;&#10;### Technical Improvements&#10;- **Filter Animation**: Smooth transitions between filters&#10;- **Search + Filter**: Combined search and filtering&#10;- **Smart Suggestions**: AI-powered filter recommendations&#10;&#10;---&#10;*The filtering system provides users with an efficient way to discover attractions that match their interests while maintaining excellent performance and usability.*" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/features/home-discovery.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/features/home-discovery.md" />
              <option name="updatedContent" value="# Home &amp; Discovery System&#10;&#10;## Overview&#10;The Home screen is the central hub of the Hidden Sri Lanka app, providing location-based attraction discovery with intelligent filtering and search capabilities.&#10;&#10;## Features&#10;&#10;###  Location-Based Discovery&#10;- **Automatic Location Detection**: Uses GPS to detect user's current city&#10;- **Geocoding Integration**: Converts coordinates to readable city names&#10;- **Sri Lanka Focus**: Optimized for Sri Lankan locations with fallback options&#10;- **Manual Override**: Search functionality for specific cities&#10;&#10;###  Smart Search System&#10;- **City Search**: Search for attractions in any Sri Lankan city&#10;- **Real-time Results**: Instant feedback and loading states&#10;- **Fallback Handling**: Graceful handling when no attractions found&#10;- **Search History**: Integrated with toolbar search field&#10;&#10;###  Home Interface Components&#10;- **Welcome Header**: Personalized greeting with current location&#10;- **Filter Chips**: Horizontally scrollable category filters&#10;- **Attraction Grid**: Vertical scroll list of discovered attractions&#10;- **Loading States**: Progress indicators during data fetching&#10;&#10;## Technical Implementation&#10;&#10;### Location Services&#10;```java&#10;FusedLocationProviderClient - GPS location detection&#10;Geocoder - Address resolution&#10;Location Permissions - Runtime permission handling&#10;```&#10;&#10;### Data Flow&#10;1. **Permission Check**: Request location permissions&#10;2. **Location Detection**: Get current GPS coordinates&#10;3. **Geocoding**: Convert coordinates to city name&#10;4. **Database Query**: Fetch attractions for detected city&#10;5. **UI Update**: Display results with appropriate feedback&#10;&#10;### Error Handling&#10;- **No Permission**: Show default attractions&#10;- **No Location**: Fallback to popular cities&#10;- **No Internet**: Cached data display&#10;- **No Attractions**: Community contribution prompt&#10;&#10;## User Experience&#10;&#10;### Initial Load&#10;1. Splash screen with authentication check&#10;2. Location permission request (if needed)&#10;3. GPS location detection&#10;4. City name resolution&#10;5. Attraction loading with progress indicator&#10;&#10;### Location States&#10;- **Detected**: &quot; Detected location: [City Name]&quot;&#10;- **Foreign**: &quot; Foreign location detected: [City Name]&quot;&#10;- **Manual**: &quot; Searching attractions in: [Search Query]&quot;&#10;- **Default**: &quot;Loading default attractions...&quot;&#10;&#10;### Empty States&#10;When no attractions are found, users see:&#10;- Community contribution prompt&#10;- &quot;Help Us Grow Our Database! &quot; message&#10;- Encouragement to add local attractions&#10;- Link to Add Location feature&#10;&#10;## Search Functionality&#10;&#10;### Toolbar Integration&#10;- **Search Field**: Integrated in custom toolbar&#10;- **Search Icon**: Clickable search trigger&#10;- **Auto-complete**: Real-time search suggestions&#10;- **Clear Function**: Easy search field clearing&#10;&#10;### Search Behavior&#10;- **Enter Key**: Trigger search on keyboard enter&#10;- **Icon Click**: Alternative search trigger&#10;- **Query Processing**: Trim and validate search terms&#10;- **Results Display**: Replace current attractions list&#10;&#10;## Performance Optimizations&#10;&#10;### Caching Strategy&#10;- **Location Caching**: Avoid repeated GPS requests&#10;- **Data Caching**: Store fetched attractions locally&#10;- **Image Caching**: Efficient image loading and storage&#10;&#10;### Request Management&#10;- **Debouncing**: Prevent excessive location requests&#10;- **Request Flags**: Track ongoing operations&#10;- **Memory Management**: Efficient list handling&#10;&#10;## Location Detection Logic&#10;&#10;### GPS Flow&#10;```&#10;1. Check permissions&#10;2. Request high-accuracy location&#10;3. Geocode coordinates&#10;4. Normalize city names&#10;5. Query Firebase&#10;6. Display results&#10;```&#10;&#10;### Fallback Cities&#10;When location fails, try these cities in order:&#10;- Colombo (capital)&#10;- Kandy (cultural capital)&#10;- Galle (southern gem)&#10;- Anuradhapura (ancient city)&#10;- Nuwara Eliya (hill country)&#10;- Kahawatta (test location)&#10;&#10;### City Name Normalization&#10;Handles common variations:&#10;- &quot;Colombo Municipal Council&quot; → &quot;Colombo&quot;&#10;- &quot;Kandy District&quot; → &quot;Kandy&quot;&#10;- Case-insensitive matching&#10;- Special character handling&#10;&#10;## Integration Points&#10;&#10;### Firebase Connection&#10;- **Firestore Collections**: `/cities/{cityName}/attractions`&#10;- **Real-time Updates**: Live data synchronization&#10;- **Offline Support**: Cached data when offline&#10;&#10;### Navigation Integration&#10;- **Deep Linking**: Direct access to specific attractions&#10;- **Search History**: Previous searches accessible&#10;- **Filter State**: Maintained across sessions&#10;&#10;---&#10;*The Home &amp; Discovery system provides users with a seamless way to find nearby attractions while maintaining excellent performance and user experience.*" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/features/location-details.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/features/location-details.md" />
              <option name="updatedContent" value="# Location Details Feature&#10;&#10;## Overview&#10;The Location Details screen provides comprehensive information about individual attractions, including images, descriptions, videos, and contributor information.&#10;&#10;## Features&#10;&#10;###  Image Gallery&#10;- **Multiple Images**: Support for multiple attraction photos&#10;- **Image Carousel**: Swipeable image gallery&#10;- **High-Quality Display**: Optimized image loading and display&#10;- **Zoom Functionality**: Pinch-to-zoom for detailed viewing&#10;- **Placeholder Handling**: Default images for missing content&#10;&#10;###  Detailed Information&#10;- **Attraction Name**: Clear, prominent title display&#10;- **Category Badge**: Visual category identification&#10;- **Full Description**: Comprehensive attraction details&#10;- **Location Information**: City and regional details&#10;- **Contributor Credits**: Recognition for content contributors&#10;&#10;###  Video Integration&#10;- **YouTube Integration**: Embedded video content&#10;- **Optional Videos**: Not all attractions require video content&#10;- **Responsive Player**: Adaptive video player sizing&#10;- **External Link**: Option to open in YouTube app&#10;&#10;###  Location Services&#10;- **GPS Coordinates**: Precise location data&#10;- **Map Integration**: Interactive map display&#10;- **Directions**: Navigation to attraction location&#10;- **Nearby Attractions**: Related location suggestions&#10;&#10;## Technical Implementation&#10;&#10;### Data Model&#10;```java&#10;public class Attraction {&#10;    private String name;&#10;    private String category;&#10;    private String description;&#10;    private List&lt;String&gt; images;&#10;    private String youtubeUrl;&#10;    private String contributorName;&#10;    private long contributedAt;&#10;    private double latitude;&#10;    private double longitude;&#10;    private String city;&#10;    private String province;&#10;}&#10;```&#10;&#10;### Image Loading&#10;- **Glide Integration**: Efficient image loading library&#10;- **Caching Strategy**: Memory and disk caching&#10;- **Progressive Loading**: Blur-to-clear image transitions&#10;- **Error Handling**: Fallback images for failed loads&#10;&#10;### Video Handling&#10;- **YouTube Player API**: Embedded video playback&#10;- **Thumbnail Extraction**: Preview images for videos&#10;- **Bandwidth Optimization**: Quality selection based on connection&#10;- **Offline Handling**: Graceful degradation without internet&#10;&#10;## User Interface Components&#10;&#10;### Header Section&#10;- **Hero Image**: Large featured image at top&#10;- **Overlay Information**: Title and category over image&#10;- **Back Navigation**: Clear return to previous screen&#10;- **Share Button**: Social sharing functionality&#10;&#10;### Content Sections&#10;- **Image Gallery**: Horizontal scrolling image carousel&#10;- **Description Card**: Detailed attraction information&#10;- **Video Section**: YouTube player integration (if available)&#10;- **Contributor Info**: Attribution and timestamp&#10;- **Location Details**: Address and map integration&#10;&#10;### Interactive Elements&#10;- **Image Tap**: Full-screen image viewing&#10;- **Video Play**: In-app video playback&#10;- **Map Tap**: Open in maps application&#10;- **Share Action**: Social media sharing&#10;- **Favorite Toggle**: Save for later functionality&#10;&#10;## Content Management&#10;&#10;### Image Requirements&#10;- **Format Support**: JPEG, PNG, WebP&#10;- **Size Optimization**: Automatic resizing for performance&#10;- **Quality Tiers**: Multiple resolutions for different screens&#10;- **CDN Integration**: Fast global image delivery&#10;&#10;### Video Content&#10;- **YouTube URLs**: Standard YouTube video links&#10;- **Thumbnail Generation**: Automatic preview creation&#10;- **Quality Options**: Auto-selection based on device capabilities&#10;- **Offline Mode**: Show thumbnail with play button when offline&#10;&#10;### Text Content&#10;- **Rich Formatting**: Support for basic text formatting&#10;- **Multilingual Support**: Preparation for multiple languages&#10;- **Character Limits**: Reasonable description length limits&#10;- **Search Optimization**: SEO-friendly content structure&#10;&#10;## Navigation Flow&#10;&#10;### Entry Points&#10;- **Home Screen**: Tap attraction card&#10;- **Search Results**: Direct access from search&#10;- **Map View**: Pin tap navigation&#10;- **Deep Links**: Direct URL access to specific attractions&#10;&#10;### Exit Points&#10;- **Back Button**: Return to previous screen&#10;- **Home Navigation**: Quick return to main screen&#10;- **Related Attractions**: Browse similar locations&#10;- **External Apps**: Maps, YouTube, social media&#10;&#10;## Performance Optimization&#10;&#10;### Loading Strategy&#10;- **Progressive Loading**: Content loads in stages&#10;- **Priority Queue**: Important content loads first&#10;- **Background Preloading**: Prepare related content&#10;- **Cache Management**: Intelligent cache cleanup&#10;&#10;### Memory Management&#10;- **Image Recycling**: Efficient bitmap handling&#10;- **Video Cleanup**: Proper player resource management&#10;- **Data Binding**: Memory-efficient view updates&#10;- **Lifecycle Awareness**: Proper component cleanup&#10;&#10;## Accessibility Features&#10;&#10;### Screen Reader Support&#10;- **Content Description**: Meaningful image descriptions&#10;- **Navigation Labels**: Clear button and link labels&#10;- **Heading Structure**: Proper content hierarchy&#10;- **Focus Management**: Logical tab order&#10;&#10;### Visual Accessibility&#10;- **High Contrast**: Support for accessibility themes&#10;- **Text Scaling**: Respect system font size settings&#10;- **Color Independence**: Information not conveyed by color alone&#10;- **Touch Targets**: Minimum 48dp interactive areas&#10;&#10;## Error Handling&#10;&#10;### Content Errors&#10;- **Missing Images**: Placeholder image display&#10;- **Broken Videos**: Graceful fallback to description&#10;- **Network Issues**: Cached content display&#10;- **Invalid Data**: Error messages with retry options&#10;&#10;### User Experience&#10;- **Loading States**: Clear progress indicators&#10;- **Error Messages**: Helpful, actionable error text&#10;- **Retry Mechanisms**: Easy content refresh options&#10;- **Offline Mode**: Limited functionality when disconnected&#10;&#10;## Future Enhancements&#10;&#10;### Planned Features&#10;- **User Reviews**: Community ratings and comments&#10;- **Photo Uploads**: User-contributed images&#10;- **Virtual Tours**: 360-degree image support&#10;- **Audio Guides**: Spoken attraction descriptions&#10;&#10;### Technical Improvements&#10;- **AR Integration**: Augmented reality features&#10;- **Offline Maps**: Downloadable map data&#10;- **Real-time Updates**: Live attraction information&#10;- **Social Features**: User check-ins and sharing&#10;&#10;---&#10;*The Location Details feature provides users with comprehensive, engaging information about attractions while maintaining excellent performance and accessibility.*" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/features/navigation.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/features/navigation.md" />
              <option name="updatedContent" value="# Navigation System&#10;&#10;## Overview&#10;The Hidden Sri Lanka app uses a drawer-based navigation system with a custom toolbar, providing intuitive access to all app features while maintaining a clean, modern interface.&#10;&#10;## Architecture&#10;&#10;### Navigation Components&#10;- **BaseActivity**: Abstract base class for consistent navigation&#10;- **Drawer Layout**: Side navigation menu for main features&#10;- **Custom Toolbar**: Integrated search and branding&#10;- **Material Navigation**: Google Material Design components&#10;&#10;### Navigation Hierarchy&#10;```&#10;MainActivity (Splash) → WelcomeActivity → LoginActivity → HomeActivity (Base)&#10;                                     ↘ SignUpActivity ↗&#10;```&#10;&#10;## Drawer Navigation Menu&#10;&#10;### Primary Navigation Items&#10;- ** Home**: Main attraction discovery screen&#10;- **⚙️ Settings**: App preferences and configuration&#10;- **️ Explore Map**: Full-screen map view of attractions&#10;- **➕ Add Location**: Community contribution form&#10;- **❤️ Favorites**: Saved attractions (Coming Soon)&#10;- **ℹ️ About Us**: App information and credits&#10;- ** Profile**: User profile management (Coming Soon)&#10;- ** Log Out**: Session termination and return to welcome&#10;&#10;### Navigation States&#10;- **Active Item**: Highlighted current screen&#10;- **Inactive Items**: Available navigation options&#10;- **Disabled Items**: Future features with &quot;Coming Soon&quot; status&#10;- **Logout**: Special handling with session cleanup&#10;&#10;## Custom Toolbar&#10;&#10;### Toolbar Components&#10;- **App Title**: Dynamic title based on current screen&#10;- **Search Field**: Integrated attraction search&#10;- **Search Icon**: Interactive search trigger&#10;- **Hamburger Menu**: Drawer toggle icon&#10;&#10;### Search Integration&#10;- **Real-time Search**: Instant attraction filtering&#10;- **City Override**: Manual city selection&#10;- **Auto-complete**: Search suggestions&#10;- **Clear Function**: Easy search reset&#10;&#10;### Responsive Design&#10;- **Title Truncation**: Handle long screen titles&#10;- **Search Field Sizing**: Adaptive to screen size&#10;- **Touch Targets**: Accessible button sizes&#10;- **Visual Hierarchy**: Clear information priority&#10;&#10;## Technical Implementation&#10;&#10;### BaseActivity Pattern&#10;```java&#10;public abstract class BaseActivity extends AppCompatActivity {&#10;    protected ActivityBaseBinding binding;&#10;    protected SessionManager sessionManager;&#10;    &#10;    protected abstract int getLayoutResourceId();&#10;    protected abstract String getActivityTitle();&#10;}&#10;```&#10;&#10;### Navigation Handling&#10;```java&#10;@Override&#10;public boolean onNavigationItemSelected(@NonNull MenuItem item) {&#10;    int itemId = item.getItemId();&#10;    Intent intent = null;&#10;    &#10;    // Handle navigation logic&#10;    // Prevent navigation to same screen&#10;    // Clear activity stack for logout&#10;    &#10;    if (intent != null) {&#10;        startActivity(intent);&#10;    }&#10;    &#10;    binding.drawerLayout.closeDrawer(GravityCompat.START);&#10;    return true;&#10;}&#10;```&#10;&#10;### Session-Aware Navigation&#10;- **Login Check**: Automatic redirection for unauthenticated users&#10;- **State Preservation**: Maintain navigation state across sessions&#10;- **Logout Handling**: Complete session cleanup and navigation reset&#10;&#10;## Screen-Specific Features&#10;&#10;### Home Screen&#10;- **Location Display**: Current city in title&#10;- **Filter Integration**: Category filters below toolbar&#10;- **Refresh Action**: Pull-to-refresh and manual refresh&#10;- **Search Override**: City-specific attraction search&#10;&#10;### Settings Screen&#10;- **Theme Toggle**: Dark/light mode switching (Coming Soon)&#10;- **Preferences**: User customization options&#10;- **Account Settings**: Profile management integration&#10;- **App Information**: Version and update details&#10;&#10;### Add Location Screen&#10;- **Form Navigation**: Step-by-step form completion&#10;- **Save Draft**: Preserve form data during navigation&#10;- **Success Routing**: Post-submission navigation&#10;- **Cancel Handling**: Safe form exit with confirmation&#10;&#10;### About Us Screen&#10;- **Static Content**: App information and team credits&#10;- **External Links**: Social media and contact information&#10;- **Legal Pages**: Privacy policy and terms of service&#10;- **Version Information**: App build and update details&#10;&#10;## Navigation Flows&#10;&#10;### Authentication Flow&#10;```&#10;Splash → Welcome → Login → Home&#10;       ↘ (if logged in) → Home&#10;```&#10;&#10;### Main App Flow&#10;```&#10;Home ←→ Settings&#10; ↕       ↕&#10;Add Location ←→ About Us&#10; ↕       ↕&#10;Map View ←→ Profile (Coming Soon)&#10;```&#10;&#10;### Logout Flow&#10;```&#10;Any Screen → Logout → Session Clear → Welcome&#10;```&#10;&#10;## User Experience&#10;&#10;### Navigation Feedback&#10;- **Visual Indicators**: Active screen highlighting&#10;- **Loading States**: Progress during screen transitions&#10;- **Error Handling**: Graceful failure recovery&#10;- **Toast Messages**: Confirmation of navigation actions&#10;&#10;### Accessibility&#10;- **Screen Reader**: Proper navigation announcements&#10;- **Keyboard Navigation**: Full keyboard accessibility&#10;- **Focus Management**: Logical tab order&#10;- **Touch Targets**: Minimum 48dp interactive areas&#10;&#10;### Performance&#10;- **Lazy Loading**: Load screens on demand&#10;- **Memory Management**: Proper activity lifecycle handling&#10;- **Animation**: Smooth transitions between screens&#10;- **Back Stack**: Efficient navigation history management&#10;&#10;## Customization Features&#10;&#10;### Theming&#10;- **Material Design**: Consistent visual language&#10;- **Brand Colors**: Hidden Sri Lanka color scheme&#10;- **Typography**: Custom font families (Cursive)&#10;- **Dark Mode**: Planned future enhancement&#10;&#10;### Localization Ready&#10;- **String Resources**: Externalized text content&#10;- **RTL Support**: Right-to-left language preparation&#10;- **Cultural Adaptation**: Sri Lankan context optimization&#10;- **Multi-language**: Framework for future translations&#10;&#10;## Error Handling&#10;&#10;### Navigation Errors&#10;- **Missing Permissions**: Graceful permission handling&#10;- **Network Issues**: Offline navigation capabilities&#10;- **Invalid States**: Recovery from corrupted navigation state&#10;- **Memory Issues**: Low memory navigation optimization&#10;&#10;### Recovery Mechanisms&#10;- **Automatic Retry**: Retry failed navigation attempts&#10;- **Fallback Options**: Alternative navigation paths&#10;- **User Guidance**: Clear error messages and next steps&#10;- **Debug Information**: Development-time navigation debugging&#10;&#10;## Future Enhancements&#10;&#10;### Planned Features&#10;- **Bottom Navigation**: Alternative navigation pattern&#10;- **Tab Navigation**: Secondary navigation within screens&#10;- **Deep Linking**: Direct navigation to specific content&#10;- **Voice Navigation**: Accessibility enhancement&#10;&#10;### Technical Improvements&#10;- **Navigation Component**: Android Jetpack Navigation&#10;- **Single Activity**: Modern navigation architecture&#10;- **Gesture Navigation**: Swipe-based navigation&#10;- **Progressive Web App**: Web-based navigation support&#10;&#10;---&#10;*The navigation system provides users with intuitive, accessible access to all app features while maintaining excellent performance and user experience.*" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/guides/contributing.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/guides/contributing.md" />
              <option name="updatedContent" value="# Contributing Guide&#10;&#10;## How to Add New Attractions&#10;&#10;### Quick Start&#10;1. **Discover something amazing** - Find a hidden gem in Sri Lanka&#10;2. **Gather information** - Take photos, note details, research background&#10;3. **Open the app** - Navigate to &quot;Add Location&quot; from the menu&#10;4. **Fill the form** - Provide all required information&#10;5. **Submit** - Share with the community!&#10;&#10;## Content Guidelines&#10;&#10;### What Makes a Good Attraction Entry&#10;&#10;#### ✅ **Include These**&#10;- **Unique locations** - Places not commonly found in guidebooks&#10;- **Accurate information** - Verify details before submitting&#10;- **High-quality photos** - Clear, well-lit images that showcase the location&#10;- **Detailed descriptions** - Help others understand what makes this place special&#10;- **Practical information** - How to get there, best time to visit&#10;- **Cultural context** - Historical or cultural significance&#10;- **Safety information** - Any important safety considerations&#10;&#10;#### ❌ **Avoid These**&#10;- **Private property** - Locations requiring special permission&#10;- **Inappropriate content** - Keep it family-friendly&#10;- **Duplicate entries** - Check if the location already exists&#10;- **Poor quality images** - Blurry, dark, or inappropriate photos&#10;- **Inaccurate information** - Always verify your facts&#10;- **Commercial promotions** - Focus on the attraction, not businesses&#10;- **Dangerous locations** - Places that could harm visitors&#10;&#10;### Categories Explained&#10;&#10;#### **Historical Site**&#10;- Ancient ruins and archaeological sites&#10;- Colonial-era buildings and fortifications&#10;- Heritage sites and monuments&#10;- Traditional architecture examples&#10;- Museums and cultural centers&#10;&#10;**Examples**: Sigiriya Rock Fortress, Galle Fort, Anuradhapura ruins&#10;&#10;#### **WaterFall**&#10;- Natural waterfalls and cascades&#10;- Swimming holes and natural pools&#10;- Scenic water features&#10;- Hidden streams and rivers&#10;- Seasonal waterfalls&#10;&#10;**Examples**: Bambarakanda Falls, Sekumpura Falls, hidden village waterfalls&#10;&#10;#### **Beach**&#10;- Secluded beaches and coves&#10;- Surfing and water sports locations&#10;- Coastal viewpoints&#10;- Marine conservation areas&#10;- Unique coastal formations&#10;&#10;**Examples**: Secret Beach Mirissa, hidden coves in Arugam Bay&#10;&#10;#### **Mountain**&#10;- Hiking trails and viewpoints&#10;- Hill country attractions&#10;- Rock formations and caves&#10;- Mountain villages&#10;- Scenic drives and passes&#10;&#10;**Examples**: Mini World's End, hidden viewpoints in Ella&#10;&#10;#### **Temple**&#10;- Buddhist temples and stupas&#10;- Hindu kovils and shrines&#10;- Meditation centers&#10;- Religious festivals and sites&#10;- Spiritual retreat locations&#10;&#10;**Examples**: Cave temples, village temples, forest monasteries&#10;&#10;#### **National Park**&#10;- Wildlife viewing locations&#10;- Nature reserves&#10;- Eco-tourism sites&#10;- Bird watching spots&#10;- Conservation areas&#10;&#10;**Examples**: Lesser-known areas in Yala, community conservation projects&#10;&#10;## Technical Requirements&#10;&#10;### Image Guidelines&#10;&#10;#### **Image Hosting**&#10;Use reliable image hosting services:&#10;- **Imgur** - imgur.com (recommended)&#10;- **Google Photos** - photos.google.com&#10;- **Dropbox** - dropbox.com&#10;- **Google Drive** - drive.google.com (public links)&#10;&#10;#### **Image Requirements**&#10;- **Format**: JPEG, PNG, or WebP&#10;- **Size**: Minimum 800x600 pixels&#10;- **Quality**: Clear, well-exposed images&#10;- **Content**: Show the attraction clearly&#10;- **Orientation**: Landscape preferred for main images&#10;&#10;#### **How to Get Image URLs**&#10;1. **Upload to hosting service**&#10;2. **Get shareable link**&#10;3. **Ensure direct image access**&#10;4. **Test the URL** - Should end with .jpg, .png, etc.&#10;5. **Copy the direct link** to the form&#10;&#10;### Description Writing&#10;&#10;#### **Structure Your Description**&#10;1. **Opening sentence** - What is this place?&#10;2. **Key features** - What makes it special?&#10;3. **Experience** - What can visitors expect?&#10;4. **Practical info** - How to get there, when to visit&#10;5. **Cultural context** - Historical or cultural significance&#10;&#10;#### **Writing Style**&#10;- **Be descriptive** but concise&#10;- **Use engaging language** - Make readers want to visit&#10;- **Include sensory details** - What do you see, hear, smell?&#10;- **Be objective** - Avoid overly promotional language&#10;- **Proofread** - Check spelling and grammar&#10;&#10;#### **Example Good Description**&#10;```&#10;Hidden behind a small village temple, this ancient stone carving &#10;depicts scenes from Buddhist Jataka tales dating back to the 12th &#10;century. The intricate artwork remains remarkably preserved, &#10;protected by the natural rock overhang above. Local monks are &#10;happy to explain the stories depicted in the carvings. Best &#10;visited in the early morning when the light illuminates the &#10;details beautifully. Take the village road past the main temple &#10;and follow the path for about 200 meters through the forest.&#10;```&#10;&#10;### Location Information&#10;&#10;#### **Province and City Selection**&#10;- **Choose accurate province** - Use official Sri Lankan provinces&#10;- **Select correct city** - Major town or city closest to attraction&#10;- **Be specific** - Help others find the location easily&#10;- **Consider accessibility** - Mention if special transport needed&#10;&#10;#### **GPS Coordinates** (Future Feature)&#10;- **Latitude and longitude** - Precise location data&#10;- **Accuracy** - Use GPS apps for precise coordinates&#10;- **Format** - Decimal degrees (e.g., 7.2906° N, 80.6337° E)&#10;&#10;## Quality Standards&#10;&#10;### Review Process&#10;1. **Automatic validation** - Basic form checking&#10;2. **Community review** - Other users can provide feedback&#10;3. **Admin approval** - Final quality check for new contributors&#10;4. **Publishing** - Approved attractions go live immediately&#10;&#10;### Quality Metrics&#10;- **Accuracy** - Information must be correct and current&#10;- **Completeness** - All required fields properly filled&#10;- **Originality** - No duplicate or copied content&#10;- **Helpfulness** - Useful for other travelers&#10;- **Safety** - No dangerous or inappropriate recommendations&#10;&#10;## Contributor Recognition&#10;&#10;### Attribution&#10;- **Your name appears** on every attraction you add&#10;- **Contribution timestamp** shows when you added it&#10;- **Community recognition** for quality contributions&#10;- **Future features** may include contributor profiles&#10;&#10;### Building Reputation&#10;- **Quality over quantity** - Focus on excellent submissions&#10;- **Complete information** - Fill all fields thoroughly&#10;- **Engaging descriptions** - Help others discover amazing places&#10;- **Accurate details** - Build trust with the community&#10;&#10;## Community Guidelines&#10;&#10;### Respectful Contribution&#10;- **Respect local communities** - Don't overwhelm small villages&#10;- **Follow local customs** - Respect religious and cultural sites&#10;- **Environmental awareness** - Promote sustainable tourism&#10;- **Privacy considerations** - Don't share private locations&#10;&#10;### Collaborative Spirit&#10;- **Help improve existing entries** - Report inaccuracies or updates&#10;- **Share knowledge** - Add valuable tips and insights&#10;- **Support other contributors** - Provide constructive feedback&#10;- **Build community** - We're all working together&#10;&#10;## Getting Started Today&#10;&#10;### Your First Contribution&#10;1. **Think local** - What amazing place do you know near you?&#10;2. **Visit and document** - Take photos, gather information&#10;3. **Research background** - Learn about history or significance&#10;4. **Craft your entry** - Write engaging, helpful description&#10;5. **Submit and share** - Help others discover this gem&#10;&#10;### Ideas for Contributions&#10;- **That waterfall** you found hiking last weekend&#10;- **The ancient temple** your grandmother told you about&#10;- **The viewpoint** with incredible sunrise views&#10;- **The beach cove** only locals know about&#10;- **The rock formation** that looks like something magical&#10;&#10;### Need Help?&#10;- **Practice with the form** - Fill it out without submitting first&#10;- **Ask questions** - Use the About Us contact information&#10;- **Start simple** - Your first entry doesn't need to be perfect&#10;- **Learn from others** - Look at existing attractions for inspiration&#10;&#10;---&#10;*Every hidden gem you share helps fellow travelers discover the incredible diversity and beauty of Sri Lanka. Thank you for contributing to our community!* " />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/guides/getting-started.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/guides/getting-started.md" />
              <option name="updatedContent" value="# Getting Started Guide&#10;&#10;## Welcome to Hidden Sri Lanka! &#10;&#10;This guide will help you get started with discovering amazing hidden gems across Sri Lanka using our mobile app.&#10;&#10;## First Time Setup&#10;&#10;### 1. Installation&#10;- Download the app from Google Play Store (when available)&#10;- Or install the APK file provided by the development team&#10;- Grant necessary permissions when prompted&#10;&#10;### 2. Account Creation&#10;1. **Open the app** - You'll see our beautiful splash screen&#10;2. **Welcome screen** - Tap &quot;Next&quot; to continue&#10;3. **Choose Sign Up** - If you're a new user&#10;4. **Fill out the form**:&#10;   - Username (unique identifier)&#10;   - Email address (for account recovery)&#10;   - Password (minimum 6 characters)&#10;   - Confirm password&#10;5. **Tap Sign Up** - Create your account&#10;6. **Success!** - You're now ready to explore&#10;&#10;### 3. First Login&#10;1. **Enter credentials** - Username and password&#10;2. **Tap Login** - Access the app&#10;3. **Grant location permission** - For personalized recommendations&#10;4. **Start exploring!** - Discover attractions near you&#10;&#10;## Main Features Overview&#10;&#10;###  Home Screen&#10;**What you'll see:**&#10;- Current location display&#10;- Personalized attraction recommendations&#10;- Category filters (All, Historical Sites, Waterfalls, etc.)&#10;- Horizontally scrollable filter chips&#10;- List of nearby attractions&#10;&#10;**How to use:**&#10;- **Automatic discovery**: App detects your location and shows nearby attractions&#10;- **Filter by category**: Tap any filter chip to see specific types of attractions&#10;- **Search manually**: Use the search bar to explore specific cities&#10;- **Tap attractions**: View detailed information about any location&#10;&#10;###  Search &amp; Discovery&#10;**Search for specific cities:**&#10;1. Tap the search field in the toolbar&#10;2. Type a Sri Lankan city name (e.g., &quot;Kandy&quot;, &quot;Galle&quot;)&#10;3. Press enter or tap the search icon&#10;4. Browse attractions in that city&#10;&#10;**Filter by interests:**&#10;- **All**: See everything available&#10;- **Historical Sites**: Ancient temples, ruins, heritage sites&#10;- **Waterfalls**: Natural cascades and water features&#10;- **Beaches**: Coastal attractions and surf spots&#10;- **Mountains**: Hill country views and hiking trails&#10;- **Temples**: Religious and spiritual sites&#10;- **National Parks**: Wildlife reserves and nature spots&#10;&#10;### ➕ Add New Locations&#10;**Share hidden gems you've discovered:**&#10;1. **Navigate to Add Location** - Use the drawer menu&#10;2. **Fill out the form**:&#10;   - Location name&#10;   - Select category&#10;   - Choose province and city&#10;   - Write a detailed description&#10;   - Add your name as contributor&#10;   - Provide image URL&#10;   - Add YouTube video (optional)&#10;3. **Preview your image** - Load from URL to verify&#10;4. **Submit** - Share with the community&#10;&#10;###  Navigation&#10;**Using the app menu:**&#10;- **Hamburger icon** (≡) - Opens the main menu&#10;- **Home** - Return to main attraction discovery&#10;- **Settings** - App preferences (more features coming)&#10;- **Explore Map** - Full-screen map view (coming soon)&#10;- **Add Location** - Contribute new attractions&#10;- **About Us** - App information and team credits&#10;- **Log Out** - Sign out of your account&#10;&#10;## Tips for Best Experience&#10;&#10;###  Location Tips&#10;- **Enable GPS** - For accurate location detection&#10;- **Use Wi-Fi** - For faster loading and better accuracy&#10;- **Test different cities** - Search manually if auto-detection fails&#10;- **Be patient** - Location detection may take a few seconds&#10;&#10;###  Contributing Photos&#10;- **Use clear, high-quality images**&#10;- **Ensure proper lighting**&#10;- **Show the attraction's best features**&#10;- **Use image hosting services** like Imgur, Google Photos, or Dropbox&#10;- **Copy the direct image URL** (ends with .jpg, .png, etc.)&#10;&#10;### ✍️ Writing Descriptions&#10;- **Be descriptive** - Help others understand what makes this place special&#10;- **Include practical info** - Best time to visit, how to get there&#10;- **Mention unique features** - What makes this location a &quot;hidden gem&quot;&#10;- **Keep it engaging** - Write as if recommending to a friend&#10;&#10;###  App Performance&#10;- **Refresh when needed** - Use the search bar to reload data&#10;- **Check internet connection** - App requires internet for most features&#10;- **Grant permissions** - Location access improves recommendations&#10;- **Restart if issues occur** - Close and reopen the app if problems persist&#10;&#10;## Common Scenarios&#10;&#10;### Scenario 1: Exploring Your Current Area&#10;1. Open the app (with location enabled)&#10;2. Wait for &quot; Detected location: [Your City]&quot; message&#10;3. Browse the &quot;All&quot; filter to see everything nearby&#10;4. Use specific filters to find your interests&#10;5. Tap any attraction for detailed information&#10;&#10;### Scenario 2: Planning a Trip&#10;1. Use the search bar to enter your destination city&#10;2. Browse different categories to plan your itinerary&#10;3. Note down interesting attractions&#10;4. Use the YouTube links for virtual previews&#10;&#10;### Scenario 3: Contributing a Discovery&#10;1. Visit an amazing place that's not in the app&#10;2. Take photos and note details&#10;3. Open the app and go to &quot;Add Location&quot;&#10;4. Upload your photos to an image hosting service&#10;5. Fill out the complete form with all details&#10;6. Submit to help other travelers discover this gem&#10;&#10;### Scenario 4: No Attractions Found&#10;If you see &quot;Help Us Grow Our Database! &quot;:&#10;- This means we don't have attractions for your current location yet&#10;- Consider adding some local gems using &quot;Add Location&quot;&#10;- Try searching for nearby major cities&#10;- Your contributions help the entire community&#10;&#10;## Troubleshooting Quick Fixes&#10;&#10;### Location Not Detected&#10;- Enable location services in device settings&#10;- Grant location permission to the app&#10;- Ensure GPS is turned on&#10;- Try refreshing or restarting the app&#10;- Use manual search as alternative&#10;&#10;### Images Not Loading&#10;- Check internet connection&#10;- Verify the image URL is accessible&#10;- Try using a different image hosting service&#10;- Ensure the URL points directly to the image file&#10;&#10;### App Performance Issues&#10;- Close and restart the app&#10;- Check available storage space&#10;- Ensure stable internet connection&#10;- Update to the latest version when available&#10;&#10;### Login/Account Issues&#10;- Verify username and password are correct&#10;- Check internet connection&#10;- Try creating a new account if persistent issues&#10;- Contact support through &quot;About Us&quot; if needed&#10;&#10;## Getting Help&#10;&#10;### In-App Support&#10;- **About Us** section has contact information&#10;- **Settings** may include help options (coming soon)&#10;- **Error messages** provide specific guidance&#10;&#10;### Community Support&#10;- Share feedback through app reviews&#10;- Report issues via GitHub repository&#10;- Suggest improvements and new features&#10;&#10;## What's Coming Next&#10;&#10;### Planned Features&#10;- **Offline maps** - Browse without internet&#10;- **User reviews** - Rate and review attractions&#10;- **Photo uploads** - Direct image uploading&#10;- **Social features** - Follow other travelers&#10;- **Advanced search** - Filter by distance, rating, amenities&#10;&#10;### Stay Updated&#10;- Check for app updates regularly&#10;- Follow our development progress&#10;- Provide feedback to help us improve&#10;&#10;---&#10;*Welcome to the Hidden Sri Lanka community! Start exploring and help us build the most comprehensive guide to Sri Lanka's hidden treasures.* " />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/guides/troubleshooting.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/guides/troubleshooting.md" />
              <option name="updatedContent" value="# Troubleshooting Guide&#10;&#10;## Common Issues &amp; Solutions&#10;&#10;###  App Launch Issues&#10;&#10;#### App Won't Start / Crashes on Launch&#10;**Symptoms**: App closes immediately after opening or shows error screen&#10;&#10;**Solutions**:&#10;1. **Restart your device** - Simple reboot often fixes memory issues&#10;2. **Clear app cache** - Go to Settings → Apps → Hidden Sri Lanka → Storage → Clear Cache&#10;3. **Clear app data** - Settings → Apps → Hidden Sri Lanka → Storage → Clear Data (Note: This will log you out)&#10;4. **Check available storage** - Ensure you have at least 100MB free space&#10;5. **Update Android version** - App requires Android 5.0 or higher&#10;6. **Reinstall the app** - Uninstall and download fresh copy&#10;&#10;#### Slow App Performance&#10;**Symptoms**: App takes long to load, screens freeze, animations stutter&#10;&#10;**Solutions**:&#10;1. **Close background apps** - Free up device memory&#10;2. **Check internet speed** - Use Wi-Fi for better performance&#10;3. **Restart the app** - Close completely and reopen&#10;4. **Update the app** - Install latest version when available&#10;5. **Check device specs** - App works best on devices with 2GB+ RAM&#10;&#10;###  Location Detection Problems&#10;&#10;#### &quot;Location Not Detected&quot; Message&#10;**Symptoms**: App shows default attractions instead of local ones&#10;&#10;**Solutions**:&#10;1. **Enable location services**:&#10;   - Android: Settings → Location → Turn On&#10;   - App-specific: Settings → Apps → Hidden Sri Lanka → Permissions → Location → Allow&#10;2. **Check GPS signal**:&#10;   - Go outside or near windows&#10;   - Wait 30-60 seconds for GPS lock&#10;   - Ensure location mode is set to &quot;High accuracy&quot;&#10;3. **Refresh location**:&#10;   - Use the search bar to manually refresh&#10;   - Tap the refresh icon in toolbar&#10;   - Close and reopen the app&#10;&#10;#### Wrong Location Detected&#10;**Symptoms**: App shows attractions for wrong city&#10;&#10;**Solutions**:&#10;1. **Manual city search** - Use search bar to enter correct city&#10;2. **Wait for better GPS signal** - Location accuracy improves over time&#10;3. **Check location settings** - Ensure &quot;High accuracy&quot; mode enabled&#10;4. **Clear location cache** - Settings → Apps → Google Play Services → Storage → Clear Cache&#10;&#10;#### Foreign Location Warning&#10;**Symptoms**: &quot; Foreign location detected&quot; message appears&#10;&#10;**This is normal when**:&#10;- You're actually outside Sri Lanka&#10;- Using VPN services&#10;- GPS accuracy is poor&#10;&#10;**Solutions**:&#10;- Use manual search for Sri Lankan cities&#10;- Disable VPN if using one&#10;- Try common cities: Colombo, Kandy, Galle&#10;&#10;###  Login &amp; Account Issues&#10;&#10;#### Can't Log In - &quot;Invalid Credentials&quot;&#10;**Solutions**:&#10;1. **Check username/password**:&#10;   - Ensure correct spelling and capitalization&#10;   - Check for extra spaces&#10;   - Try typing instead of copy-pasting&#10;2. **Password reset** (if feature available):&#10;   - Contact support through About Us page&#10;3. **Create new account**:&#10;   - Use Sign Up if you can't remember credentials&#10;   - Use different username if current one exists&#10;&#10;#### &quot;User Does Not Exist&quot; Error&#10;**Solutions**:&#10;1. **Check username spelling** - Usernames are case-sensitive&#10;2. **Try signing up** - You may not have created account yet&#10;3. **Contact support** - If you're sure account exists&#10;&#10;#### Account Creation Fails&#10;**Common issues**:&#10;- **Username already exists** - Try a different username&#10;- **Invalid email format** - Ensure proper email format (user@domain.com)&#10;- **Password too short** - Use at least 6 characters&#10;- **Network error** - Check internet connection and retry&#10;&#10;###  Network &amp; Data Issues&#10;&#10;#### &quot;No Internet Connection&quot; / Data Won't Load&#10;**Symptoms**: Attractions won't load, error messages about connectivity&#10;&#10;**Solutions**:&#10;1. **Check internet connection**:&#10;   - Try opening a webpage in browser&#10;   - Switch between Wi-Fi and mobile data&#10;   - Move to area with better signal&#10;2. **Check app permissions**:&#10;   - Ensure app can access internet&#10;   - Check data usage restrictions&#10;3. **Clear app cache**:&#10;   - Settings → Apps → Hidden Sri Lanka → Storage → Clear Cache&#10;4. **Try different network**:&#10;   - Switch to Wi-Fi if on mobile data&#10;   - Try different Wi-Fi network&#10;&#10;#### Images Won't Load&#10;**Symptoms**: Attraction cards show placeholder images or broken image icons&#10;&#10;**Solutions**:&#10;1. **Check internet speed** - Images need good connection&#10;2. **Wait longer** - Large images take time to load&#10;3. **Restart app** - Fresh start often fixes image loading&#10;4. **Clear image cache** - Clear app cache in device settings&#10;&#10;#### Firestore/Database Errors&#10;**Symptoms**: &quot;Firebase Database Access Denied&quot; or similar error messages&#10;&#10;**Solutions**:&#10;1. **Check internet connection** - Database needs connectivity&#10;2. **Wait and retry** - Temporary server issues may resolve&#10;3. **Update app** - Database configuration may have changed&#10;4. **Contact support** - May indicate server-side issues&#10;&#10;###  Search &amp; Filter Issues&#10;&#10;#### Search Doesn't Work&#10;**Symptoms**: Typing in search bar shows no results or errors&#10;&#10;**Solutions**:&#10;1. **Check spelling** - Try common Sri Lankan cities (Colombo, Kandy, Galle)&#10;2. **Use English names** - App currently uses English city names&#10;3. **Try partial search** - Type first few letters and see suggestions&#10;4. **Clear search field** - Remove all text and try again&#10;&#10;#### Filters Show No Results&#10;**Symptoms**: Selecting category filters shows &quot;No attractions found&quot;&#10;&#10;**Solutions**:&#10;1. **Try &quot;All&quot; filter** - See if any attractions exist for the city&#10;2. **Search different city** - Current location may have limited data&#10;3. **Contribute data** - Add attractions for your area using &quot;Add Location&quot;&#10;4. **Check internet** - Ensure data can load properly&#10;&#10;#### &quot;Help Us Grow Our Database&quot; Message&#10;**This appears when**: No attractions exist for your current location&#10;&#10;**What to do**:&#10;1. **This is normal** - We're still building the database&#10;2. **Search major cities** - Try Colombo, Kandy, Galle, Anuradhapura&#10;3. **Add local attractions** - Use &quot;Add Location&quot; to contribute&#10;4. **Try nearby areas** - Search neighboring cities or towns&#10;&#10;###  Add Location Form Issues&#10;&#10;#### Form Won't Submit&#10;**Common problems**:&#10;1. **Required fields missing** - Check all fields marked with *&#10;2. **Invalid image URL** - Ensure URL is accessible and points to image&#10;3. **Description too short** - Write at least 50 characters&#10;4. **Network timeout** - Check internet and retry&#10;&#10;#### Image Preview Not Working&#10;**Solutions**:&#10;1. **Check image URL format** - Should end with .jpg, .png, etc.&#10;2. **Test URL in browser** - Open URL separately to verify it works&#10;3. **Use different hosting service** - Try Imgur or Google Photos&#10;4. **Check image size** - Very large images may not load&#10;&#10;#### Can't Select Province/City&#10;**Solutions**:&#10;1. **Select province first** - Cities populate based on province selection&#10;2. **Scroll through options** - Lists may be long&#10;3. **Check spelling** - Look for similar names&#10;4. **Restart form** - Clear and start over if stuck&#10;&#10;###  Device-Specific Issues&#10;&#10;#### Small Screen Display Problems&#10;**Solutions**:&#10;1. **Rotate device** - Try landscape mode for better visibility&#10;2. **Adjust font size** - Use device accessibility settings&#10;3. **Scroll horizontally** - Filter chips scroll left/right&#10;4. **Zoom interface** - Use device accessibility zoom&#10;&#10;#### Older Android Versions&#10;**Minimum requirements**: Android 5.0 (API 21)&#10;&#10;**If using older version**:&#10;- Update Android OS if possible&#10;- Some features may not work properly&#10;- Consider upgrading device&#10;&#10;#### Memory Issues&#10;**Symptoms**: App closes unexpectedly, slow performance&#10;&#10;**Solutions**:&#10;1. **Close other apps** - Free up memory&#10;2. **Restart device** - Clear memory completely&#10;3. **Check storage space** - Keep at least 1GB free&#10;4. **Reduce image quality** in device camera settings&#10;&#10;###  Session &amp; Logout Issues&#10;&#10;#### Automatically Logged Out&#10;**Possible causes**:&#10;- App updated/reinstalled&#10;- Device storage cleared&#10;- Session expired&#10;&#10;**Solutions**:&#10;1. **Log in again** - Enter your credentials&#10;2. **Check &quot;Remember me&quot;** option if available&#10;3. **Contact support** - If frequent logout issues occur&#10;&#10;#### Can't Log Out&#10;**Solutions**:&#10;1. **Use menu logout** - Drawer → Log Out&#10;2. **Clear app data** - Settings → Apps → Hidden Sri Lanka → Storage → Clear Data&#10;3. **Reinstall app** - Complete fresh start&#10;&#10;## Getting Additional Help&#10;&#10;### When to Contact Support&#10;- Persistent crashes after trying all solutions&#10;- Data loss or corruption issues&#10;- Account access problems that can't be resolved&#10;- Suspected bugs or app malfunctions&#10;&#10;### How to Contact Support&#10;1. **About Us page** - Find contact information in app&#10;2. **GitHub issues** - Report technical problems&#10;3. **Email support** - Include device model, Android version, and problem description&#10;&#10;### Information to Include When Reporting Issues&#10;- **Device model** (e.g., Samsung Galaxy S21)&#10;- **Android version** (e.g., Android 12)&#10;- **App version** (found in About Us)&#10;- **Exact error message** (screenshot if possible)&#10;- **Steps to reproduce** the problem&#10;- **When it started happening**&#10;&#10;### Debug Information Collection&#10;To help us solve your problem:&#10;1. **Take screenshots** of error messages&#10;2. **Note exact steps** that cause the issue&#10;3. **Try on different network** (Wi-Fi vs mobile data)&#10;4. **Test with different user account** if possible&#10;&#10;---&#10;*Most issues can be resolved with these solutions. If problems persist, don't hesitate to reach out for additional support through the app's About Us section.*" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/setup/architecture.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/setup/architecture.md" />
              <option name="updatedContent" value="# App Architecture&#10;&#10;## Overview&#10;Hidden Sri Lanka follows Android best practices with a modular, maintainable architecture that supports scalability and testability.&#10;&#10;## Architecture Pattern&#10;&#10;### Model-View-Controller (MVC) with BaseActivity Pattern&#10;The app uses a modified MVC pattern with a BaseActivity that provides common functionality across all screens.&#10;&#10;```&#10;┌─────────────────────────────────────────┐&#10;│                View Layer               │&#10;│  Activities, Layouts, Adapters         │&#10;├─────────────────────────────────────────┤&#10;│              Controller Layer           │&#10;│  Activity Logic, Event Handlers        │&#10;├─────────────────────────────────────────┤&#10;│                Model Layer              │&#10;│  Data Classes, Firebase Integration     │&#10;└─────────────────────────────────────────┘&#10;```&#10;&#10;## Core Components&#10;&#10;### 1. BaseActivity Pattern&#10;```java&#10;public abstract class BaseActivity extends AppCompatActivity {&#10;    protected ActivityBaseBinding binding;&#10;    protected SessionManager sessionManager;&#10;    &#10;    protected abstract int getLayoutResourceId();&#10;    protected abstract String getActivityTitle();&#10;}&#10;```&#10;&#10;**Benefits**:&#10;- Consistent navigation across all screens&#10;- Shared session management&#10;- Common toolbar and drawer functionality&#10;- Reduced code duplication&#10;&#10;### 2. Session Management&#10;```java&#10;public class SessionManager {&#10;    private final SharedPreferences pref;&#10;    private final SharedPreferences.Editor editor;&#10;    &#10;    // Session lifecycle management&#10;    public void createLoginSession(String username, String email, String name);&#10;    public boolean isLoggedIn();&#10;    public void logoutUser();&#10;}&#10;```&#10;&#10;**Features**:&#10;- Persistent user sessions&#10;- Automatic login state checking&#10;- Secure session cleanup&#10;- Multi-field user data storage&#10;&#10;### 3. Data Models&#10;```java&#10;public class Attraction {&#10;    private String name;&#10;    private String category;&#10;    private String description;&#10;    private List&lt;String&gt; images;&#10;    private String youtubeUrl;&#10;    private String contributorName;&#10;    private long contributedAt;&#10;    private double latitude;&#10;    private double longitude;&#10;}&#10;```&#10;&#10;## Application Flow&#10;&#10;### 1. App Launch Sequence&#10;```&#10;MainActivity (Splash)&#10;    ↓&#10;SessionManager.isLoggedIn()&#10;    ├── true → HomeActivity&#10;    └── false → WelcomeActivity&#10;                    ↓&#10;                LoginActivity/SignUpActivity&#10;                    ↓&#10;                HomeActivity&#10;```&#10;&#10;### 2. Authentication Flow&#10;```&#10;User Input → Validation → Firebase Query → Session Creation → Navigation&#10;```&#10;&#10;### 3. Data Flow&#10;```&#10;User Action → Firebase Query → Data Processing → UI Update → User Feedback&#10;```&#10;&#10;## Package Structure&#10;&#10;```&#10;com.s23010526.hiddensrilanka/&#10;├── models/&#10;│   ├── Attraction.java&#10;│   ├── User.java&#10;│   └── Location.java&#10;├── activities/&#10;│   ├── BaseActivity.java&#10;│   ├── MainActivity.java&#10;│   ├── HomeActivity.java&#10;│   ├── LoginActivity.java&#10;│   ├── SignUpActivity.java&#10;│   ├── AddLocationActivity.java&#10;│   ├── SettingsActivity.java&#10;│   └── AboutUsActivity.java&#10;├── adapters/&#10;│   └── AttractionAdapter.java&#10;├── utils/&#10;│   ├── SessionManager.java&#10;│   └── DataSeeder.java&#10;└── databinding/&#10;    └── Generated binding classes&#10;```&#10;&#10;## Design Patterns Used&#10;&#10;### 1. Singleton Pattern&#10;```java&#10;// SessionManager implementation&#10;public class SessionManager {&#10;    private static SessionManager instance;&#10;    &#10;    public static SessionManager getInstance(Context context) {&#10;        if (instance == null) {&#10;            instance = new SessionManager(context);&#10;        }&#10;        return instance;&#10;    }&#10;}&#10;```&#10;&#10;### 2. Adapter Pattern&#10;```java&#10;public class AttractionAdapter extends RecyclerView.Adapter&lt;AttractionAdapter.ViewHolder&gt; {&#10;    private List&lt;Attraction&gt; attractions;&#10;    &#10;    // Bridge between data and RecyclerView&#10;}&#10;```&#10;&#10;### 3. Template Method Pattern&#10;```java&#10;// BaseActivity defines template, subclasses implement specifics&#10;public abstract class BaseActivity extends AppCompatActivity {&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        // Common setup&#10;        setupCustomImplementation(); // Template method&#10;    }&#10;    &#10;    protected abstract void setupCustomImplementation();&#10;}&#10;```&#10;&#10;## Data Management&#10;&#10;### 1. Local Storage&#10;- **SharedPreferences**: User sessions and preferences&#10;- **Room Database**: Future enhancement for offline data&#10;- **File Storage**: Cached images and temporary data&#10;&#10;### 2. Remote Storage&#10;- **Firebase Firestore**: Attraction data and metadata&#10;- **Firebase Realtime Database**: User authentication&#10;- **Firebase Storage**: Image hosting (future enhancement)&#10;&#10;### 3. Caching Strategy&#10;```java&#10;// Multi-level caching&#10;Memory Cache → Local Storage → Remote Database&#10;```&#10;&#10;## UI Architecture&#10;&#10;### 1. Layout Hierarchy&#10;```xml&#10;BaseActivity Layout:&#10;├── DrawerLayout&#10;│   ├── LinearLayout (Main Content)&#10;│   │   ├── Toolbar (Custom)&#10;│   │   └── FrameLayout (Content)&#10;│   └── NavigationView (Drawer)&#10;```&#10;&#10;### 2. View Binding&#10;```java&#10;// Type-safe view references&#10;protected ActivityBaseBinding binding;&#10;binding = ActivityBaseBinding.inflate(getLayoutInflater());&#10;setContentView(binding.getRoot());&#10;```&#10;&#10;### 3. Material Design&#10;- **Material Components**: Buttons, text fields, cards&#10;- **Material Theming**: Consistent color and typography&#10;- **Material Motion**: Smooth animations and transitions&#10;&#10;## Error Handling&#10;&#10;### 1. Exception Hierarchy&#10;```&#10;AppException&#10;├── NetworkException&#10;├── AuthenticationException&#10;├── ValidationException&#10;└── DatabaseException&#10;```&#10;&#10;### 2. Error Recovery&#10;```java&#10;try {&#10;    // Risky operation&#10;} catch (NetworkException e) {&#10;    // Show cached data&#10;} catch (DatabaseException e) {&#10;    // Retry mechanism&#10;} catch (Exception e) {&#10;    // Generic error handling&#10;}&#10;```&#10;&#10;## Testing Architecture&#10;&#10;### 1. Unit Testing&#10;```java&#10;@Test&#10;public void testSessionManager() {&#10;    SessionManager manager = new SessionManager(context);&#10;    manager.createLoginSession(&quot;user&quot;, &quot;email&quot;, &quot;name&quot;);&#10;    assertTrue(manager.isLoggedIn());&#10;}&#10;```&#10;&#10;### 2. Integration Testing&#10;```java&#10;@Test&#10;public void testFirebaseIntegration() {&#10;    // Test Firebase queries and responses&#10;}&#10;```&#10;&#10;### 3. UI Testing&#10;```java&#10;@Test&#10;public void testLoginFlow() {&#10;    // Test complete login user journey&#10;}&#10;```&#10;&#10;## Performance Considerations&#10;&#10;### 1. Memory Management&#10;- **View Recycling**: RecyclerView for efficient scrolling&#10;- **Image Loading**: Glide for optimized image handling&#10;- **Lifecycle Awareness**: Proper cleanup in onDestroy()&#10;&#10;### 2. Network Optimization&#10;- **Request Batching**: Group related Firebase queries&#10;- **Caching**: Minimize redundant network calls&#10;- **Compression**: Optimize image sizes and formats&#10;&#10;### 3. UI Performance&#10;- **Async Operations**: Background threads for heavy tasks&#10;- **Lazy Loading**: Load content as needed&#10;- **Smooth Animations**: 60fps target for all animations&#10;&#10;## Security Architecture&#10;&#10;### 1. Data Protection&#10;- **Input Validation**: Sanitize all user inputs&#10;- **SQL Injection Prevention**: Use parameterized queries&#10;- **XSS Protection**: Validate URLs and content&#10;&#10;### 2. Authentication Security&#10;- **Session Management**: Secure token handling&#10;- **Password Security**: Hash and salt passwords&#10;- **Permission Checking**: Validate user permissions&#10;&#10;### 3. Network Security&#10;- **HTTPS Only**: Secure data transmission&#10;- **Certificate Pinning**: Prevent man-in-the-middle attacks&#10;- **API Key Protection**: Secure Firebase configuration&#10;&#10;## Scalability Considerations&#10;&#10;### 1. Code Scalability&#10;- **Modular Design**: Easy to add new features&#10;- **Interface Segregation**: Small, focused interfaces&#10;- **Dependency Injection**: Loose coupling between components&#10;&#10;### 2. Data Scalability&#10;- **Database Indexing**: Optimize query performance&#10;- **Data Pagination**: Handle large datasets efficiently&#10;- **Caching Strategy**: Reduce database load&#10;&#10;### 3. Performance Scalability&#10;- **Lazy Loading**: Load features on demand&#10;- **Resource Optimization**: Minimize memory and CPU usage&#10;- **Background Processing**: Handle heavy tasks efficiently&#10;&#10;---&#10;*This architecture provides a solid foundation for the Hidden Sri Lanka app with excellent maintainability, scalability, and performance characteristics.*" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/setup/firebase.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/setup/firebase.md" />
              <option name="updatedContent" value="# Firebase Integration Guide&#10;&#10;## Overview&#10;Hidden Sri Lanka uses Firebase as its backend-as-a-service platform, providing authentication, real-time database, and cloud storage capabilities.&#10;&#10;## Firebase Services Used&#10;&#10;### 1. Firebase Realtime Database&#10;**Purpose**: User authentication and profile data&#10;**Database URL**: `https://hidden-sri-lanka-c3ec5-default-rtdb.asia-southeast1.firebasedatabase.app`&#10;&#10;#### Database Structure&#10;```json&#10;{&#10;  &quot;users&quot;: {&#10;    &quot;user-id-1&quot;: {&#10;      &quot;username&quot;: &quot;john_doe&quot;,&#10;      &quot;email&quot;: &quot;john@example.com&quot;,&#10;      &quot;name&quot;: &quot;John Doe&quot;,&#10;      &quot;password&quot;: &quot;encrypted_password&quot;&#10;    }&#10;  }&#10;}&#10;```&#10;&#10;#### Security Rules&#10;```javascript&#10;{&#10;  &quot;rules&quot;: {&#10;    &quot;users&quot;: {&#10;      &quot;.read&quot;: &quot;auth != null&quot;,&#10;      &quot;.write&quot;: &quot;auth != null&quot;,&#10;      &quot;$uid&quot;: {&#10;        &quot;.validate&quot;: &quot;newData.hasChildren(['username', 'email', 'name'])&quot;&#10;      }&#10;    }&#10;  }&#10;}&#10;```&#10;&#10;### 2. Cloud Firestore&#10;**Purpose**: Attraction data and location information&#10;&#10;#### Database Structure&#10;```&#10;/cities/{cityName}/attractions/{attractionId}&#10;{&#10;  name: string,&#10;  category: string,&#10;  description: string,&#10;  images: array&lt;string&gt;,&#10;  youtubeUrl: string,&#10;  contributorName: string,&#10;  contributedAt: timestamp,&#10;  province: string,&#10;  city: string,&#10;  latitude: number,&#10;  longitude: number&#10;}&#10;```&#10;&#10;#### Example Document&#10;```json&#10;{&#10;  &quot;name&quot;: &quot;Sigiriya Rock Fortress&quot;,&#10;  &quot;category&quot;: &quot;Historical Site&quot;,&#10;  &quot;description&quot;: &quot;Ancient rock fortress and palace ruins...&quot;,&#10;  &quot;images&quot;: [&#10;    &quot;https://example.com/sigiriya1.jpg&quot;,&#10;    &quot;https://example.com/sigiriya2.jpg&quot;&#10;  ],&#10;  &quot;youtubeUrl&quot;: &quot;https://youtube.com/watch?v=example&quot;,&#10;  &quot;contributorName&quot;: &quot;Travel Expert&quot;,&#10;  &quot;contributedAt&quot;: 1691234567890,&#10;  &quot;province&quot;: &quot;Central Province&quot;,&#10;  &quot;city&quot;: &quot;Dambulla&quot;,&#10;  &quot;latitude&quot;: 7.9568,&#10;  &quot;longitude&quot;: 80.7592&#10;}&#10;```&#10;&#10;### 3. Firebase Authentication (Future Enhancement)&#10;**Current Status**: Not implemented yet&#10;**Planned Features**: &#10;- Email/password authentication&#10;- Google Sign-In&#10;- Phone number verification&#10;&#10;## Setup Instructions&#10;&#10;### 1. Firebase Project Configuration&#10;&#10;#### Create Firebase Project&#10;1. Go to [Firebase Console](https://console.firebase.google.com)&#10;2. Click &quot;Create a project&quot;&#10;3. Project name: `hidden-sri-lanka`&#10;4. Enable Google Analytics (recommended)&#10;5. Choose your region (Asia-Southeast1 for Sri Lanka)&#10;&#10;#### Enable Required Services&#10;1. **Realtime Database**:&#10;   - Navigate to &quot;Realtime Database&quot; in sidebar&#10;   - Click &quot;Create Database&quot;&#10;   - Choose &quot;Asia-Southeast1&quot; region&#10;   - Start in &quot;Test Mode&quot; initially&#10;&#10;2. **Cloud Firestore**:&#10;   - Navigate to &quot;Firestore Database&quot;&#10;   - Click &quot;Create Database&quot;&#10;   - Choose &quot;Asia-Southeast1&quot; region&#10;   - Start in &quot;Test Mode&quot;&#10;&#10;3. **Authentication** (Future):&#10;   - Navigate to &quot;Authentication&quot;&#10;   - Click &quot;Get Started&quot;&#10;   - Enable Email/Password provider&#10;&#10;### 2. Android App Configuration&#10;&#10;#### Add Android App to Firebase&#10;1. Click &quot;Add app&quot; → Android icon&#10;2. **Package name**: `com.s23010526.hiddensrilanka`&#10;3. **App nickname**: &quot;Hidden Sri Lanka&quot;&#10;4. **Debug signing certificate**: Optional for development&#10;5. Download `google-services.json`&#10;&#10;#### Install google-services.json&#10;```bash&#10;# Place the file in your app module&#10;cp ~/Downloads/google-services.json app/google-services.json&#10;```&#10;&#10;#### Update build.gradle files&#10;**Project-level build.gradle.kts**:&#10;```kotlin&#10;plugins {&#10;    id(&quot;com.google.gms.google-services&quot;) version &quot;4.3.15&quot; apply false&#10;}&#10;```&#10;&#10;**App-level build.gradle.kts**:&#10;```kotlin&#10;plugins {&#10;    id(&quot;com.google.gms.google-services&quot;)&#10;}&#10;&#10;dependencies {&#10;    implementation(&quot;com.google.firebase:firebase-database:20.3.0&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-firestore:24.9.1&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-auth:22.3.0&quot;)&#10;}&#10;```&#10;&#10;### 3. Security Rules Setup&#10;&#10;#### Realtime Database Rules&#10;```javascript&#10;{&#10;  &quot;rules&quot;: {&#10;    &quot;users&quot;: {&#10;      &quot;.read&quot;: true,&#10;      &quot;.write&quot;: true,&#10;      &quot;$userId&quot;: {&#10;        &quot;.validate&quot;: &quot;newData.hasChildren(['username', 'email', 'name', 'password'])&quot;,&#10;        &quot;username&quot;: {&#10;          &quot;.validate&quot;: &quot;newData.isString() &amp;&amp; newData.val().length &gt; 0&quot;&#10;        },&#10;        &quot;email&quot;: {&#10;          &quot;.validate&quot;: &quot;newData.isString() &amp;&amp; newData.val().matches(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i)&quot;&#10;        },&#10;        &quot;name&quot;: {&#10;          &quot;.validate&quot;: &quot;newData.isString() &amp;&amp; newData.val().length &gt; 0&quot;&#10;        },&#10;        &quot;password&quot;: {&#10;          &quot;.validate&quot;: &quot;newData.isString() &amp;&amp; newData.val().length &gt;= 6&quot;&#10;        }&#10;      }&#10;    }&#10;  }&#10;}&#10;```&#10;&#10;#### Firestore Security Rules&#10;```javascript&#10;rules_version = '2';&#10;service cloud.firestore {&#10;  match /databases/{database}/documents {&#10;    // Allow read access to all cities and attractions&#10;    match /cities/{city}/attractions/{attraction} {&#10;      allow read: if true;&#10;      allow write: if true; // Temporary for development&#10;    }&#10;  }&#10;}&#10;```&#10;&#10;## Data Management&#10;&#10;### 1. Adding Sample Data&#10;&#10;#### Using Firebase Console&#10;1. Navigate to Firestore Database&#10;2. Start collection: `cities`&#10;3. Document ID: City name (e.g., &quot;Colombo&quot;)&#10;4. Add subcollection: `attractions`&#10;5. Add attraction documents with required fields&#10;&#10;#### Using Android Code&#10;```java&#10;FirebaseFirestore db = FirebaseFirestore.getInstance();&#10;&#10;Map&lt;String, Object&gt; attraction = new HashMap&lt;&gt;();&#10;attraction.put(&quot;name&quot;, &quot;Galle Fort&quot;);&#10;attraction.put(&quot;category&quot;, &quot;Historical Site&quot;);&#10;attraction.put(&quot;description&quot;, &quot;Historic fortress built by Portuguese...&quot;);&#10;attraction.put(&quot;contributorName&quot;, &quot;Admin&quot;);&#10;attraction.put(&quot;contributedAt&quot;, System.currentTimeMillis());&#10;&#10;db.collection(&quot;cities&quot;)&#10;  .document(&quot;Galle&quot;)&#10;  .collection(&quot;attractions&quot;)&#10;  .add(attraction);&#10;```&#10;&#10;### 2. Data Validation&#10;&#10;#### Client-side Validation&#10;```java&#10;public boolean validateAttraction(Attraction attraction) {&#10;    return attraction.getName() != null &amp;&amp; !attraction.getName().isEmpty() &amp;&amp;&#10;           attraction.getCategory() != null &amp;&amp; !attraction.getCategory().isEmpty() &amp;&amp;&#10;           attraction.getDescription() != null &amp;&amp; attraction.getDescription().length() &gt;= 50 &amp;&amp;&#10;           attraction.getImages() != null &amp;&amp; !attraction.getImages().isEmpty();&#10;}&#10;```&#10;&#10;#### Server-side Validation (Cloud Functions)&#10;```javascript&#10;exports.validateAttraction = functions.firestore&#10;    .document('cities/{cityId}/attractions/{attractionId}')&#10;    .onWrite((change, context) =&gt; {&#10;        const attraction = change.after.data();&#10;        &#10;        if (!attraction.name || attraction.name.length &lt; 3) {&#10;            throw new Error('Invalid attraction name');&#10;        }&#10;        &#10;        return null;&#10;    });&#10;```&#10;&#10;## Performance Optimization&#10;&#10;### 1. Firestore Indexes&#10;Create composite indexes for common queries:&#10;```&#10;Collection: cities/{cityId}/attractions&#10;Fields: category (Ascending), contributedAt (Descending)&#10;```&#10;&#10;### 2. Data Caching&#10;```java&#10;FirebaseFirestoreSettings settings = new FirebaseFirestoreSettings.Builder()&#10;    .setPersistenceEnabled(true)&#10;    .setCacheSizeBytes(FirebaseFirestoreSettings.CACHE_SIZE_UNLIMITED)&#10;    .build();&#10;db.setFirestoreSettings(settings);&#10;```&#10;&#10;### 3. Offline Support&#10;```java&#10;db.enableNetwork().addOnCompleteListener(task -&gt; {&#10;    // Re-enable network&#10;});&#10;&#10;db.disableNetwork().addOnCompleteListener(task -&gt; {&#10;    // Disable network, use cached data&#10;});&#10;```&#10;&#10;## Monitoring &amp; Analytics&#10;&#10;### 1. Firebase Analytics&#10;```java&#10;FirebaseAnalytics analytics = FirebaseAnalytics.getInstance(this);&#10;&#10;Bundle bundle = new Bundle();&#10;bundle.putString(&quot;attraction_name&quot;, attractionName);&#10;bundle.putString(&quot;city&quot;, cityName);&#10;analytics.logEvent(&quot;attraction_viewed&quot;, bundle);&#10;```&#10;&#10;### 2. Crashlytics (Recommended)&#10;```kotlin&#10;// Add to build.gradle.kts&#10;implementation(&quot;com.google.firebase:firebase-crashlytics:18.6.0&quot;)&#10;```&#10;&#10;### 3. Performance Monitoring&#10;```kotlin&#10;implementation(&quot;com.google.firebase:firebase-perf:20.5.1&quot;)&#10;```&#10;&#10;## Testing&#10;&#10;### 1. Firebase Emulator Suite&#10;```bash&#10;# Install Firebase CLI&#10;npm install -g firebase-tools&#10;&#10;# Initialize emulators&#10;firebase init emulators&#10;&#10;# Start emulators&#10;firebase emulators:start&#10;```&#10;&#10;### 2. Test Data Setup&#10;```java&#10;// Use emulator in debug builds&#10;if (BuildConfig.DEBUG) {&#10;    FirebaseFirestore.getInstance().useEmulator(&quot;10.0.2.2&quot;, 8080);&#10;    FirebaseDatabase.getInstance().useEmulator(&quot;10.0.2.2&quot;, 9000);&#10;}&#10;```&#10;&#10;## Backup &amp; Migration&#10;&#10;### 1. Data Export&#10;```bash&#10;# Export Firestore data&#10;gcloud firestore export gs://your-bucket-name&#10;&#10;# Export Realtime Database&#10;firebase database:get / --output backup.json&#10;```&#10;&#10;### 2. Data Import&#10;```bash&#10;# Import to Firestore&#10;gcloud firestore import gs://your-bucket-name/backup-folder&#10;&#10;# Import to Realtime Database&#10;firebase database:set / backup.json&#10;```&#10;&#10;## Troubleshooting&#10;&#10;### Common Issues&#10;1. **Permission Denied**: Check security rules&#10;2. **Network Issues**: Verify internet connection&#10;3. **Quota Exceeded**: Monitor Firebase usage&#10;4. **Sync Issues**: Clear app data and re-sync&#10;&#10;### Debug Tools&#10;- Firebase Console → Usage tab&#10;- Android Studio → Firebase Assistant&#10;- Firebase CLI for local testing&#10;- Network inspection tools&#10;&#10;---&#10;*This guide provides comprehensive Firebase integration for the Hidden Sri Lanka app with proper security, performance, and maintenance considerations.*" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/setup/installation.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/setup/installation.md" />
              <option name="updatedContent" value="# Installation &amp; Setup Guide&#10;&#10;## Prerequisites&#10;&#10;### Development Environment&#10;- **Android Studio**: Arctic Fox (2020.3.1) or newer&#10;- **JDK**: Java Development Kit 8 or higher&#10;- **Android SDK**: API level 21 (Android 5.0) minimum, API level 35 (Android 14) target&#10;- **Gradle**: 8.4.1 or compatible version&#10;- **Git**: For version control and repository cloning&#10;&#10;### Hardware Requirements&#10;- **RAM**: Minimum 8GB, recommended 16GB&#10;- **Storage**: At least 10GB free space&#10;- **Processor**: Intel i5 or equivalent AMD processor&#10;- **Graphics**: Integrated graphics sufficient for Android emulator&#10;&#10;## Installation Steps&#10;&#10;### 1. Clone Repository&#10;```bash&#10;git clone https://github.com/your-username/Hidden-Sri-Lanka.git&#10;cd Hidden-Sri-Lanka&#10;```&#10;&#10;### 2. Open in Android Studio&#10;1. Launch Android Studio&#10;2. Select &quot;Open an Existing Project&quot;&#10;3. Navigate to the cloned repository folder&#10;4. Click &quot;OK&quot; to open the project&#10;5. Wait for Gradle sync to complete&#10;&#10;### 3. Configure Build Environment&#10;```bash&#10;# Check Gradle version compatibility&#10;./gradlew --version&#10;&#10;# Clean and build project&#10;./gradlew clean&#10;./gradlew build&#10;```&#10;&#10;### 4. Setup Android SDK&#10;1. Open SDK Manager in Android Studio&#10;2. Install required SDK platforms:&#10;   - Android 14 (API 35) - Target SDK&#10;   - Android 5.0 (API 21) - Minimum SDK&#10;3. Install required tools:&#10;   - Android SDK Build-Tools&#10;   - Android Emulator&#10;   - Google Play Services&#10;&#10;## Firebase Configuration&#10;&#10;### 1. Create Firebase Project&#10;1. Visit [Firebase Console](https://console.firebase.google.com)&#10;2. Click &quot;Create a project&quot;&#10;3. Enter project name: &quot;Hidden Sri Lanka&quot;&#10;4. Enable Google Analytics (optional)&#10;5. Complete project creation&#10;&#10;### 2. Add Android App&#10;1. Click &quot;Add app&quot; → Android icon&#10;2. Enter package name: `com.s23010526.hiddensrilanka`&#10;3. Enter app nickname: &quot;Hidden Sri Lanka&quot;&#10;4. Download `google-services.json`&#10;5. Place file in `app/` directory&#10;&#10;### 3. Configure Firebase Services&#10;Enable the following services in Firebase Console:&#10;- **Authentication**: For user login/signup&#10;- **Firestore Database**: For attraction data&#10;- **Realtime Database**: For user authentication data&#10;- **Storage**: For image uploads (future feature)&#10;&#10;## Project Structure Setup&#10;&#10;### 1. Verify Directory Structure&#10;```&#10;Hidden-Sri-Lanka/&#10;├── app/&#10;│   ├── src/main/java/com/s23010526/hiddensrilanka/&#10;│   ├── src/main/res/&#10;│   ├── google-services.json&#10;│   └── build.gradle.kts&#10;├── docs/ (created)&#10;├── gradle/&#10;└── build.gradle.kts&#10;```&#10;&#10;### 2. Check Dependencies&#10;Verify these dependencies in `app/build.gradle.kts`:&#10;```kotlin&#10;implementation 'com.google.firebase:firebase-firestore:24.4.1'&#10;implementation 'com.google.firebase:firebase-database:20.0.4'&#10;implementation 'com.google.firebase:firebase-auth:21.0.3'&#10;implementation 'com.google.android.gms:play-services-location:21.0.1'&#10;implementation 'com.github.bumptech.glide:glide:4.14.2'&#10;```&#10;&#10;## Local Configuration&#10;&#10;### 1. Create local.properties&#10;```properties&#10;# Local development settings&#10;sdk.dir=/path/to/Android/Sdk&#10;firebase.database.url=your-firebase-database-url&#10;```&#10;&#10;### 2. Configure Signing (Optional)&#10;For release builds, create `keystore.properties`:&#10;```properties&#10;storePassword=your_store_password&#10;keyPassword=your_key_password&#10;keyAlias=your_key_alias&#10;storeFile=path/to/keystore.jks&#10;```&#10;&#10;### 3. Environment Variables&#10;Set environment variables if needed:&#10;```bash&#10;export ANDROID_HOME=/path/to/Android/Sdk&#10;export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools&#10;```&#10;&#10;## Testing Setup&#10;&#10;### 1. Run on Emulator&#10;1. Create Android Virtual Device (AVD)&#10;2. Select API level 30 or higher&#10;3. Choose device with Google Play Services&#10;4. Launch emulator and run app&#10;&#10;### 2. Run on Physical Device&#10;1. Enable Developer Options on device&#10;2. Enable USB Debugging&#10;3. Connect device via USB&#10;4. Accept debugging permission&#10;5. Run app from Android Studio&#10;&#10;### 3. Test Location Services&#10;- Grant location permissions when prompted&#10;- Use emulator extended controls for location simulation&#10;- Test with different mock locations (Colombo, Kandy, etc.)&#10;&#10;## Common Issues &amp; Solutions&#10;&#10;### Gradle Sync Issues&#10;```bash&#10;# Clear Gradle cache&#10;./gradlew clean&#10;rm -rf ~/.gradle/caches/&#10;&#10;# Re-download dependencies&#10;./gradlew build --refresh-dependencies&#10;```&#10;&#10;### Firebase Connection Issues&#10;1. Verify `google-services.json` is in correct location&#10;2. Check package name matches Firebase configuration&#10;3. Ensure Firebase services are enabled&#10;4. Verify internet connection and firewall settings&#10;&#10;### Location Permission Issues&#10;1. Grant location permissions in device settings&#10;2. Check GPS is enabled on device/emulator&#10;3. Verify location services in app permissions&#10;4. Test with mock locations for development&#10;&#10;### Build Errors&#10;Common solutions:&#10;- Update Android Studio to latest version&#10;- Sync Gradle files&#10;- Invalidate caches and restart IDE&#10;- Check SDK versions compatibility&#10;- Update dependencies to latest versions&#10;&#10;## Development Workflow&#10;&#10;### 1. Branch Strategy&#10;```bash&#10;# Create feature branch&#10;git checkout -b feature/your-feature-name&#10;&#10;# Make changes and commit&#10;git add .&#10;git commit -m &quot;Add your feature description&quot;&#10;&#10;# Push and create pull request&#10;git push origin feature/your-feature-name&#10;```&#10;&#10;### 2. Code Style&#10;- Follow Android Kotlin Style Guide&#10;- Use meaningful variable and method names&#10;- Add comments for complex logic&#10;- Maintain consistent indentation (4 spaces)&#10;&#10;### 3. Testing&#10;- Test on multiple device sizes&#10;- Verify location services functionality&#10;- Test offline/online scenarios&#10;- Validate form inputs and edge cases&#10;&#10;## Deployment Preparation&#10;&#10;### 1. Release Build&#10;```bash&#10;# Generate signed APK&#10;./gradlew assembleRelease&#10;&#10;# Generate AAB for Play Store&#10;./gradlew bundleRelease&#10;```&#10;&#10;### 2. Version Management&#10;Update version in `app/build.gradle.kts`:&#10;```kotlin&#10;android {&#10;    defaultConfig {&#10;        versionCode 1&#10;        versionName &quot;1.0.0&quot;&#10;    }&#10;}&#10;```&#10;&#10;### 3. ProGuard Configuration&#10;Ensure proper obfuscation rules in `proguard-rules.pro`&#10;&#10;---&#10;*Follow this guide to set up your development environment and start contributing to the Hidden Sri Lanka project.*" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>